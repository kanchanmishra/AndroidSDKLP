com/liveperson/api/exception/BadConversationException = Com.Liveperson.Api.Exception.BadConversationException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/api/exception/BadMessageException = Com.Liveperson.Api.Exception.BadMessageException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/api/LivePersonCallback = Com.Liveperson.Api.ILivePersonCallback
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
com/liveperson/api/LivePersonCallbackImpl = Com.Liveperson.Api.LivePersonCallbackImpl
  <init>()V = .ctor()
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
com/liveperson/api/LivePersonIntents = Com.Liveperson.Api.LivePersonIntents
  <init>()V = .ctor()
  getIntentFilterForAllEvents()Landroid/content/IntentFilter; = IntentFilterForAllEvents
  getAgentData(Landroid/content/Intent;)Lcom/liveperson/messaging/model/AgentData; = GetAgentData(Android.Content.Intent)
  getAgentTypingValue(Landroid/content/Intent;)Z = GetAgentTypingValue(Android.Content.Intent)
  getConnectedValue(Landroid/content/Intent;)Z = GetConnectedValue(Android.Content.Intent)
  getConversationID(Landroid/content/Intent;)Ljava/lang/String; = GetConversationID(Android.Content.Intent)
  getLinkUri(Landroid/content/Intent;)Ljava/lang/String; = GetLinkUri(Android.Content.Intent)
  getLPConversationData(Landroid/content/Intent;)Lcom/liveperson/api/sdk/LPConversationData; = GetLPConversationData(Android.Content.Intent)
  getOfflineHoursOn(Landroid/content/Intent;)Z = GetOfflineHoursOn(Android.Content.Intent)
  getOnErrorMessage(Landroid/content/Intent;)Ljava/lang/String; = GetOnErrorMessage(Android.Content.Intent)
  getOnErrorTaskType(Landroid/content/Intent;)Lcom/liveperson/messaging/TaskType; = GetOnErrorTaskType(Android.Content.Intent)
  getPermissionDoNotShowAgainMarked(Landroid/content/Intent;)Z = GetPermissionDoNotShowAgainMarked(Android.Content.Intent)
  getPermissionType(Landroid/content/Intent;)Lcom/liveperson/api/sdk/PermissionType; = GetPermissionType(Android.Content.Intent)
  sendOnAgentAvatarTapped(Landroid/content/Context;Lcom/liveperson/messaging/model/AgentData;)V = SendOnAgentAvatarTapped(Android.Content.Context, Com.Liveperson.Messaging.Model.AgentData)
  sendOnAgentDetailsChanged(Landroid/content/Context;Lcom/liveperson/messaging/model/AgentData;)V = SendOnAgentDetailsChanged(Android.Content.Context, Com.Liveperson.Messaging.Model.AgentData)
  sendOnAgentTyping(Landroid/content/Context;Z)V = SendOnAgentTyping(Android.Content.Context, bool)
  sendOnConnectionChanged(Landroid/content/Context;Z)V = SendOnConnectionChanged(Android.Content.Context, bool)
  sendOnConversationMarkedAsNormal(Landroid/content/Context;)V = SendOnConversationMarkedAsNormal(Android.Content.Context)
  sendOnConversationMarkedAsUrgent(Landroid/content/Context;)V = SendOnConversationMarkedAsUrgent(Android.Content.Context)
  sendOnConversationResolved(Landroid/content/Context;Lcom/liveperson/api/sdk/LPConversationData;)V = SendOnConversationResolved(Android.Content.Context, Com.Liveperson.Api.Sdk.LPConversationData)
  sendOnConversationStarted(Landroid/content/Context;Lcom/liveperson/api/sdk/LPConversationData;)V = SendOnConversationStarted(Android.Content.Context, Com.Liveperson.Api.Sdk.LPConversationData)
  sendOnCsatDismissed(Landroid/content/Context;)V = SendOnCsatDismissed(Android.Content.Context)
  sendOnCsatLaunched(Landroid/content/Context;)V = SendOnCsatLaunched(Android.Content.Context)
  sendOnCsatSkipped(Landroid/content/Context;)V = SendOnCsatSkipped(Android.Content.Context)
  sendOnCsatSubmitted(Landroid/content/Context;Ljava/lang/String;)V = SendOnCsatSubmitted(Android.Content.Context, string)
  sendOnErrorIntent(Landroid/content/Context;Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = SendOnErrorIntent(Android.Content.Context, Com.Liveperson.Messaging.TaskType, string)
  sendOnOfflineHoursChanges(Landroid/content/Context;Z)V = SendOnOfflineHoursChanges(Android.Content.Context, bool)
  sendOnStructuredContentLinkClicked(Landroid/content/Context;Ljava/lang/String;)V = SendOnStructuredContentLinkClicked(Android.Content.Context, string)
  sendOnTokenExpired(Landroid/content/Context;)V = SendOnTokenExpired(Android.Content.Context)
  sendOnUserActionOnPreventedPermission(Landroid/content/Context;Lcom/liveperson/api/sdk/PermissionType;)V = SendOnUserActionOnPreventedPermission(Android.Content.Context, Com.Liveperson.Api.Sdk.PermissionType)
  sendOnUserDeniedPermission(Landroid/content/Context;Lcom/liveperson/api/sdk/PermissionType;Z)V = SendOnUserDeniedPermission(Android.Content.Context, Com.Liveperson.Api.Sdk.PermissionType, bool)
  sendOnUserExpired(Landroid/content/Context;)V = SendOnUserExpired(Android.Content.Context)
com/liveperson/api/request/BaseAMSSocketRequest = Com.Liveperson.Api.Request.BaseAMSSocketRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;J)V = .ctor(string, long)
  getSocketUrl()Ljava/lang/String; = SocketUrl
com/liveperson/api/request/GenerateUploadTokenRequest = Com.Liveperson.Api.Request.GenerateUploadTokenRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setResponseCallBack(Lcom/liveperson/infra/ICallback;)V = SetResponseCallBack(Com.Liveperson.Infra.ICallback)
com/liveperson/api/request/message/PublishMessage = Com.Liveperson.Api.Request.Message.IPublishMessage
  getMessage()Ljava/lang/Object; = Message
com/liveperson/api/response/BaseGenerateURLResponse = Com.Liveperson.Api.Response.BaseGenerateURLResponse
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  QUERY_PARAMS = QueryParams
  queryParams = QueryParams
  RELATIVE_PATH = RelativePath
  relativePath = RelativePath
com/liveperson/api/response/events/ContentEventNotification = Com.Liveperson.Api.Response.Events.ContentEventNotification
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  dialogId = DialogId
  event = Event
  eventId = EventId
  originatorId = OriginatorId
  originatorMetadata = OriginatorMetadata
  sequence = Sequence
  serverTimestamp = ServerTimestamp
com/liveperson/api/response/IOnUrlReady = Com.Liveperson.Api.Response.IOnUrlReady
  onUrlError(Ljava/lang/String;)V = OnUrlError(string)
  onUrlReady(Lcom/liveperson/api/response/BaseGenerateURLResponse;)V = OnUrlReady(Com.Liveperson.Api.Response.BaseGenerateURLResponse)
com/liveperson/api/response/model/Change = Com.Liveperson.Api.Response.Model.Change
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  result = Result
  type = Type
com/liveperson/api/response/model/CobrowseDialog = Com.Liveperson.Api.Response.Model.CobrowseDialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  metaData = MetaData
com/liveperson/api/response/model/ContentType = Com.Liveperson.Api.Response.Model.ContentType
  application_json = ApplicationJson
  forms_secure_invitation = FormsSecureInvitation
  forms_secure_submission = FormsSecureSubmission
  hosted_file = HostedFile
  text_html = TextHtml
  text_plain = TextPlain
  text_structured_content = TextStructuredContent
  isFile()Z = IsFile
  isFormInvitation()Z = IsFormInvitation
  isFormSubmission()Z = IsFormSubmission
  isHtml()Z = IsHtml
  isSimpleText()Z = IsSimpleText
  getText()Ljava/lang/String; = Text
  fromString(Ljava/lang/String;)Lcom/liveperson/api/response/model/ContentType; = FromString(string)
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/model/ContentType; = ValueOf(string)
  values()[Lcom/liveperson/api/response/model/ContentType; = Values()
com/liveperson/api/response/model/ConversationHistoryDetails = Com.Liveperson.Api.Response.Model.ConversationHistoryDetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  closeReason = CloseReason
  csat = Csat
  endTs = EndTs
  participants = Participants
  startTs = StartTs
  state = State
com/liveperson/api/response/model/ConversationINCADetails = Com.Liveperson.Api.Response.Model.ConversationINCADetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  conversationId = ConversationId
com/liveperson/api/response/model/ConversationUMSDetails = Com.Liveperson.Api.Response.Model.ConversationUMSDetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  delay = Delay
  dialogs = Dialogs
  manualETTR = ManualETTR
  metaDataLastUpdateTs = MetaDataLastUpdateTs
  skillId = SkillId
  ttr = Ttr
  getCalculatedTTR()J = CalculatedTTR
com/liveperson/api/response/model/Delay = Com.Liveperson.Api.Response.Model.Delay
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  tillWhen = TillWhen
  type = Type
com/liveperson/api/response/model/DeliveryStatusUpdateInfo = Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo
  <init>(Lorg/json/JSONArray;)V = .ctor(Org.Json.JSONArray)
  getMetadata()Lorg/json/JSONArray; = Metadata
com/liveperson/api/response/model/Dialog = Com.Liveperson.Api.Response.Model.Dialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  dialogId = DialogId
  dialogType = DialogType
  open = Open
  participants = Participants
com/liveperson/api/response/model/Event = Com.Liveperson.Api.Response.Model.Event
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  chatState = ChatState
  CONTENT = Content
  contentType = ContentType
  quickRepliesJsonString = QuickRepliesJsonString
  sequenceList = SequenceList
  status = Status
  type = Type
  extractLinks(Ljava/lang/String;)[Ljava/lang/String; = ExtractLinks(string)
com/liveperson/api/response/model/MultiDialog = Com.Liveperson.Api.Response.Model.MultiDialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TYPE = Type
  getType()Lcom/liveperson/api/response/model/MultiDialog$ChannelTypes; = Type
  create(Lorg/json/JSONObject;)Lcom/liveperson/api/response/model/Dialog; = Create(Org.Json.JSONObject)
com/liveperson/api/response/model/OriginatorMetadata = Com.Liveperson.Api.Response.Model.OriginatorMetadata
  <init>()V = .ctor()
  mId = MId
  mRole = MRole
  TAG = Tag
  fromJson(Lorg/json/JSONObject;)Lcom/liveperson/api/response/model/OriginatorMetadata; = FromJson(Org.Json.JSONObject)
com/liveperson/api/response/model/Participants = Com.Liveperson.Api.Response.Model.Participants
  <init>()V = .ctor()
  ALL_AGENTS = AllAgents
  ASSIGNED_AGENT = AssignedAgent
  CONSUMER = Consumer
  CONTROLLER = Controller
  MANAGER = Manager
  OTHER_AGENTS = OtherAgents
  READER = Reader
  add([Ljava/lang/String;Lcom/liveperson/api/response/model/Participants$ParticipantRole;)V = Add(string[], Com.Liveperson.Api.Response.Model.Participants.ParticipantRole)
com/liveperson/api/response/model/QueryParams = Com.Liveperson.Api.Response.Model.QueryParams
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  EXPIRE_TIME = ExpireTime
  expireTime = ExpireTime
  TEMP_URL = TempUrl
  tempURL = TempURL
  appendQueryParameter(Landroid/net/Uri$Builder;)V = AppendQueryParameter(Android.Net.Uri.Builder)
com/liveperson/api/response/model/Result = Com.Liveperson.Api.Response.Model.Result
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  conversationDetails = ConversationDetails
  convId = ConvId
  effectiveTTR = EffectiveTTR
com/liveperson/api/response/model/Ttr = Com.Liveperson.Api.Response.Model.Ttr
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  ttrType = TtrType
  value = Value
com/liveperson/api/response/model/UserProfile = Com.Liveperson.Api.Response.Model.UserProfile
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  AVATAR_URL = AvatarUrl
  BACKGND_IMG_URI = BackgndImgUri
  CERT_NAME = CertName
  DESCRIPTION = Description
  FIRST_NAME = FirstName
  LAST_NAME = LastName
  MAIL = Mail
  MOBILE_NUM = MobileNum
  NICKNAME = Nickname
  PRIVATE_DATA = PrivateData
  PUSH_NOTIFICATION_DATA = PushNotificationData
  ROLE = Role
  SERVICE_NAME = ServiceName
  TOKEN = Token
  USER_ID = UserId
  getAvatarUrl()Ljava/lang/String; = AvatarUrl
  setAvatarUrl(Ljava/lang/String;)V = AvatarUrl
  getBackgndImgUri()Ljava/lang/String; = BackgndImgUri
  setBackgndImgUri(Ljava/lang/String;)V = BackgndImgUri
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getEmail()Ljava/lang/String; = Email
  setEmail(Ljava/lang/String;)V = Email
  getFirstName()Ljava/lang/String; = FirstName
  setFirstName(Ljava/lang/String;)V = FirstName
  getFullName()Ljava/lang/String; = FullName
  getLastName()Ljava/lang/String; = LastName
  setLastName(Ljava/lang/String;)V = LastName
  getLocalId()J = LocalId
  setLocalId(J)V = LocalId
  getNickname()Ljava/lang/String; = Nickname
  setNickname(Ljava/lang/String;)V = Nickname
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getRequestId()J = RequestId
  setRequestId(J)V = RequestId
  getRole()Ljava/lang/String; = Role
  setRole(Ljava/lang/String;)V = Role
  addToJson(Lorg/json/JSONObject;)V = AddToJson(Org.Json.JSONObject)
  getPrivateData()Lcom/liveperson/api/response/model/UserProfile$PrivateData; = GetPrivateData()
  getUserType()Lcom/liveperson/api/response/model/UserProfile$UserType; = GetUserType()
  setMobileNumber(Ljava/lang/String;)V = SetMobileNumber(string)
  setOriginatorID(Ljava/lang/String;)V = SetOriginatorID(string)
  setPrivateData(Lcom/liveperson/api/response/model/UserProfile$PrivateData;)V = SetPrivateData(Com.Liveperson.Api.Response.Model.UserProfile.PrivateData)
  setUserType(Lcom/liveperson/api/response/model/UserProfile$UserType;)V = SetUserType(Com.Liveperson.Api.Response.Model.UserProfile.UserType)
com/liveperson/api/response/types/CloseReason = Com.Liveperson.Api.Response.Types.CloseReason
  AGENT = Agent
  CONSUMER = Consumer
  SYSTEM = System
  TIMEOUT = Timeout
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/CloseReason; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/CloseReason; = Values()
com/liveperson/api/response/types/ConversationState = Com.Liveperson.Api.Response.Types.ConversationState
  CLOSE = Close
  LOCKED = Locked
  OPEN = Open
  PENDING = Pending
  QUEUED = Queued
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/ConversationState; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/ConversationState; = Values()
com/liveperson/api/response/types/CSAT = Com.Liveperson.Api.Response.Types.CSAT
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  csatRate = CsatRate
  csatResolutionConfirmation = CsatResolutionConfirmation
  csatStatus = CsatStatus
  isShowedCsat()Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS; = IsShowedCsat()
com/liveperson/api/response/types/CsatStatus = Com.Liveperson.Api.Response.Types.CsatStatus
  EMPTY = Empty
  FILLED = Filled
  PARTIALLY_FILLED = PartiallyFilled
  SKIPPED = Skipped
  getValue()Ljava/lang/String; = Value
  get(Ljava/lang/String;)Lcom/liveperson/api/response/types/CsatStatus; = Get(string)
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/CsatStatus; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/CsatStatus; = Values()
com/liveperson/api/response/types/DeliveryStatus = Com.Liveperson.Api.Response.Types.DeliveryStatus
  ABORTED = Aborted
  ACCEPT = Accept
  ACTION = Action
  ERROR = Error
  READ = Read
  SUBMITTED = Submitted
  VIEWED = Viewed
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/DeliveryStatus; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/DeliveryStatus; = Values()
com/liveperson/api/response/types/TTRType = Com.Liveperson.Api.Response.Types.TTRType
  CUSTOM = Custom
  NIGHT = Night
  NORMAL = Normal
  PRIORITIZED = Prioritized
  URGENT = Urgent
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/TTRType; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/TTRType; = Values()
com/liveperson/api/sdk/LPConversationData = Com.Liveperson.Api.Sdk.LPConversationData
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/String;)V = .ctor(string)
  CREATOR = Creator
  getCloseReason()Lcom/liveperson/api/response/types/CloseReason; = CloseReason
  setCloseReason(Lcom/liveperson/api/response/types/CloseReason;)V = CloseReason
  getId()Ljava/lang/String; = Id
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/api/sdk/PermissionType = Com.Liveperson.Api.Sdk.PermissionType
  PHOTO_SHARING = PhotoSharing
  VOICE_RECORDING = VoiceRecording
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/sdk/PermissionType; = ValueOf(string)
  values()[Lcom/liveperson/api/sdk/PermissionType; = Values()
com/liveperson/infra/messaging/BuildConfig = Com.Liveperson.Infra.Messaging.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/messaging/background/BackgroundActionsService = Com.Liveperson.Messaging.Background.BackgroundActionsService
  <init>()V = .ctor()
  EXTRA_ACTION_TYPE = ExtraActionType
  EXTRA_ACTION_TYPE_UPLOAD = ExtraActionTypeUpload
  EXTRA_FILE_TYPE = ExtraFileType
  EXTRA_TYPE_ACTION_DOWNLOAD = ExtraTypeActionDownload
  EXTRA_TYPE_ACTION_REUPLOAD = ExtraTypeActionReupload
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/liveperson/messaging/background/DownloadFileTask = Com.Liveperson.Messaging.Background.DownloadFileTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  mDownloadFileTaskParams = MDownloadFileTaskParams
  isDownloadCompleted()Z = IsDownloadCompleted
  isDownloadFailed()Z = IsDownloadFailed
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionUnavailable()V = OnConnectionUnavailable()
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
  setCallBack(Lcom/liveperson/messaging/background/DownloadFileTaskCallback;)V = SetCallBack(Com.Liveperson.Messaging.Background.IDownloadFileTaskCallback)
  setStatus(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetStatus(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  startDownload()V = StartDownload()
com/liveperson/messaging/background/DownloadFileTaskCallback = Com.Liveperson.Messaging.Background.IDownloadFileTaskCallback
  onDownloadFailed(Lcom/liveperson/messaging/background/DownloadFileTask;Ljava/lang/Throwable;)V = OnDownloadFailed(Com.Liveperson.Messaging.Background.DownloadFileTask, Java.Lang.Throwable)
  onDownloadFinishedSuccessfully(Ljava/lang/String;)V = OnDownloadFinishedSuccessfully(string)
  onReadyToGetUrl()V = OnReadyToGetUrl()
com/liveperson/messaging/background/filesharing/BaseTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.BaseTaskBundle
  <init>()V = .ctor()
  mBrandId = MBrandId
  mRestRequestParams = MRestRequestParams
  mSwiftDomain = MSwiftDomain
  mTargetId = MTargetId
  getBrandId()Ljava/lang/String; = BrandId
  getRestRequestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestRequestParams
  getSwiftDomain()Ljava/lang/String; = SwiftDomain
  getTargetId()Ljava/lang/String; = TargetId
  addBrandId(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddBrandId(string)
  addRestDomain(Lcom/liveperson/messaging/network/http/RestRequestParams;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddRestDomain(Com.Liveperson.Messaging.Network.Http.RestRequestParams)
  addSwiftDomain(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddSwiftDomain(string)
  addTargetId(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddTargetId(string)
com/liveperson/messaging/background/filesharing/BaseUploadTask = Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask
  <init>(Ljava/lang/Integer;)V = .ctor(Java.Lang.Integer)
  mFileRowId = MFileRowId
  mMessageRowId = MMessageRowId
  mOriginalFileByteArray = MOriginalFileByteArray
  mRelativePath = MRelativePath
  mStatus = MStatus
  mUploadTimeout = MUploadTimeout
  sendMessageCommand = SendMessageCommand
  TAG = Tag
  getEventId()Ljava/lang/String; = EventId
  isUploadCompleted()Z = IsUploadCompleted
  isUploadFailed()Z = IsUploadFailed
  getMessageRowId()J = MessageRowId
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  getFileByteArray()[B = GetFileByteArray()
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionUnavailable()V = OnConnectionUnavailable()
  onUploadFailed(Ljava/lang/Throwable;)V = OnUploadFailed(Java.Lang.Throwable)
  sendPublishFile(Z)V = SendPublishFile(bool)
  setCallBack(Lcom/liveperson/messaging/background/UploadFileTaskCallback;)V = SetCallBack(Com.Liveperson.Messaging.Background.IUploadFileTaskCallback)
  setSendMessageCommandCallback()V = SetSendMessageCommandCallback()
  setStatus(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetStatus(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  startUpload()V = StartUpload()
com/liveperson/messaging/background/filesharing/DownloadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle
  <init>()V = .ctor()
  getContext()Landroid/content/Context; = Context
  getFileRowId()J = FileRowId
  getMessageRowId()J = MessageRowId
  getRelativePath()Ljava/lang/String; = RelativePath
  getRestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestParams
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddFileRowId(long)
  addMessageRowId(J)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddMessageRowId(long)
  addRelativePath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddRelativePath(string)
  build(JLandroid/content/Context;)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = Build(long, Android.Content.Context)
com/liveperson/messaging/background/filesharing/FileExtensionTypes = Com.Liveperson.Messaging.Background.Filesharing.FileExtensionTypes
  <init>()V = .ctor()
  getImageExtensions()Ljava/util/List; = ImageExtensions
  getImageExtensionsAsSqlString()Ljava/lang/String; = ImageExtensionsAsSqlString
  getVoiceExtensions()Ljava/util/List; = VoiceExtensions
  getVoiceExtensionsAsSqlString()Ljava/lang/String; = VoiceExtensionsAsSqlString
com/liveperson/messaging/background/filesharing/FileSharingType = Com.Liveperson.Messaging.Background.Filesharing.FileSharingType
  IMAGE = Image
  VOICE = Voice
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/FileSharingType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/background/filesharing/FileSharingType; = Values()
com/liveperson/messaging/background/filesharing/image/DownloadImageTask = Com.Liveperson.Messaging.Background.Filesharing.Image.DownloadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
com/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.Image.ReUploadImageTaskBundle
  <init>()V = .ctor()
  getEventId()Ljava/lang/String; = EventId
  getFileRowId()J = FileRowId
  getOriginalMessageTime()J = OriginalMessageTime
  getThumbnailLocalPath()Ljava/lang/String; = ThumbnailLocalPath
  addEventID(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddEventID(string)
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddFileRowId(long)
  addOriginalLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddOriginalLocalPath(string)
  addOriginalMessageTime(J)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddOriginalMessageTime(long)
  addThumbnailLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddThumbnailLocalPath(string)
com/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.Image.UploadImageTaskBundle
  <init>()V = .ctor()
  isImageFromCamera()Z = IsImageFromCamera
  addImageFromCamera(Z)Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle; = AddImageFromCamera(bool)
com/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.ReUploadFileTaskBundle
  <init>()V = .ctor()
  getEventId()Ljava/lang/String; = EventId
  getFileRowId()J = FileRowId
  getOriginalMessageTime()J = OriginalMessageTime
  addEventID(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddEventID(string)
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddFileRowId(long)
  addOriginalLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddOriginalLocalPath(string)
  addOriginalMessageTime(J)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddOriginalMessageTime(long)
com/liveperson/messaging/background/filesharing/UploadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.UploadFileTaskBundle
  <init>()V = .ctor()
  mFileContentType = MFileContentType
  mFilePath = MFilePath
  mFileTypeExtension = MFileTypeExtension
  mFileUri = MFileUri
  TAG = Tag
  getFileContentType()Ljava/lang/String; = FileContentType
  getFilePath()Ljava/lang/String; = FilePath
  getFileTypeExtension()Ljava/lang/String; = FileTypeExtension
  setFileTypeExtension(Ljava/lang/String;)V = FileTypeExtension
  getFileUri()Landroid/net/Uri; = FileUri
  getMessage()Lcom/liveperson/infra/utils/MaskedMessage; = Message
  getRestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestParams
  getTaskId()I = TaskId
  addFileUri(Landroid/net/Uri;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = AddFileUri(Android.Net.Uri)
  addMessage(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = AddMessage(Com.Liveperson.Infra.Utils.MaskedMessage)
  build(ILandroid/content/Context;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = Build(int, Android.Content.Context)
  setTaskID(I)V = SetTaskID(int)
com/liveperson/messaging/background/filesharing/voice/DownloadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.DownloadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
com/liveperson/messaging/background/filesharing/voice/ReUploadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.ReUploadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.ReUploadFileTaskBundle, Java.Lang.Integer)
  TAG = Tag
com/liveperson/messaging/background/filesharing/voice/UploadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.UploadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.UploadFileTaskBundle, Java.Lang.Integer)
  mPreviewContentType = MPreviewContentType
  mUploadFileTaskBundle = MUploadFileTaskBundle
  TAG = Tag
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  createSendMessageCommand(Ljava/lang/String;Ljava/lang/String;)V = CreateSendMessageCommand(string, string)
  getFileByteArray()[B = GetFileByteArray()
com/liveperson/messaging/background/FileSharingManager = Com.Liveperson.Messaging.Background.FileSharingManager
  <init>(Lcom/liveperson/messaging/Messaging;Landroid/content/Context;)V = .ctor(Com.Liveperson.Messaging.Messaging, Android.Content.Context)
  SERVICE_EXTRA_BRAND_ID = ServiceExtraBrandId
  SERVICE_EXTRA_EVENT_ID = ServiceExtraEventId
  SERVICE_EXTRA_FILE_CAPTION = ServiceExtraFileCaption
  SERVICE_EXTRA_FILE_ROW_ID = ServiceExtraFileRowId
  SERVICE_EXTRA_FILE_SHARING_TYPE = ServiceExtraFileSharingType
  SERVICE_EXTRA_FILE_URI = ServiceExtraFileUri
  SERVICE_EXTRA_IMAGE_FROM_CAMERA = ServiceExtraImageFromCamera
  SERVICE_EXTRA_MESSAGE = ServiceExtraMessage
  SERVICE_EXTRA_MESSAGE_ROW_ID = ServiceExtraMessageRowId
  SERVICE_EXTRA_ORIGINAL_MESSAGE_TIME = ServiceExtraOriginalMessageTime
  SERVICE_EXTRA_TARGET_ID = ServiceExtraTargetId
  getInProgressUploadMessageRowIdsString()Ljava/lang/String; = InProgressUploadMessageRowIdsString
  isPendingActions()Z = IsPendingActions
  actionFromService(Landroid/content/Intent;Lcom/liveperson/messaging/background/BackgroundActionsService$ServiceActionCallbackListener;)V = ActionFromService(Android.Content.Intent, Com.Liveperson.Messaging.Background.BackgroundActionsService.IServiceActionCallbackListener)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLcom/liveperson/messaging/background/FileSharingManager$FileDownloadProgressListener;)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long, Com.Liveperson.Messaging.Background.FileSharingManager.IFileDownloadProgressListener)
  removeMultipleOlderFiles(Ljava/lang/String;ILjava/lang/String;)V = RemoveMultipleOlderFiles(string, int, string)
  reUploadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLcom/liveperson/messaging/background/FileSharingManager$FileUploadProgressListener;)V = ReUploadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, long, long, Com.Liveperson.Messaging.Background.FileSharingManager.IFileUploadProgressListener)
  uploadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLcom/liveperson/messaging/background/FileSharingManager$FileUploadProgressListener;)V = UploadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool, Com.Liveperson.Messaging.Background.FileSharingManager.IFileUploadProgressListener)
com/liveperson/messaging/background/ReUploadImageTask = Com.Liveperson.Messaging.Background.ReUploadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.Image.ReUploadImageTaskBundle, Java.Lang.Integer)
com/liveperson/messaging/background/UploadFileTaskCallback = Com.Liveperson.Messaging.Background.IUploadFileTaskCallback
  onFileAddedToDB()V = OnFileAddedToDB()
  onUploadFailed(Lcom/liveperson/messaging/background/filesharing/BaseUploadTask;Ljava/lang/Throwable;)V = OnUploadFailed(Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask, Java.Lang.Throwable)
  onUploadFinishedSuccessfully(Lcom/liveperson/messaging/background/filesharing/BaseUploadTask;)V = OnUploadFinishedSuccessfully(Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask)
com/liveperson/messaging/background/UploadImageTask = Com.Liveperson.Messaging.Background.UploadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.Image.UploadImageTaskBundle, Java.Lang.Integer)
  mBase64 = MBase64
  uploadImageTaskParams = UploadImageTaskParams
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadImageTaskParams()Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle; = UploadImageTaskParams
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  createOriginalImageByteArray(Landroid/graphics/Bitmap;Ljava/lang/String;)V = CreateOriginalImageByteArray(Android.Graphics.Bitmap, string)
  createSendMessageCommand(Ljava/lang/String;Ljava/lang/String;)V = CreateSendMessageCommand(string, string)
  getFileByteArray()[B = GetFileByteArray()
  processOriginalImage(IZ)Landroid/graphics/Bitmap; = ProcessOriginalImage(int, bool)
  processThumbnailImage(IZ)Landroid/graphics/Bitmap; = ProcessThumbnailImage(int, bool)
  saveOriginalImage(Landroid/graphics/Bitmap;)Ljava/lang/String; = SaveOriginalImage(Android.Graphics.Bitmap)
  saveThumbnailImage(Landroid/graphics/Bitmap;)Ljava/lang/String; = SaveThumbnailImage(Android.Graphics.Bitmap)
com/liveperson/messaging/commands/BasicQueryMessagesCommand = Com.Liveperson.Messaging.Commands.BasicQueryMessagesCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  brandID = BrandID
  controller = Controller
  conversationServerId = ConversationServerId
  mResponseCallBack = MResponseCallBack
  targetId = TargetId
  updateUI = UpdateUI
  setResponseCallBack(Lcom/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback;)V = SetResponseCallBack(Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback)
com/liveperson/messaging/commands/ChangeChatStateCommand = Com.Liveperson.Messaging.Commands.ChangeChatStateCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  execute()V = Execute()
com/liveperson/messaging/commands/ChangeConversationTTRCommand = Com.Liveperson.Messaging.Commands.ChangeConversationTTRCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string, Com.Liveperson.Api.Response.Types.TTRType)
  execute()V = Execute()
com/liveperson/messaging/commands/DeliveryStatusUpdateCommand = Com.Liveperson.Messaging.Commands.DeliveryStatusUpdateCommand
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(string, string, string, int)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;)V = .ctor(string, string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = .ctor(string, string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus, Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, System.Collections.Generic.IList<Java.Lang.Integer>)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/GetUnreadMessagesCountCommand = Com.Liveperson.Messaging.Commands.GetUnreadMessagesCountCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/InitAmsSessionCommand = Com.Liveperson.Messaging.Commands.InitAmsSessionCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Infra.ICallback)
  mBrandId = MBrandId
  mCallback = MCallback
  mController = MController
  mTasks = MTasks
  execute()V = Execute()
  initTasks()V = InitTasks()
com/liveperson/messaging/commands/QueryMessagesUMSCommand = Com.Liveperson.Messaging.Commands.QueryMessagesUMSCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, int, bool)
  execute()V = Execute()
com/liveperson/messaging/commands/RegisterPusherCommand = Com.Liveperson.Messaging.Commands.RegisterPusherCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/commands/ReSendImageCommand = Com.Liveperson.Messaging.Commands.ReSendImageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;JJ)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, long, long)
com/liveperson/messaging/commands/ResendMessageCommand = Com.Liveperson.Messaging.Commands.ResendMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/ResendURLMessageCommand = Com.Liveperson.Messaging.Commands.ResendURLMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/ReSendVoiceCommand = Com.Liveperson.Messaging.Commands.ReSendVoiceCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;JJLjava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, long, long, string, string)
  TAG = Tag
com/liveperson/messaging/commands/ResolveConversationCommand = Com.Liveperson.Messaging.Commands.ResolveConversationCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string)
  execute()V = Execute()
  setOfflineMode(Z)V = SetOfflineMode(bool)
com/liveperson/messaging/commands/SendCsatCommand = Com.Liveperson.Messaging.Commands.SendCsatCommand
  <init>(Ljava/lang/String;Ljava/lang/String;II)V = .ctor(string, string, int, int)
  execute()V = Execute()
com/liveperson/messaging/commands/SendFileCommand = Com.Liveperson.Messaging.Commands.SendFileCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  mCallback = MCallback
  mCaption = MCaption
  mMessageRowId = MMessageRowId
  mPreview = MPreview
  getMessageTime()J = MessageTime
  addMessageToDB()V = AddMessageToDB()
  failMessage()V = FailMessage()
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
  setCallback(Lcom/liveperson/messaging/commands/SendFileCommand$SendFileCommandListener;)V = SetCallback(Com.Liveperson.Messaging.Commands.SendFileCommand.ISendFileCommandListener)
  setFileDetails(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetFileDetails(string, string, string)
  setSendViaRest(ZLcom/liveperson/messaging/network/http/RestRequestParams;)V = SetSendViaRest(bool, Com.Liveperson.Messaging.Network.Http.RestRequestParams)
  updateMessageConversationID()V = UpdateMessageConversationID()
com/liveperson/messaging/commands/SendFormSubmissionMessageCommand = Com.Liveperson.Messaging.Commands.SendFormSubmissionMessageCommand
  <init>(Lcom/liveperson/messaging/model/Form;Lcom/liveperson/infra/utils/MaskedMessage;Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Model.Form, Com.Liveperson.Infra.Utils.MaskedMessage, Com.Liveperson.Messaging.Messaging)
com/liveperson/messaging/commands/SendGenerateUploadTokenCommand = Com.Liveperson.Messaging.Commands.SendGenerateUploadTokenCommand
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, string, string, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/commands/SendImageCommand = Com.Liveperson.Messaging.Commands.SendImageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/SendMessageCommand = Com.Liveperson.Messaging.Commands.SendMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  mBrandId = MBrandId
  mConsumerId = MConsumerId
  mController = MController
  mEventId = MEventId
  mMessage = MMessage
  mTargetId = MTargetId
  getEventId()Ljava/lang/String; = EventId
  addMessageToDBAndSend(Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = AddMessageToDBAndSend(string, Com.Liveperson.Infra.Utils.MaskedMessage)
  createMessageRequest(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = CreateMessageRequest(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  createNewChatMessage(Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage; = CreateNewChatMessage(string, Com.Liveperson.Infra.Utils.MaskedMessage)
  createPendingConversation(Ljava/lang/String;)Lcom/liveperson/api/request/BaseAMSSocketRequest; = CreatePendingConversation(string)
  createTempConversationId()Ljava/lang/String; = CreateTempConversationId()
  execute()V = Execute()
  sendMessage(Ljava/lang/String;Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = SendMessage(string, Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
  sendMessage(Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string)
  sendMessageIfConversationOpen()V = SendMessageIfConversationOpen()
com/liveperson/messaging/commands/SendMessageWithURLCommand = Com.Liveperson.Messaging.Commands.SendMessageWithURLCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, string, string, string, string, string)
com/liveperson/messaging/commands/SendSetUserProfileCommand = Com.Liveperson.Messaging.Commands.SendSetUserProfileCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/SendVoiceCommand = Com.Liveperson.Messaging.Commands.SendVoiceCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, string)
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
  setDurationAsCaption(J)V = SetDurationAsCaption(long)
com/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionCallback = Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsAccountConnectionCallback
  onTaskError(Lcom/liveperson/messaging/TaskType;Ljava/lang/Throwable;)V = OnTaskError(Com.Liveperson.Messaging.TaskType, Java.Lang.Object)
  onTaskSuccess()V = OnTaskSuccess()
  setSecondaryTask(Z)V = SetSecondaryTask(bool)
com/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask
  <init>()V = .ctor()
  mCallback = MCallback
  getName()Ljava/lang/String; = Name
  requireSDKinForeground()Z = RequireSDKinForeground()
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setIsSecondaryTask(Z)V = SetIsSecondaryTask(bool)
com/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback = Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback
  onTaskError(Lcom/liveperson/messaging/SocketTaskType;Ljava/lang/Throwable;)V = OnTaskError(Com.Liveperson.Messaging.SocketTaskType, Java.Lang.Object)
  onTaskSuccess()V = OnTaskSuccess()
com/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.BaseAmsSocketConnectionTask
  <init>()V = .ctor()
  mCallback = MCallback
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
com/liveperson/messaging/commands/tasks/CloseConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.CloseConnectionTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/CollectSDKConfigurationDataTask = Com.Liveperson.Messaging.Commands.Tasks.CollectSDKConfigurationDataTask
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  TAG = Tag
  isShouldExecute()Z = IsShouldExecute
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/ConfigurationFetcherTask = Com.Liveperson.Messaging.Commands.Tasks.ConfigurationFetcherTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/CsdsTask = Com.Liveperson.Messaging.Commands.Tasks.CsdsTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/DataBaseTask = Com.Liveperson.Messaging.Commands.Tasks.DataBaseTask
  <init>(Lcom/liveperson/messaging/model/AmsUsers;Lcom/liveperson/messaging/model/AmsConversations;Lcom/liveperson/messaging/model/AmsMessages;)V = .ctor(Com.Liveperson.Messaging.Model.AmsUsers, Com.Liveperson.Messaging.Model.AmsConversations, Com.Liveperson.Messaging.Model.AmsMessages)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/FetchConversationManager = Com.Liveperson.Messaging.Commands.Tasks.FetchConversationManager
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  mConversationUtils = MConversationUtils
  numConversationToUpdateUI = NumConversationToUpdateUI
  usersUpdating = UsersUpdating
  fetchConversation(Lcom/liveperson/messaging/model/Conversation;)V = FetchConversation(Com.Liveperson.Messaging.Model.Conversation)
  fetchConversationsFirstTime(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = FetchConversationsFirstTime(string, System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>, System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>)
  init()V = Init()
  refreshConversation(Lcom/liveperson/messaging/model/Conversation;)V = RefreshConversation(Com.Liveperson.Messaging.Model.Conversation)
com/liveperson/messaging/commands/tasks/GetAgentUserTask = Com.Liveperson.Messaging.Commands.Tasks.GetAgentUserTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/GetClockTask = Com.Liveperson.Messaging.Commands.Tasks.GetClockTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/GetConsumerUserTask = Com.Liveperson.Messaging.Commands.Tasks.GetConsumerUserTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/HandlePendingMessagesTask = Com.Liveperson.Messaging.Commands.Tasks.HandlePendingMessagesTask
  <init>(Lcom/liveperson/messaging/model/AmsMessages;Lcom/liveperson/messaging/model/AmsConversations;Lcom/liveperson/messaging/controller/ConnectionsController;)V = .ctor(Com.Liveperson.Messaging.Model.AmsMessages, Com.Liveperson.Messaging.Model.AmsConversations, Com.Liveperson.Messaging.Controller.ConnectionsController)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/IdpTask = Com.Liveperson.Messaging.Commands.Tasks.IdpTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Model.AmsUsers, string)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/JWTExpirationTask = Com.Liveperson.Messaging.Commands.Tasks.JWTExpirationTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/LptagTask = Com.Liveperson.Messaging.Commands.Tasks.LptagTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/MessagingEventSubscriptionManager = Com.Liveperson.Messaging.Commands.Tasks.MessagingEventSubscriptionManager
  <init>()V = .ctor()
  Companion = Companion
  getERROR_MESSAGE()Ljava/lang/String; = ERROR_MESSAGE
  getMESSAGE_EVENT_COMPLETED()Ljava/lang/String; = MESSAGE_EVENT_COMPLETED
  getSUCCESS()Ljava/lang/String; = SUCCESS
  addSubscription(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;IZ)V = AddSubscription(Com.Liveperson.Messaging.Messaging, string, string, int, bool)
  clearAllSubscriptions()V = ClearAllSubscriptions()
  onReceivedEvent(Ljava/lang/String;)Z = OnReceivedEvent(string)
  shouldUpdateUI(Ljava/lang/String;)Z = ShouldUpdateUI(string)
com/liveperson/messaging/commands/tasks/OpenSocketTask = Com.Liveperson.Messaging.Commands.Tasks.OpenSocketTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/controller/ConnectionsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Controller.ConnectionsController)
  AUTHORIZATION = Authorization
  CLIENT_PROPERTIES = ClientProperties
  JWT = Jwt
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/RefreshNotUpdatedConversationsTask = Com.Liveperson.Messaging.Commands.Tasks.RefreshNotUpdatedConversationsTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/RemoveOlderImagesTask = Com.Liveperson.Messaging.Commands.Tasks.RemoveOlderImagesTask
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/SiteSettingsFetcherTask = Com.Liveperson.Messaging.Commands.Tasks.SiteSettingsFetcherTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  SITE_SETTINGS_AUDIO_SHARING_ID_VALUE = SiteSettingsAudioSharingIdValue
  SITE_SETTINGS_MIN_VERSION_ID_VALUE = SiteSettingsMinVersionIdValue
  SITE_SETTINGS_PHOTO_SHARING_ID_VALUE = SiteSettingsPhotoSharingIdValue
  SITE_SETTINGS_PROPERTY_NAME_ID = SiteSettingsPropertyNameId
  SITE_SETTINGS_PROPERTY_NAME_PROPERTY_VALUE = SiteSettingsPropertyNamePropertyValue
  SITE_SETTINGS_PROPERTY_NAME_VALUE = SiteSettingsPropertyNameValue
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/SubscribeExConversationsTask = Com.Liveperson.Messaging.Commands.Tasks.SubscribeExConversationsTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  execute()V = Execute()
  getSubscribeExConversationsRequest(Ljava/lang/String;JJ)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = GetSubscribeExConversationsRequest(string, long, long)
com/liveperson/messaging/commands/tasks/UnsubscribeExConversationTask = Com.Liveperson.Messaging.Commands.Tasks.UnsubscribeExConversationTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/UnregisterPusherCommand = Com.Liveperson.Messaging.Commands.UnregisterPusherCommand
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Model.AmsUsers, string, string, Com.Liveperson.Infra.ICallback, bool)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/controller/AccountsController = Com.Liveperson.Messaging.Controller.AccountsController
  <init>(Lcom/liveperson/messaging/controller/ClientProperties;)V = .ctor(Com.Liveperson.Messaging.Controller.ClientProperties)
  ALPHA_CSDS_DOMAIN = AlphaCsdsDomain
  DOMAIN_VERSION_QUERY = DomainVersionQuery
  DOMAIN_VERSION_VALUE = DomainVersionValue
  KEY_TOKEN = KeyToken
  mAccounts = MAccounts
  QA_CSDS_DOMAIN = QaCsdsDomain
  SOCKET_URL = SocketUrl
  getClientProperties()Lcom/liveperson/messaging/controller/ClientProperties; = ClientProperties
  addNewAccount(Ljava/lang/String;)V = AddNewAccount(string)
  clear()V = Clear()
  getAccount(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsAccount; = GetAccount(string)
  getCertificatePinningKeys(Ljava/lang/String;)Ljava/util/List; = GetCertificatePinningKeys(string)
  getConnectionParamsCache(Ljava/lang/String;)Lcom/liveperson/messaging/controller/connection/IConnectionParamsCache; = GetConnectionParamsCache(string)
  getConnectionUrl(Ljava/lang/String;)Ljava/lang/String; = GetConnectionUrl(string)
  getConnectionUrlForLogs(Ljava/lang/String;)Ljava/lang/String; = GetConnectionUrlForLogs(string)
  getDomain(Ljava/lang/String;)Ljava/lang/String; = GetDomain(string)
  getLPAuthenticationParams(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = GetLPAuthenticationParams(string)
  getServiceUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetServiceUrl(string, string)
  getToken(Ljava/lang/String;)Ljava/lang/String; = GetToken(string)
  getTokenizerUrl(Ljava/lang/String;)Ljava/lang/String; = GetTokenizerUrl(string)
  isAutoMessagesEnabled(Ljava/lang/String;)Z = IsAutoMessagesEnabled(string)
  isCsdsDataMissing(Ljava/lang/String;)Z = IsCsdsDataMissing(string)
  isTokenExpired(Ljava/lang/String;)Z = IsTokenExpired(string)
  setAppId(Ljava/lang/String;Ljava/lang/String;)V = SetAppId(string, string)
  setCSDSMap(Ljava/lang/String;Ljava/util/HashMap;)Z = SetCSDSMap(string, System.Collections.Generic.IDictionary<string, string>)
  setLPAuthenticationParams(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = SetLPAuthenticationParams(string, Com.Liveperson.Infra.LPAuthenticationParams)
  setToken(Ljava/lang/String;Ljava/lang/String;)V = SetToken(string, string)
com/liveperson/messaging/controller/AmsReadController = Com.Liveperson.Messaging.Controller.AmsReadController
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  TAG = Tag
  registerForegroundConnectionReceiver(Ljava/lang/String;)V = RegisterForegroundConnectionReceiver(string)
  shutDown()V = ShutDown()
com/liveperson/messaging/controller/ClientProperties = Com.Liveperson.Messaging.Controller.ClientProperties
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getJsonString()Ljava/lang/String; = JsonString
  addToUriBuilder(Landroid/net/Uri$Builder;)V = AddToUriBuilder(Android.Net.Uri.Builder)
  clear()V = Clear()
  saveAppId(Ljava/lang/String;)V = SaveAppId(string)
  saveSDKVersion(Ljava/lang/String;)V = SaveSDKVersion(string)
com/liveperson/messaging/controller/connection/BaseConnectionState = Com.Liveperson.Messaging.Controller.Connection.BaseConnectionState
  <init>(Lcom/liveperson/messaging/controller/connection/BaseConnectionState;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.Connection.BaseConnectionState, string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  name = Name
  TAG = Tag
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/BackgroundEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/BackgroundTimeOutEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundTimeOutEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ConnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ConnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/DisconnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.DisconnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ForegroundEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ForegroundEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/NetworkAvailableEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkAvailableEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/NetworkLostEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkLostEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/RunTaskEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.RunTaskEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SecondaryConnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryConnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SecondaryTaskSuccessEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryTaskSuccessEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SendStateEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SendStateEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ServiceOffEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOffEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ServiceOnEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOnEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ShutDownEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ShutDownEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SocketProblemEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SocketProblemEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskFailedEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskFailedEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskSuccessEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskSuccessEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskTimeOutEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskTimeOutEvent)
com/liveperson/messaging/controller/connection/connectionevents/BackgroundEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/BackgroundTimeOutEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundTimeOutEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ConnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ConnectEvent
  <init>()V = .ctor()
  <init>(Z)V = .ctor(bool)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  connectInBG()Z = ConnectInBG()
com/liveperson/messaging/controller/connection/connectionevents/DisconnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.DisconnectEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ForegroundEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ForegroundEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/NetworkAvailableEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkAvailableEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/NetworkLostEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkLostEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/RunTaskEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.RunTaskEvent
  <init>()V = .ctor()
  <init>(II)V = .ctor(int, int)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SecondaryConnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryConnectEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SecondaryTaskSuccessEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryTaskSuccessEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SendStateEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SendStateEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ServiceOffEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOffEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ServiceOnEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOnEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ShutDownEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ShutDownEvent
  <init>(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = .ctor(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  getListener()Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener; = Listener
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SocketProblemEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SocketProblemEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskFailedEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskFailedEvent
  <init>(Ljava/lang/String;Lcom/liveperson/messaging/TaskType;Ljava/lang/Exception;)V = .ctor(string, Com.Liveperson.Messaging.TaskType, Java.Lang.Exception)
  getException()Ljava/lang/Exception; = Exception
  getTaskName()Ljava/lang/String; = TaskName
  getType()Lcom/liveperson/messaging/TaskType; = Type
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskSuccessEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskSuccessEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskTimeOutEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskTimeOutEvent
  <init>(Lcom/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionTask;)V = .ctor(Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  failTask()V = FailTask()
com/liveperson/messaging/controller/connection/ConnectionParamsCache = Com.Liveperson.Messaging.Controller.Connection.ConnectionParamsCache
  <init>(Ljava/lang/String;)V = .ctor(string)
  AC_CDN_VERSION_KEY = AcCdnVersionKey
  AUTO_MESSAGES_ENABLED_KEY = AutoMessagesEnabledKey
  CSDS_AC_CDN_DOMAIN_KEY = CsdsAcCdnDomainKey
  CSDS_AMS_TOKENIZER_DOMAIN_KEY = CsdsAmsTokenizerDomainKey
  CSDS_IDP_DOMAIN_KEY = CsdsIdpDomainKey
  CSDS_INCA_KEY = CsdsIncaKey
  CSDS_LE_CDN_DOMAIN_KEY = CsdsLeCdnDomainKey
  CSDS_LOGGOS_DOMAIN_KEY = CsdsLoggosDomainKey
  CSDS_PUSHER_DOMAIN_KEY = CsdsPusherDomainKey
  CSDS_SWIFT_DOMAIN_KEY = CsdsSwiftDomainKey
  CSDS_UMS_DOMAIN_KEY = CsdsUmsDomainKey
  FULL_CONNECTION_FLOW_REQUIRED_KEY = FullConnectionFlowRequiredKey
  LE_CDN_VERSION_KEY = LeCdnVersionKey
  TAG = Tag
  getAcCdnSdkMinVersion()Ljava/lang/String; = AcCdnSdkMinVersion
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  isFullConnectionFlowRequired()Z = FullConnectionFlowRequired
  setFullConnectionFlowRequired(Z)V = FullConnectionFlowRequired
  isCsdsFilled()Z = IsCsdsFilled
  isVersionsCompatible()Z = IsVersionsCompatible
  getLeCdnSdkMinVersion()Ljava/lang/String; = LeCdnSdkMinVersion
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateAcCdnVersion(Ljava/lang/String;)Z = UpdateAcCdnVersion(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
  updateLeCdnVersion(Ljava/lang/String;)Z = UpdateLeCdnVersion(string)
com/liveperson/messaging/controller/connection/ConnectionStateMachine = Com.Liveperson.Messaging.Controller.Connection.ConnectionStateMachine
  <init>(Lcom/liveperson/messaging/controller/connection/MessagingStateMachineInterface;Lcom/liveperson/messaging/controller/connection/InternetInformationProvider;Lcom/liveperson/infra/ForegroundServiceInterface;Ljava/lang/String;Lcom/liveperson/messaging/controller/connection/IConnectionListener;)V = .ctor(Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface, Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider, Com.Liveperson.Infra.IForegroundServiceInterface, string, Com.Liveperson.Messaging.Controller.Connection.IConnectionListener)
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  moveToBackground(J)V = MoveToBackground(long)
  moveToForeground()V = MoveToForeground()
  networkAvailable()V = NetworkAvailable()
  networkLost()V = NetworkLost()
  onSocketProblem()V = OnSocketProblem()
  serviceStarted()V = ServiceStarted()
  serviceStopped()V = ServiceStopped()
  setConnectingTasks(Ljava/util/List;)V = SetConnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  setDisconnectingTasks(Ljava/util/List;)V = SetDisconnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting(Z)V = StartConnecting(bool)
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/controller/connection/ConnectionStateMachineOld = Com.Liveperson.Messaging.Controller.Connection.ConnectionStateMachineOld
  <init>(Lcom/liveperson/messaging/Messaging;Lcom/liveperson/messaging/controller/connection/InternetInformationProvider;Ljava/lang/String;Lcom/liveperson/messaging/controller/connection/IConnectionListener;)V = .ctor(Com.Liveperson.Messaging.Messaging, Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider, string, Com.Liveperson.Messaging.Controller.Connection.IConnectionListener)
  mConnectingTasks = MConnectingTasks
  mController = MController
  mDisconnectingTasks = MDisconnectingTasks
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setConnectingTasks(Ljava/util/List;)V = SetConnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  setDisconnectingTasks(Ljava/util/List;)V = SetDisconnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting()V = StartConnecting()
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/controller/connection/ConnectionTasksHolder = Com.Liveperson.Messaging.Controller.Connection.ConnectionTasksHolder
  <init>(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;Lcom/liveperson/messaging/controller/connection/MessagingStateMachineInterface;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine, Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface, string)
  constructPrimaryFullConnectionTasks()Ljava/util/List; = ConstructPrimaryFullConnectionTasks()
  constructPrimaryShortConnectionTasks()Ljava/util/List; = ConstructPrimaryShortConnectionTasks()
  constructSecondaryConnectionTasks()Ljava/util/List; = ConstructSecondaryConnectionTasks()
  getDisconnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetDisconnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getPrimaryFullConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetPrimaryFullConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getPrimaryShortConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetPrimaryShortConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getSecondaryConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetSecondaryConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
com/liveperson/messaging/controller/connection/IConnectionListener = Com.Liveperson.Messaging.Controller.Connection.IConnectionListener
  notifyConnected()V = NotifyConnected()
  notifyDisconnected()V = NotifyDisconnected()
  notifyError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = NotifyError(Com.Liveperson.Messaging.TaskType, string)
  notifyStartConnecting()V = NotifyStartConnecting()
  notifyStartDisconnecting()V = NotifyStartDisconnecting()
  notifyTokenExpired()V = NotifyTokenExpired()
  notifyUserExpired()V = NotifyUserExpired()
com/liveperson/messaging/controller/connection/IConnectionParamsCache = Com.Liveperson.Messaging.Controller.Connection.IConnectionParamsCache
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  isFullConnectionFlowRequired()Z = FullConnectionFlowRequired
  setFullConnectionFlowRequired(Z)V = FullConnectionFlowRequired
  isCsdsFilled()Z = IsCsdsFilled
  isVersionsCompatible()Z = IsVersionsCompatible
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateAcCdnVersion(Ljava/lang/String;)Z = UpdateAcCdnVersion(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
  updateLeCdnVersion(Ljava/lang/String;)Z = UpdateLeCdnVersion(string)
com/liveperson/messaging/controller/connection/InternetInformationProvider = Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider
  isNetworkAvailable()Z = IsNetworkAvailable
  registerToNetworkChanges()V = RegisterToNetworkChanges()
  unregisterToNetworkChanges()V = UnregisterToNetworkChanges()
com/liveperson/messaging/controller/connection/MessagingStateMachineInterface = Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface
  getAccountsController()Lcom/liveperson/messaging/controller/AccountsController; = AccountsController
  getAmsConversations()Lcom/liveperson/messaging/model/AmsConversations; = AmsConversations
  getAmsMessages()Lcom/liveperson/messaging/model/AmsMessages; = AmsMessages
  getAmsUsers()Lcom/liveperson/messaging/model/AmsUsers; = AmsUsers
  getConnectionController()Lcom/liveperson/messaging/controller/ConnectionsController; = ConnectionController
  getMessagingController()Lcom/liveperson/messaging/IMessaging; = MessagingController
com/liveperson/messaging/controller/ConnectionsController = Com.Liveperson.Messaging.Controller.ConnectionsController
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  KEY_PREF_LAST_UPDATE_TIME = KeyPrefLastUpdateTime
  mBrandConnection = MBrandConnection
  mConnectionReceiver = MConnectionReceiver
  mController = MController
  mSubscriptionBrand = MSubscriptionBrand
  addNewConnection(Ljava/lang/String;)V = AddNewConnection(string)
  clear()V = Clear()
  connect(Ljava/lang/String;)V = Connect(string)
  connect(Ljava/lang/String;Z)V = Connect(string, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  getBrandIDForSubscription(Ljava/lang/String;)Ljava/lang/String; = GetBrandIDForSubscription(string)
  getClockDiff(Ljava/lang/String;)J = GetClockDiff(string)
  getConnection(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsConnection; = GetConnection(string)
  getLastUpdateTime(Ljava/lang/String;)J = GetLastUpdateTime(string)
  getSubscriptionId(Ljava/lang/String;)Ljava/lang/String; = GetSubscriptionId(string)
  initConnectionReceiver()V = InitConnectionReceiver()
  isConnecting(Ljava/lang/String;)Z = IsConnecting(string)
  isFirstNotificationAfterSubscribe(Ljava/lang/String;)Z = IsFirstNotificationAfterSubscribe(string)
  isLastUpdateTimeExists(Ljava/lang/String;)Z = IsLastUpdateTimeExists(string)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  isSocketReady(Ljava/lang/String;)Z = IsSocketReady(string)
  isUpdated(Ljava/lang/String;)Z = IsUpdated(string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;)V = MoveToForeground(string)
  networkAvailable(Ljava/lang/String;)V = NetworkAvailable(string)
  networkLost(Ljava/lang/String;)V = NetworkLost(string)
  onResumeConnection()V = OnResumeConnection()
  registerSocket(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsConnection$AmsSocketState; = RegisterSocket(string)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setClockDiff(Ljava/lang/String;J)V = SetClockDiff(string, long)
  setFirstNotificationAfterSubscribe(Ljava/lang/String;Z)V = SetFirstNotificationAfterSubscribe(string, bool)
  setLastUpdateTime(Ljava/lang/String;J)V = SetLastUpdateTime(string, long)
  setSubscription(Ljava/lang/String;Ljava/lang/String;)V = SetSubscription(string, string)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  unregisterConnectionReceiver()V = UnregisterConnectionReceiver()
com/liveperson/messaging/ConversationActionFailedReason = Com.Liveperson.Messaging.ConversationActionFailedReason
  CONVERSATION_NOT_ACTIVE = ConversationNotActive
  NO_NETWORK = NoNetwork
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ValueOf(string)
  values()[Lcom/liveperson/messaging/ConversationActionFailedReason; = Values()
com/liveperson/messaging/exception/FileSharingException = Com.Liveperson.Messaging.Exception.FileSharingException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/liveperson/messaging/GeneralMessagingResponseHandler = Com.Liveperson.Messaging.GeneralMessagingResponseHandler
  createInstance(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = CreateInstance(string)
com/liveperson/messaging/IMessaging = Com.Liveperson.Messaging.IMessaging
  isInitialized()Z = IsInitialized
  changeChatState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ChangeChatState(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  checkActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckActiveConversation(string, Com.Liveperson.Infra.ICallback)
  checkAgentID(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckAgentID(string, Com.Liveperson.Infra.ICallback)
  checkConversationIsMarkedAsUrgent(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckConversationIsMarkedAsUrgent(string, Com.Liveperson.Infra.ICallback)
  clearHistory(Ljava/lang/String;)Z = ClearHistory(string)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;Z)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long)
  generateUploadToken(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = GenerateUploadToken(string, string, string)
  getMaskedMessage(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = GetMaskedMessage(string, string)
  getUnreadMessagesCount(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetUnreadMessagesCount(string, string, Com.Liveperson.Infra.ICallback)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  markConversationAsNormal(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsNormal(string, string)
  markConversationAsUrgent(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsUrgent(string, string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = MoveToForeground(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  reconnect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = Reconnect(string, Com.Liveperson.Infra.LPAuthenticationParams)
  registerPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = RegisterPusher(string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  removeCallback()V = RemoveCallback()
  removeMultipleOlderImages(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = RemoveMultipleOlderImages(Android.Content.Context, string, string)
  resendMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resendMessage(Ljava/lang/String;Ljava/lang/String;JLcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resolveConversation(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ResolveConversation(string, string)
  sendCSAT(Ljava/lang/String;Ljava/lang/String;II)V = SendCSAT(string, string, int, int)
  sendFileMessage(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = SendFileMessage(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool)
  sendFormSubmissionMessageCommand(Ljava/lang/String;)V = SendFormSubmissionMessageCommand(string)
  sendMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string, string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string, string, string)
  sendUserProfile(Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = SendUserProfile(string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterPusher(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = UnregisterPusher(string, string, Com.Liveperson.Infra.ICallback, bool)
  updateMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
com/liveperson/messaging/LivePersonEventsProxy = Com.Liveperson.Messaging.LivePersonEventsProxy
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
  removeCallback()V = RemoveCallback()
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
com/liveperson/messaging/Messaging = Com.Liveperson.Messaging.Messaging
  <init>()V = .ctor()
  amsConversations = AmsConversations
  amsFiles = AmsFiles
  amsMessages = AmsMessages
  amsReadController = AmsReadController
  amsUsers = AmsUsers
  FORM_TITLE = FormTitle
  INVITATION_ID = InvitationId
  mAccountsController = MAccountsController
  mConnectionController = MConnectionController
  mEventsProxy = MEventsProxy
  NO_FILE_ROW_ID = NoFileRowId
  SUBMISSION_ID = SubmissionId
  getAudioUtils()Lcom/liveperson/infra/utils/LPAudioUtils; = AudioUtils
  getConversationViewParams()Lcom/liveperson/infra/ConversationViewParams; = ConversationViewParams
  setConversationViewParams(Lcom/liveperson/infra/ConversationViewParams;)V = ConversationViewParams
  getFileSharingManager()Lcom/liveperson/messaging/background/FileSharingManager; = FileSharingManager
  getImageForegroundServiceDownloadNotificationBuilder()Landroid/app/Notification$Builder; = ImageForegroundServiceDownloadNotificationBuilder
  setImageForegroundServiceDownloadNotificationBuilder(Landroid/app/Notification$Builder;)V = ImageForegroundServiceDownloadNotificationBuilder
  getImageForegroundServiceUploadNotificationBuilder()Landroid/app/Notification$Builder; = ImageForegroundServiceUploadNotificationBuilder
  setImageForegroundServiceUploadNotificationBuilder(Landroid/app/Notification$Builder;)V = ImageForegroundServiceUploadNotificationBuilder
  getImageServicePendingIntent()Landroid/app/PendingIntent; = ImageServicePendingIntent
  setImageServicePendingIntent(Landroid/app/PendingIntent;)V = ImageServicePendingIntent
  getInProgressUploadMessageRowIdsString()Ljava/lang/String; = InProgressUploadMessageRowIdsString
  isEnableStructuredContent()Z = IsEnableStructuredContent
  isInitialized()Z = IsInitialized
  getMessagingEventSubscriptionManager()Lcom/liveperson/messaging/commands/tasks/MessagingEventSubscriptionManager; = MessagingEventSubscriptionManager
  bootstrapRegistration()V = BootstrapRegistration()
  changeChatState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ChangeChatState(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  checkActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckActiveConversation(string, Com.Liveperson.Infra.ICallback)
  checkAgentID(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckAgentID(string, Com.Liveperson.Infra.ICallback)
  checkConversationIsMarkedAsUrgent(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckConversationIsMarkedAsUrgent(string, Com.Liveperson.Infra.ICallback)
  clear()V = Clear()
  clearHistory(Ljava/lang/String;)Z = ClearHistory(string)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;Z)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long)
  generateUploadToken(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = GenerateUploadToken(string, string, string)
  getActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetActiveConversation(string, Com.Liveperson.Infra.ICallback)
  getMaskedMessage(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = GetMaskedMessage(string, string)
  getOriginatorId(Ljava/lang/String;)Ljava/lang/String; = GetOriginatorId(string)
  getUnreadMessagesCount(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetUnreadMessagesCount(string, string, Com.Liveperson.Infra.ICallback)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  initBrand(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = InitBrand(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  isConversationClosed(Ljava/lang/String;)Z = IsConversationClosed(string)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  markConversationAsNormal(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsNormal(string, string)
  markConversationAsUrgent(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsUrgent(string, string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = MoveToForeground(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/MessagingUserProfile;Z)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.MessagingUserProfile, bool)
  onMessageTimeout(Ljava/lang/String;)V = OnMessageTimeout(string)
  reconnect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = Reconnect(string, Com.Liveperson.Infra.LPAuthenticationParams)
  registerPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = RegisterPusher(string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  removeCallback()V = RemoveCallback()
  removeMultipleOlderImages(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = RemoveMultipleOlderImages(Android.Content.Context, string, string)
  resendMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resendMessage(Ljava/lang/String;Ljava/lang/String;JLcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resolveConversation(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ResolveConversation(string, string)
  sendCSAT(Ljava/lang/String;Ljava/lang/String;II)V = SendCSAT(string, string, int, int)
  sendDeliveryStatusUpdateCommand(Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = SendDeliveryStatusUpdateCommand(string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus, Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
  sendFileMessage(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = SendFileMessage(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool)
  sendFormSubmissionMessageCommand(Ljava/lang/String;)V = SendFormSubmissionMessageCommand(string)
  sendMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string, string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string, string, string)
  sendUserProfile(Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = SendUserProfile(string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterPusher(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = UnregisterPusher(string, string, Com.Liveperson.Infra.ICallback, bool)
  updateMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
com/liveperson/messaging/MessagingFactory = Com.Liveperson.Messaging.MessagingFactory
  <init>()V = .ctor()
  instance = Instance
  messagingController = MessagingController
  getController()Lcom/liveperson/messaging/Messaging; = Controller
  getInstance()Lcom/liveperson/messaging/MessagingFactory; = Instance
  isInitialized()Z = IsInitialized
  bootstrapRegistration()V = BootstrapRegistration()
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
com/liveperson/messaging/MessagingInitData = Com.Liveperson.Messaging.MessagingInitData
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  getAppId()Ljava/lang/String; = AppId
  getBrandId()Ljava/lang/String; = BrandId
com/liveperson/messaging/model/AcUserData = Com.Liveperson.Messaging.Model.AcUserData
  <init>(Ljava/lang/String;)V = .ctor(string)
  getEmail()Ljava/lang/String; = Email
  getEmployeeId()Ljava/lang/String; = EmployeeId
  getFirstName()Ljava/lang/String; = FirstName
  getFullName()Ljava/lang/String; = FullName
  getLastName()Ljava/lang/String; = LastName
  getNickName()Ljava/lang/String; = NickName
  getPictureUrl()Ljava/lang/String; = PictureUrl
com/liveperson/messaging/model/AgentData = Com.Liveperson.Messaging.Model.AgentData
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  mAvatarURL = MAvatarURL
  mEmployeeId = MEmployeeId
  mFirstName = MFirstName
  mLastName = MLastName
  mNickName = MNickName
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/messaging/model/AmsAccount = Com.Liveperson.Messaging.Model.AmsAccount
  <init>(Ljava/lang/String;)V = .ctor(string)
  BROADCAST_KEY_AUTH_COMPLETED_ACTION = BroadcastKeyAuthCompletedAction
  KEY_ACCOUNT_NON_AUTH_ENC = KeyAccountNonAuthEnc
  KEY_ACCOUNT_TOKEN = KeyAccountToken
  KEY_ACCOUNT_TOKEN_ENC = KeyAccountTokenEnc
  KEY_CONNECTOR_ID_ENC = KeyConnectorIdEnc
  KEY_CONSUMER_ID_ENC = KeyConsumerIdEnc
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getConnectionParamsCache()Lcom/liveperson/messaging/controller/connection/IConnectionParamsCache; = ConnectionParamsCache
  getConnectorId()Ljava/lang/String; = ConnectorId
  setConnectorId(Ljava/lang/String;)V = ConnectorId
  getDomain()Ljava/lang/String; = Domain
  isAuthenticated()Z = IsAuthenticated
  isAuthenticatedCompleted()Z = IsAuthenticatedCompleted
  isAutoMessagesEnabled()Z = IsAutoMessagesEnabled
  isCsdsDataMissing()Z = IsCsdsDataMissing
  isHostAppJWTExpired()Z = IsHostAppJWTExpired
  isTokenExpired()Z = IsTokenExpired
  getLPAuthenticationParams()Lcom/liveperson/infra/LPAuthenticationParams; = LPAuthenticationParams
  setLPAuthenticationParams(Lcom/liveperson/infra/LPAuthenticationParams;)V = LPAuthenticationParams
  getNonAuthCode()Ljava/lang/String; = NonAuthCode
  setNonAuthCode(Ljava/lang/String;)V = NonAuthCode
  getOriginalConsumerId()Ljava/lang/String; = OriginalConsumerId
  setOriginalConsumerId(Ljava/lang/String;)V = OriginalConsumerId
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
  getServiceUrl(Ljava/lang/String;)Ljava/lang/String; = GetServiceUrl(string)
  sendAuthenticationCompletedStatus()V = SendAuthenticationCompletedStatus()
  setCSDSMap(Ljava/util/HashMap;)Z = SetCSDSMap(System.Collections.Generic.IDictionary<string, string>)
com/liveperson/messaging/model/AmsConnection = Com.Liveperson.Messaging.Model.AmsConnection
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string)
  BROADCAST_AMS_CONNECTION_UPDATE_ACTION = BroadcastAmsConnectionUpdateAction
  BROADCAST_AMS_CONNECTION_UPDATE_EXTRA = BroadcastAmsConnectionUpdateExtra
  BROADCAST_CONNECTING_TO_SERVER_ERROR = BroadcastConnectingToServerError
  BROADCAST_KEY_BRAND_ID = BroadcastKeyBrandId
  BROADCAST_KEY_SOCKET_READY_ACTION = BroadcastKeySocketReadyAction
  BROADCAST_KEY_SOCKET_READY_EXTRA = BroadcastKeySocketReadyExtra
  BROADCAST_SOCKET_OPEN_ACTION = BroadcastSocketOpenAction
  BROADCAST_START_CONNECTING = BroadcastStartConnecting
  LOGIN_FLOW_TAG = LoginFlowTag
  mBrandId = MBrandId
  mClockDiff = MClockDiff
  mController = MController
  mLastUpdateTime = MLastUpdateTime
  mPreferenceManager = MPreferenceManager
  mSocketState = MSocketState
  mStateMachine = MStateMachine
  TAG = Tag
  isAgentDetailsUpdated()Z = AgentDetailsUpdated
  setAgentDetailsUpdated(Z)V = AgentDetailsUpdated
  getClockDiff()J = ClockDiff
  isFirstNotificationAfterSubscribe()Z = FirstNotificationAfterSubscribe
  setFirstNotificationAfterSubscribe(Z)V = FirstNotificationAfterSubscribe
  isConnecting()Z = IsConnecting
  isLastUpdateTimeExists()Z = IsLastUpdateTimeExists
  isSocketOpen()Z = IsSocketOpen
  isUpdated()Z = IsUpdated
  setIsUpdated(Z)V = IsUpdated
  getLastUpdateTime()J = LastUpdateTime
  isSocketReady()Z = SocketReady
  setSocketReady(Z)V = SocketReady
  getUpdates()V = GetUpdates()
  init()V = Init()
  moveToBackground(J)V = MoveToBackground(long)
  moveToForeground()V = MoveToForeground()
  networkAvailable()V = NetworkAvailable()
  networkLost()V = NetworkLost()
  onSocketProblem()V = OnSocketProblem()
  registerSocket()Lcom/liveperson/messaging/model/AmsConnection$AmsSocketState; = RegisterSocket()
  serviceStarted()V = ServiceStarted()
  serviceStopped()V = ServiceStopped()
  setClock(J)V = SetClock(long)
  setLastUpdateTime(J)Z = SetLastUpdateTime(long)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting(Z)V = StartConnecting(bool)
  startDisconnecting()V = StartDisconnecting()
  unregisterSocketListener()V = UnregisterSocketListener()
com/liveperson/messaging/model/AmsConnectionAnalytics = Com.Liveperson.Messaging.Model.AmsConnectionAnalytics
  <init>()V = .ctor()
  TAG = Tag
  closeConnectionTaskEnd()V = CloseConnectionTaskEnd()
  closeConnectionTaskStart()V = CloseConnectionTaskStart()
  collectSDKConfigurationDataTaskEnd()V = CollectSDKConfigurationDataTaskEnd()
  collectSDKConfigurationDataTaskStart()V = CollectSDKConfigurationDataTaskStart()
  configurationFetcherTaskEnd()V = ConfigurationFetcherTaskEnd()
  configurationFetcherTaskStart()V = ConfigurationFetcherTaskStart()
  connected()V = Connected()
  csdsTaskEnd()V = CsdsTaskEnd()
  csdsTaskStart()V = CsdsTaskStart()
  databaseTaskEnd()V = DatabaseTaskEnd()
  databaseTaskStart()V = DatabaseTaskStart()
  idpTaskEnd()V = IdpTaskEnd()
  idpTaskStart()V = IdpTaskStart()
  lptagTaskEnd()V = LptagTaskEnd()
  lptagTaskStart()V = LptagTaskStart()
  openSocketTaskEnd()V = OpenSocketTaskEnd()
  openSocketTaskStart()V = OpenSocketTaskStart()
  removeOlderImagesTaskEnd()V = RemoveOlderImagesTaskEnd()
  removeOlderImagesTaskStart()V = RemoveOlderImagesTaskStart()
  siteSettingsFetcherTaskEnd()V = SiteSettingsFetcherTaskEnd()
  siteSettingsFetcherTaskStart()V = SiteSettingsFetcherTaskStart()
  socketReady()V = SocketReady()
  startConnecting()V = StartConnecting()
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/model/AmsConversations = Com.Liveperson.Messaging.Model.AmsConversations
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  acceptedSequenceEvents = AcceptedSequenceEvents
  BROADCAST_UPDATE_CONVERSATION = BroadcastUpdateConversation
  BROADCAST_UPDATE_CONVERSATION_CLOSED = BroadcastUpdateConversationClosed
  BROADCAST_UPDATE_CONVERSATION_OFF_HOURS = BroadcastUpdateConversationOffHours
  BROADCAST_UPDATE_CONVERSATIONS_LIST = BroadcastUpdateConversationsList
  BROADCAST_UPDATE_CONVERSATION_TTR = BroadcastUpdateConversationTtr
  BROADCAST_UPDATE_CSAT_CONVERSATION = BroadcastUpdateCsatConversation
  BROADCAST_UPDATE_FORM_URL = BroadcastUpdateFormUrl
  BROADCAST_UPDATE_NEW_CONVERSATION_MSG = BroadcastUpdateNewConversationMsg
  BROADCAST_UPDATE_UNREAD_MSG = BroadcastUpdateUnreadMsg
  DELAY_TILL_WHEN = DelayTillWhen
  DELAY_TILL_WHEN_CHANGED = DelayTillWhenChanged
  KEY_CONVERSATION_ASSIGNED_AGENT = KeyConversationAssignedAgent
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_CONVERSATION_SHOWED_CSAT = KeyConversationShowedCsat
  KEY_CONVERSATION_STATE = KeyConversationState
  KEY_CONVERSATION_TARGET_ID = KeyConversationTargetId
  KEY_CONVERSATION_TTR_TIME = KeyConversationTtrTime
  KEY_WELCOME_CONVERSATION_ID = KeyWelcomeConversationId
  mController = MController
  mConversationsByAccountId = MConversationsByAccountId
  mConversationsByServerId = MConversationsByServerId
  getFetchConversationManager()Lcom/liveperson/messaging/commands/tasks/FetchConversationManager; = FetchConversationManager
  addConversationToMaps(Ljava/lang/String;Lcom/liveperson/messaging/model/Conversation;)V = AddConversationToMaps(string, Com.Liveperson.Messaging.Model.Conversation)
  addUpdateRequestInProgress(Ljava/lang/String;)V = AddUpdateRequestInProgress(string)
  calculateEffectiveTTR(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJJ)J = CalculateEffectiveTTR(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long, long)
  clear()V = Clear()
  clearConversations(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = ClearConversations(string)
  createDummyConversationForFirstMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = CreateDummyConversationForFirstMessage(string, string, string, long, long)
  createIdleConversation(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = CreateIdleConversation(string, string, string, long)
  createNewCurrentConversation(Lcom/liveperson/messaging/model/ConversationData;)Lcom/liveperson/messaging/model/Conversation; = CreateNewCurrentConversation(Com.Liveperson.Messaging.Model.ConversationData)
  createPendingConversation(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = CreatePendingConversation(string, string, string, long)
  deleteTempConversationServerID(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = DeleteTempConversationServerID(string)
  fetchPreviousConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = FetchPreviousConversation(string)
  getActiveConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetActiveConversation(string)
  getConversation(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversation(string)
  getConversationById(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConversationById(string, string)
  getConversationByServerIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConversationByServerIDFromDB(string)
  getConversationFromBrandIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromBrandIdMap(string)
  getConversationFromServerIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromServerIdMap(string)
  getConversationFromTargetIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromTargetIdMap(string)
  getNewestClosedConversation(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetNewestClosedConversation(string)
  getNotUpdatedConversations(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetNotUpdatedConversations(string)
  isConversationActive(Ljava/lang/String;)Z = IsConversationActive(string)
  isMoreConversationAvailableToLoad(Ljava/lang/String;)Z = IsMoreConversationAvailableToLoad(string)
  loadConversationForBrand(Ljava/lang/String;)V = LoadConversationForBrand(string)
  markAllPendingConversationsAsFailed(Ljava/lang/String;)V = MarkAllPendingConversationsAsFailed(string)
  notifyClosedConversationFromDB(Ljava/lang/String;)V = NotifyClosedConversationFromDB(string)
  notifyOffHoursStatus(Ljava/lang/String;)V = NotifyOffHoursStatus(string)
  removeUpdateRequestInProgress(Ljava/lang/String;)V = RemoveUpdateRequestInProgress(string)
  resetEffectiveTTR(Ljava/lang/String;)V = ResetEffectiveTTR(string)
  saveMessagesResult(Ljava/lang/String;Ljava/util/ArrayList;ZZLcom/liveperson/infra/ICallback;)V = SaveMessagesResult(string, System.Collections.Generic.IList<Com.Liveperson.Api.Response.Events.ContentEventNotification>, bool, bool, Com.Liveperson.Infra.ICallback)
  sendConversationClosedIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendConversationClosedIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateCSATConversationIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateCSATConversationIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateNewConversationIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateNewConversationIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateStateIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateStateIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateUnreadMsgIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateUnreadMsgIntent(Com.Liveperson.Messaging.Model.Conversation)
  setUpdateRequestInProgress(Ljava/lang/String;I)V = SetUpdateRequestInProgress(string, int)
  showTTR(Ljava/lang/String;)V = ShowTTR(string)
  shutDown()V = ShutDown()
  updateClosedConversation(Lcom/liveperson/messaging/model/ConversationData;Z)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateClosedConversation(Com.Liveperson.Messaging.Model.ConversationData, bool)
  updateConversationState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/ConversationState;)V = UpdateConversationState(string, string, Com.Liveperson.Api.Response.Types.ConversationState)
  updateCSAT(Ljava/lang/String;Ljava/lang/String;)V = UpdateCSAT(string, string)
  updateCurrentConversation(Lcom/liveperson/messaging/model/ConversationData;)V = UpdateCurrentConversation(Com.Liveperson.Messaging.Model.ConversationData)
  updateCurrentConversationServerID(Ljava/lang/String;Lcom/liveperson/messaging/model/ConversationData;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateCurrentConversationServerID(string, Com.Liveperson.Messaging.Model.ConversationData)
  updateLastServerSequenceByBrandId(Ljava/lang/String;I)V = UpdateLastServerSequenceByBrandId(string, int)
  updateLastServerSequenceByConvId(Ljava/lang/String;I)V = UpdateLastServerSequenceByConvId(string, int)
  updateLastServerSequenceByConvId(Ljava/lang/String;IIZ)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateLastServerSequenceByConvId(string, int, int, bool)
  updateTTRType(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJ)V = UpdateTTRType(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long)
com/liveperson/messaging/model/AmsFiles = Com.Liveperson.Messaging.Model.AmsFiles
  <init>()V = .ctor()
  addFile(JLcom/liveperson/messaging/model/FileMessage;)Lcom/liveperson/infra/database/DataBaseCommand; = AddFile(long, Com.Liveperson.Messaging.Model.FileMessage)
  getFileByFileRowId(J)Lcom/liveperson/infra/database/DataBaseCommand; = GetFileByFileRowId(long)
  getFileByFileRowIdOnDbThread(J)Lcom/liveperson/messaging/model/FileMessage; = GetFileByFileRowIdOnDbThread(long)
  getFileByMessageRowId(J)Lcom/liveperson/messaging/model/FileMessage; = GetFileByMessageRowId(long)
  getMultipleOldestLocalPathFromDB(Ljava/lang/String;ILjava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetMultipleOldestLocalPathFromDB(string, int, string)
  getNumOfLocalPathFromDB(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetNumOfLocalPathFromDB(string, string)
  removeLocalPathFromDB(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = RemoveLocalPathFromDB(string, string)
  updateLocalPath(JLjava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateLocalPath(long, string)
  updateRelativePath(Ljava/lang/Long;Ljava/lang/String;)V = UpdateRelativePath(Java.Lang.Long, string)
  updateStatus(JLcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = UpdateStatus(long, Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
com/liveperson/messaging/model/AmsMessages = Com.Liveperson.Messaging.Model.AmsMessages
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  MASKED_CC_MSG_SEQUENCE_NUMBER = MaskedCcMsgSequenceNumber
  mFormsManager = MFormsManager
  mMessageTimeoutQueue = MMessageTimeoutQueue
  PENDING_MSG_SEQUENCE_NUMBER = PendingMsgSequenceNumber
  RESOLVE_MSG_SEQUENCE_NUMBER = ResolveMsgSequenceNumber
  STRUCTURED_CONTENT_PREFIX = StructuredContentPrefix
  WELCOME_MSG_SEQUENCE_NUMBER = WelcomeMsgSequenceNumber
  hasListener()Z = HasListener
  getMessages()Landroid/database/Cursor; = Messages
  getTimeOfFirstMessage()Lcom/liveperson/infra/database/DataBaseCommand; = TimeOfFirstMessage
  addMessage(Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage;Z)Lcom/liveperson/infra/database/DataBaseCommand; = AddMessage(string, Com.Liveperson.Messaging.Model.MessagingChatMessage, bool)
  addMultipleMessages(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JZZ)Lcom/liveperson/infra/database/DataBaseCommand; = AddMultipleMessages(System.Collections.Generic.IList<Com.Liveperson.Api.Response.Events.ContentEventNotification>, string, string, string, string, long, bool, bool)
  addOnUpdateListener(Lcom/liveperson/messaging/model/AmsMessages$MessagesListener;Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;)V = AddOnUpdateListener(Com.Liveperson.Messaging.Model.AmsMessages.IMessagesListener, Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string)
  clear()V = Clear()
  clearAllClosedConversationMessages(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = ClearAllClosedConversationMessages(string)
  getMessageByEventId(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetMessageByEventId(string)
  getMyUserId(Ljava/lang/String;)Ljava/lang/String; = GetMyUserId(string)
  getQuickRepliesMessageHolder(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = GetQuickRepliesMessageHolder(string)
  getRowIdByEventId(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetRowIdByEventId(string)
  getSequencesForConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetSequencesForConversation(string)
  isFirstMessageExists()Lcom/liveperson/infra/database/DataBaseCommand; = IsFirstMessageExists()
  loadMessages(Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;IJJ)Lcom/liveperson/infra/database/DataBaseCommand; = LoadMessages(Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string, int, long, long)
  loadMessagingUserProfile(Ljava/lang/String;)Lcom/liveperson/messaging/model/MessagingUserProfile; = LoadMessagingUserProfile(string)
  refreshCursor(Ljava/lang/String;)V = RefreshCursor(string)
  removeOnUpdateListener()V = RemoveOnUpdateListener()
  resendAllPendingMessages(Ljava/lang/String;)V = ResendAllPendingMessages(string)
  resetQuickRepliesMessageHolder()V = ResetQuickRepliesMessageHolder()
  searchMessages(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = SearchMessages(string)
  sendReadAckOnMessages(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendReadAckOnMessages(string, string, string)
  setDeliveryStatusUpdateCommand(Lcom/liveperson/messaging/model/Form;Lcom/liveperson/api/response/types/DeliveryStatus;)V = SetDeliveryStatusUpdateCommand(Com.Liveperson.Messaging.Model.Form, Com.Liveperson.Api.Response.Types.DeliveryStatus)
  shutDown()V = ShutDown()
  updateAgentDetailsUpdated(Ljava/lang/String;Ljava/lang/String;)V = UpdateAgentDetailsUpdated(string, string)
  updateAllMessagesStateByConversationID(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateAllMessagesStateByConversationID(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateFetchHistoryEnded(Ljava/lang/String;)V = UpdateFetchHistoryEnded(string)
  updateFetchHistoryEnded(Ljava/lang/String;Z)V = UpdateFetchHistoryEnded(string, bool)
  updateFileMessageByRowId(JJ)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateFileMessageByRowId(long, long)
  updateHandledExConversation(Ljava/lang/String;Z)V = UpdateHandledExConversation(string, bool)
  updateMessageConversationServerIdAndTime(JLjava/lang/String;J)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessageConversationServerIdAndTime(long, string, long)
  updateMessageFileChanged(Ljava/lang/String;J)V = UpdateMessageFileChanged(string, long)
  updateMessageOnRetry(Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessageOnRetry(string, Com.Liveperson.Messaging.Model.MessagingChatMessage)
  updateMessageReceivedState(Ljava/lang/String;Ljava/lang/String;[ILcom/liveperson/api/response/types/DeliveryStatus;)V = UpdateMessageReceivedState(string, string, int[], Com.Liveperson.Api.Response.Types.DeliveryStatus)
  updateMessagesConversationServerID(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessagesConversationServerID(string, string)
  updateMessagesState(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessagesState(System.Collections.Generic.IList<string>, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateMessageState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessageState(string, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateMessageState(JLcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessageState(long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateOnCommand(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateOnCommand(string, string)
  updateOnMessageAck(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = UpdateOnMessageAck(string, string, string, long)
com/liveperson/messaging/model/AmsMessagesLoaderProvider = Com.Liveperson.Messaging.Model.IAmsMessagesLoaderProvider
  hasListener()Z = HasListener
  addOnUpdateListener(Lcom/liveperson/messaging/model/AmsMessages$MessagesListener;Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;)V = AddOnUpdateListener(Com.Liveperson.Messaging.Model.AmsMessages.IMessagesListener, Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string)
  getMyUserId(Ljava/lang/String;)Ljava/lang/String; = GetMyUserId(string)
  getQuickRepliesMessageHolder(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = GetQuickRepliesMessageHolder(string)
  loadMessages(Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;IJJ)Lcom/liveperson/infra/database/DataBaseCommand; = LoadMessages(Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string, int, long, long)
  loadMessagingUserProfile(Ljava/lang/String;)Lcom/liveperson/messaging/model/MessagingUserProfile; = LoadMessagingUserProfile(string)
  removeOnUpdateListener()V = RemoveOnUpdateListener()
  resetQuickRepliesMessageHolder()V = ResetQuickRepliesMessageHolder()
com/liveperson/messaging/model/AmsUsers = Com.Liveperson.Messaging.Model.AmsUsers
  <init>()V = .ctor()
  BRAND_ID_EXTRA = BrandIdExtra
  BROADCAST_AGENT_CHANGED = BroadcastAgentChanged
  BROADCAST_CONSUMER_CHANGED = BroadcastConsumerChanged
  BROADCAST_CONSUMER_ID_ACTION = BroadcastConsumerIdAction
  EXTRA_KEY_AGENT_FULL_NAME = ExtraKeyAgentFullName
  EXTRA_KEY_AGENT_NICKNAME = ExtraKeyAgentNickname
  EXTRA_KEY_AGENT_SERVER_ID = ExtraKeyAgentServerId
  EXTRA_KEY_FULL_NAME = ExtraKeyFullName
  EXTRA_KEY_ID = ExtraKeyId
  clear()V = Clear()
  clearConsumerFromDB(Ljava/lang/String;)V = ClearConsumerFromDB(string)
  getConsumerByBrandIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConsumerByBrandIDFromDB(string)
  getConsumerId(Ljava/lang/String;)Ljava/lang/String; = GetConsumerId(string)
  getProfileFromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/MessagingUserProfile; = GetProfileFromCursor(Android.Database.ICursor)
  getProjection()[Ljava/lang/String; = GetProjection()
  getUserByBrandIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetUserByBrandIDFromDB(string)
  getUserById(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetUserById(string)
  loadConsumerForBrand(Ljava/lang/String;)V = LoadConsumerForBrand(string)
  loadProfile(Ljava/lang/String;)V = LoadProfile(string)
  updateConsumerId(Ljava/lang/String;Ljava/lang/String;)V = UpdateConsumerId(string, string)
  updateUserProfile(Lcom/liveperson/messaging/model/MessagingUserProfile;)V = UpdateUserProfile(Com.Liveperson.Messaging.Model.MessagingUserProfile)
com/liveperson/messaging/model/Conversation = Com.Liveperson.Messaging.Model.Conversation
  <init>(Landroid/database/Cursor;)V = .ctor(Android.Database.ICursor)
  <init>(Lcom/liveperson/messaging/model/ConversationData;)V = .ctor(Com.Liveperson.Messaging.Model.ConversationData)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getAssignedAgentServerId()Ljava/lang/String; = AssignedAgentServerId
  getBrandId()Ljava/lang/String; = BrandId
  getCloseReason()Lcom/liveperson/api/response/types/CloseReason; = CloseReason
  setCloseReason(Lcom/liveperson/api/response/types/CloseReason;)V = CloseReason
  getCloseTime()J = CloseTime
  setCloseTime(J)V = CloseTime
  getConversationServerId()Ljava/lang/String; = ConversationServerId
  getConversationTTRType()Lcom/liveperson/api/response/types/TTRType; = ConversationTTRType
  isConversationOpen()Z = IsConversationOpen
  getLastServerSequence()I = LastServerSequence
  getPendingData()Lcom/liveperson/messaging/model/PendingConversationData; = PendingData
  getRequestId()J = RequestId
  getStartTs()J = StartTs
  setStartTs(J)V = StartTs
  getState()Lcom/liveperson/api/response/types/ConversationState; = State
  getTargetId()Ljava/lang/String; = TargetId
  getTTRManager()Lcom/liveperson/messaging/model/TTRManager; = TTRManager
  getUnreadMessages()I = UnreadMessages
  setUnreadMessages(I)V = UnreadMessages
  getUpdateInProgress()I = UpdateInProgress
  setUpdateInProgress(I)V = UpdateInProgress
  isShowedCSAT()Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS; = IsShowedCSAT()
  setAssignedAgentServerId(Ljava/lang/String;)V = SetAssignedAgentServerId(string)
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setConversationTTRType(Lcom/liveperson/api/response/types/TTRType;)V = SetConversationTTRType(Com.Liveperson.Api.Response.Types.TTRType)
  setLastServerSequence(I)V = SetLastServerSequence(int)
  setRequestId(J)V = SetRequestId(long)
  setServerId(Ljava/lang/String;)V = SetServerId(string)
  setShowedCSAT(Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS;)V = SetShowedCSAT(Com.Liveperson.Api.Response.Types.CSAT.CSAT_SHOW_STATUS)
  setState(Lcom/liveperson/api/response/types/ConversationState;)V = SetState(Com.Liveperson.Api.Response.Types.ConversationState)
com/liveperson/messaging/model/ConversationData = Com.Liveperson.Messaging.Model.ConversationData
  <init>()V = .ctor()
  <init>(Lcom/liveperson/api/response/model/ConversationINCADetails;Ljava/lang/String;)V = .ctor(Com.Liveperson.Api.Response.Model.ConversationINCADetails, string)
  <init>(Lcom/liveperson/api/response/types/ConversationState;Lcom/liveperson/api/response/model/Result;Ljava/lang/String;)V = .ctor(Com.Liveperson.Api.Response.Types.ConversationState, Com.Liveperson.Api.Response.Model.Result, string)
  <init>(Ljava/lang/String;Lcom/liveperson/messaging/model/Conversation;)V = .ctor(string, Com.Liveperson.Messaging.Model.Conversation)
  allAgents = AllAgents
  assignedAgentServerId = AssignedAgentServerId
  brandId = BrandId
  closeReason = CloseReason
  consumerId = ConsumerId
  conversationId = ConversationId
  conversationTTRType = ConversationTTRType
  csat = Csat
  delayTillWhen = DelayTillWhen
  delayType = DelayType
  endTs = EndTs
  manualTTR = ManualTTR
  participants = Participants
  requestId = RequestId
  source = Source
  startTs = StartTs
  state = State
  targetId = TargetId
  ttrValue = TtrValue
  unreadMessages = UnreadMessages
  compareTo(Ljava/lang/Object;)I = CompareTo(Java.Lang.Object)
  getAllAgentParticipants(Lcom/liveperson/api/response/model/Participants;)[Ljava/lang/String; = GetAllAgentParticipants(Com.Liveperson.Api.Response.Model.Participants)
  getAssignedAgentId(Lcom/liveperson/api/response/model/Participants;)Ljava/lang/String; = GetAssignedAgentId(Com.Liveperson.Api.Response.Model.Participants)
com/liveperson/messaging/model/ConversationUtils = Com.Liveperson.Messaging.Model.ConversationUtils
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  addFirstMessage(Ljava/lang/String;Ljava/lang/String;)V = AddFirstMessage(string, string)
  addResolvedMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/CloseReason;JZLcom/liveperson/infra/ICallback;)V = AddResolvedMessage(string, string, string, Com.Liveperson.Api.Response.Types.CloseReason, long, bool, Com.Liveperson.Infra.ICallback)
  calculateEffectiveTTR(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJ)J = CalculateEffectiveTTR(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long)
  getResolveTextMessage(Ljava/lang/String;JLjava/lang/String;)Ljava/lang/String; = GetResolveTextMessage(string, long, string)
  showTTR(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;)V = ShowTTR(Com.Liveperson.Messaging.Messaging, string)
  updateParticipants(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;Ljava/lang/String;ZZ)V = UpdateParticipants(string, string, string[], Com.Liveperson.Api.Response.Model.UserProfile.UserType, string, bool, bool)
  updateParticipants(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;Ljava/lang/String;ZZLcom/liveperson/infra/ICallback;)V = UpdateParticipants(string, string, string[], Com.Liveperson.Api.Response.Model.UserProfile.UserType, string, bool, bool, Com.Liveperson.Infra.ICallback)
  updateTTR(Lcom/liveperson/api/response/types/TTRType;JJLjava/lang/String;)V = UpdateTTR(Com.Liveperson.Api.Response.Types.TTRType, long, long, string)
com/liveperson/messaging/model/FileMessage = Com.Liveperson.Messaging.Model.FileMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = .ctor(string, string, string, string, long)
  EXTRA_FILE_ROW_ID = ExtraFileRowId
  EXTRA_FULL_IMAGE_EXISTS = ExtraFullImageExists
  EXTRA_LOAD_STATUS = ExtraLoadStatus
  EXTRA_LOCAL_URL = ExtraLocalUrl
  EXTRA_PREVIEW = ExtraPreview
  EXTRA_PREVIEW_IMAGE_EXISTS = ExtraPreviewImageExists
  getAllFileChanges()Landroid/os/Bundle; = AllFileChanges
  getFileRowId()J = FileRowId
  getFileType()Ljava/lang/String; = FileType
  getLoadStatus()Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus; = LoadStatus
  getLocalUrl()Ljava/lang/String; = LocalUrl
  getPreview()Ljava/lang/String; = Preview
  getRelatedMessageRowID()J = RelatedMessageRowID
  getSwiftPath()Ljava/lang/String; = SwiftPath
  fromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/FileMessage; = FromCursor(Android.Database.ICursor)
  update(Lcom/liveperson/messaging/model/FileMessage;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.FileMessage)
com/liveperson/messaging/model/Form = Com.Liveperson.Messaging.Model.Form
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = .ctor(string, string, string, string, string, string, int, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string, string, string, string, string, string)
  getConversationId()Ljava/lang/String; = ConversationId
  getEventId()Ljava/lang/String; = EventId
  getFormId()Ljava/lang/String; = FormId
  getFormTitle()Ljava/lang/String; = FormTitle
  getInvitationId()Ljava/lang/String; = InvitationId
  getLanguage()Ljava/lang/String; = Language
  getOpenFormURL()Ljava/lang/String; = OpenFormURL
  getReadOTK()Ljava/lang/String; = ReadOTK
  setReadOTK(Ljava/lang/String;)V = ReadOTK
  getSeqId()I = SeqId
  getSiteId()Ljava/lang/String; = SiteId
  getSubmissionId()Ljava/lang/String; = SubmissionId
  setSubmissionId(Ljava/lang/String;)V = SubmissionId
  getWriteOTK()Ljava/lang/String; = WriteOTK
  setWriteOTK(Ljava/lang/String;)V = WriteOTK
  getFormStatus()Lcom/liveperson/messaging/model/Form$FormStatus; = GetFormStatus()
  setFormStatus(Lcom/liveperson/messaging/model/Form$FormStatus;)V = SetFormStatus(Com.Liveperson.Messaging.Model.Form.FormStatus)
com/liveperson/messaging/model/FormsManager = Com.Liveperson.Messaging.Model.FormsManager
  <init>()V = .ctor()
  FORM_ID = FormId
  INVITATION_ID = InvitationId
  TITLE = Title
  addForm(Ljava/lang/String;Lcom/liveperson/messaging/model/Form;)V = AddForm(string, Com.Liveperson.Messaging.Model.Form)
  getForm(Ljava/lang/String;)Lcom/liveperson/messaging/model/Form; = GetForm(string)
  removeForm(Ljava/lang/String;)V = RemoveForm(string)
  updateForm(Ljava/lang/String;Ljava/lang/String;)V = UpdateForm(string, string)
  updateForm(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = UpdateForm(string, string, string)
com/liveperson/messaging/model/FullMessageRow = Com.Liveperson.Messaging.Model.FullMessageRow
  <init>(Landroid/database/Cursor;)V = .ctor(Android.Database.ICursor)
  <init>(Lcom/liveperson/messaging/model/MessagingChatMessage;Ljava/lang/String;Lcom/liveperson/messaging/model/FileMessage;)V = .ctor(Com.Liveperson.Messaging.Model.MessagingChatMessage, string, Com.Liveperson.Messaging.Model.FileMessage)
  EXTRA_AGENT_AVATAR = ExtraAgentAvatar
  TAG = Tag
  getAgentAvatar()Ljava/lang/String; = AgentAvatar
  getFileMessage()Lcom/liveperson/messaging/model/FileMessage; = FileMessage
  getMessagingChatMessage()Lcom/liveperson/messaging/model/MessagingChatMessage; = MessagingChatMessage
  getRootElement()Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement; = RootElement
  setRootElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;)V = RootElement
  generateAgentQuickReplyMessage(Ljava/lang/String;J)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateAgentQuickReplyMessage(string, long)
  generateAgentTypingIndicatorMessage(Ljava/lang/String;)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateAgentTypingIndicatorMessage(string)
  generateUnreadIndicatorMessage(Landroid/content/Context;IJ)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateUnreadIndicatorMessage(Android.Content.Context, int, long)
  getDummyMessage(Landroid/content/Context;J)Lcom/liveperson/messaging/model/FullMessageRow; = GetDummyMessage(Android.Content.Context, long)
  getLoadingHistoryIndicatorMessage(Landroid/content/Context;J)Lcom/liveperson/messaging/model/FullMessageRow; = GetLoadingHistoryIndicatorMessage(Android.Content.Context, long)
  getLoadingIndicatorMessage(Landroid/content/Context;JZ)Lcom/liveperson/messaging/model/FullMessageRow; = GetLoadingIndicatorMessage(Android.Content.Context, long, bool)
  getLoadingIndicatorMessageDiff(Landroid/content/Context;)Landroid/os/Bundle; = GetLoadingIndicatorMessageDiff(Android.Content.Context)
  getMessageDetails(Lcom/liveperson/messaging/model/FullMessageRow;)Landroid/os/Bundle; = GetMessageDetails(Com.Liveperson.Messaging.Model.FullMessageRow)
  newerThan(Lcom/liveperson/messaging/model/FullMessageRow;)I = NewerThan(Com.Liveperson.Messaging.Model.FullMessageRow)
  update(Lcom/liveperson/messaging/model/FullMessageRow;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.FullMessageRow)
com/liveperson/messaging/model/IncaGetConversationsListResponse = Com.Liveperson.Messaging.Model.IncaGetConversationsListResponse
  <init>(Ljava/lang/String;)V = .ctor(string)
  mNextUrl = MNextUrl
  getListOfConversations()Ljava/util/ArrayList; = ListOfConversations
  getNumOfResults()I = NumOfResults
  getUrlRef()Ljava/lang/String; = UrlRef
com/liveperson/messaging/model/MessagesByBrandIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByBrandIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  URI = Uri
com/liveperson/messaging/model/MessagesByConversationIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByConversationIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  URI = Uri
com/liveperson/messaging/model/MessagesByUserIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByUserIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  URI = Uri
com/liveperson/messaging/model/MessagingChatMessage = Com.Liveperson.Messaging.Model.MessagingChatMessage
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;ILjava/lang/String;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState, int, string, Com.Liveperson.Infra.Utils.EncryptionVersion)
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState, Com.Liveperson.Infra.Utils.EncryptionVersion)
  EXTRA_CONVERSATION_ID = ExtraConversationId
  EXTRA_MESSAGE_STATE = ExtraMessageState
  EXTRA_SERVER_SEQUENCE = ExtraServerSequence
  TAG = Tag
  getAccessibilityMessage()Ljava/lang/String; = AccessibilityMessage
  getFormalMessage()Ljava/lang/String; = FormalMessage
  getMessageState()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState; = GetMessageState()
  getMessageType()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType()
  isSystemMessageFromAgent(Ljava/lang/String;)Z = IsSystemMessageFromAgent(string)
  setMessageState(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = SetMessageState(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  setMessageType(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = SetMessageType(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  update(Lcom/liveperson/messaging/model/MessagingChatMessage;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.MessagingChatMessage)
com/liveperson/messaging/model/MessagingSearchedMessage = Com.Liveperson.Messaging.Model.MessagingSearchedMessage
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(string, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  getBrandId()Ljava/lang/String; = BrandId
  setBrandId(Ljava/lang/String;)V = BrandId
  getFirstName()Ljava/lang/String; = FirstName
  setFirstName(Ljava/lang/String;)V = FirstName
  getMessage()Ljava/lang/String; = Message
  setMessage(Ljava/lang/String;)V = Message
  getMessageType()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = MessageType
  setMessageType(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = MessageType
  fromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/MessagingSearchedMessage; = FromCursor(Android.Database.ICursor)
com/liveperson/messaging/model/MessagingUserProfile = Com.Liveperson.Messaging.Model.MessagingUserProfile
  <init>(Lcom/liveperson/api/response/model/UserProfile;)V = .ctor(Com.Liveperson.Api.Response.Model.UserProfile)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  getBrandId()Ljava/lang/String; = BrandId
  isEmptyUser()Z = IsEmptyUser
  getUserEncryptionVersion()Lcom/liveperson/infra/utils/EncryptionVersion; = UserEncryptionVersion
  setUserEncryptionVersion(Lcom/liveperson/infra/utils/EncryptionVersion;)V = UserEncryptionVersion
  setBrandID(Ljava/lang/String;)V = SetBrandID(string)
com/liveperson/messaging/model/NullMessagesListener = Com.Liveperson.Messaging.Model.NullMessagesListener
  <init>()V = .ctor()
  initMessages(Ljava/util/ArrayList;)V = InitMessages(System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.FullMessageRow>)
  onExConversationHandled(Z)V = OnExConversationHandled(bool)
  onHistoryFetched()V = OnHistoryFetched()
  onHistoryFetchedFailed()V = OnHistoryFetchedFailed()
  onNewMessage(Lcom/liveperson/messaging/model/FullMessageRow;)V = OnNewMessage(Com.Liveperson.Messaging.Model.FullMessageRow)
  onQueryMessagesResult(JJ)V = OnQueryMessagesResult(long, long)
  onUpdateMessage(Lcom/liveperson/messaging/model/FullMessageRow;)V = OnUpdateMessage(Com.Liveperson.Messaging.Model.FullMessageRow)
  onUpdateMessages(JJ)V = OnUpdateMessages(long, long)
  removeAll(Ljava/lang/String;)V = RemoveAll(string)
com/liveperson/messaging/model/PendingConversationData = Com.Liveperson.Messaging.Model.PendingConversationData
  <init>()V = .ctor()
  getPendingMessages()Ljava/util/ArrayList; = PendingMessages
  addToPendingRequests(Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = AddToPendingRequests(Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
com/liveperson/messaging/model/QuickRepliesMessageHolder = Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;IZ)V = .ctor(string, string, long, string, int, bool)
  TAG = Tag
  isValid()Z = IsValid
  getJsonString()Ljava/lang/String; = JsonString
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getQuickRepliesString()Ljava/lang/String; = QuickRepliesString
  getSequence()I = Sequence
  isShow()Z = Show
  setShow(Z)V = Show
  getTimestamp()J = Timestamp
  deleteFromSharedPreferences()V = DeleteFromSharedPreferences()
  fromContentEventNotification(Ljava/lang/String;Lcom/liveperson/api/response/events/ContentEventNotification;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = FromContentEventNotification(string, Com.Liveperson.Api.Response.Events.ContentEventNotification)
  fromJsonString(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = FromJsonString(string, string)
  loadFromSharedPreferences(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = LoadFromSharedPreferences(string)
  newerOrEqualThan(Lcom/liveperson/messaging/model/QuickRepliesMessageHolder;)Z = NewerOrEqualThan(Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder)
  newerThan(Lcom/liveperson/messaging/model/QuickRepliesMessageHolder;)Z = NewerThan(Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder)
  writeToSharedPreferences()V = WriteToSharedPreferences()
com/liveperson/messaging/model/SynchronizedAmsConnectionCallback = Com.Liveperson.Messaging.Model.SynchronizedAmsConnectionCallback
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/Runnable;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, Java.Lang.IRunnable)
  execute()V = Execute()
com/liveperson/messaging/model/SynchronizedAmsConnectionUpdateCallback = Com.Liveperson.Messaging.Model.SynchronizedAmsConnectionUpdateCallback
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/Runnable;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, Java.Lang.IRunnable)
  execute()V = Execute()
com/liveperson/messaging/model/SynchronizedAuthenticationCompletedCallback = Com.Liveperson.Messaging.Model.SynchronizedAuthenticationCompletedCallback
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, string, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
  executeWithReturnValue()Z = ExecuteWithReturnValue()
com/liveperson/messaging/model/SynchronizedInternetConnectionCallback = Com.Liveperson.Messaging.Model.SynchronizedInternetConnectionCallback
  <init>(Ljava/lang/Runnable;)V = .ctor(Java.Lang.IRunnable)
  handled = Handled
  mCallback = MCallback
  mLocalBroadcastReceiver = MLocalBroadcastReceiver
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/model/TimeBundle = Com.Liveperson.Messaging.Model.TimeBundle
  <init>(J)V = .ctor(long)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  diffDays = DiffDays
  diffHours = DiffHours
  diffMinutes = DiffMinutes
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/messaging/model/TTRManager = Com.Liveperson.Messaging.Model.TTRManager
  <init>(Ljava/lang/String;)V = .ctor(string)
  calculateEffectiveTTR(Ljava/lang/String;JJJJ)J = CalculateEffectiveTTR(string, long, long, long, long)
  cancelAll()V = CancelAll()
  clear()V = Clear()
  resetEffectiveTTR()V = ResetEffectiveTTR()
  showTTR(Ljava/lang/String;)V = ShowTTR(string)
  shutDown()V = ShutDown()
  updateIfOffHours(Ljava/lang/String;)V = UpdateIfOffHours(string)
  updateTTR(Ljava/lang/String;JJJ)V = UpdateTTR(string, long, long, long)
com/liveperson/messaging/model/UserProfileBundle = Com.Liveperson.Messaging.Model.UserProfileBundle
  getAvatarUrl()Ljava/lang/String; = AvatarUrl
  getFirstName()Ljava/lang/String; = FirstName
  getLastName()Ljava/lang/String; = LastName
  getNickname()Ljava/lang/String; = Nickname
  getPhoneNumber()Ljava/lang/String; = PhoneNumber
com/liveperson/messaging/network/http/AgentProfileRequest = Com.Liveperson.Messaging.Network.Http.AgentProfileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  mController = MController
  getCallback()Lcom/liveperson/infra/ICallback; = Callback
  execute()V = Execute()
  setCallback(Lcom/liveperson/infra/ICallback;)Lcom/liveperson/messaging/network/http/AgentProfileRequest; = SetCallback(Com.Liveperson.Infra.ICallback)
com/liveperson/messaging/network/http/DownloadFileRequest = Com.Liveperson.Messaging.Network.Http.DownloadFileRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/QueryParams;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.QueryParams, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/network/http/IdpRequest = Com.Liveperson.Messaging.Network.Http.IdpRequest
  <init>(Lcom/liveperson/messaging/model/AmsAccount;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Ljava/lang/String;Lcom/liveperson/messaging/commands/tasks/IdpTask$IDPExceptionICallback;Ljava/util/List;)V = .ctor(Com.Liveperson.Messaging.Model.AmsAccount, string, string, Com.Liveperson.Infra.LPAuthenticationParams, string, Com.Liveperson.Messaging.Commands.Tasks.IdpTask.IDPExceptionICallback, System.Collections.Generic.IList<string>)
  AUTHENTICATE = Authenticate
  DEFAULT_REDIRECT_URI = DefaultRedirectUri
  IDP_REQUEST_TIMEOUT = IdpRequestTimeout
  mAccount = MAccount
  mBrandId = MBrandId
  mCallback = MCallback
  mCertificates = MCertificates
  mHostVersion = MHostVersion
  mIdpDomain = MIdpDomain
  mLPAuthenticationParams = MLPAuthenticationParams
  SIGNUP = Signup
  TAG = Tag
  USER_EXPIRED_ERROR = UserExpiredError
  addHeaders(Lcom/liveperson/infra/network/http/request/HttpPostRequest;)V = AddHeaders(Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest)
  execute()V = Execute()
  getBodyForIDPJwtFlow(Ljava/lang/String;)Lorg/json/JSONObject; = GetBodyForIDPJwtFlow(string)
  sendErrorCallback(Ljava/lang/Exception;)V = SendErrorCallback(Java.Lang.Exception)
  sendGeneralRequest(Lcom/liveperson/infra/network/http/request/HttpPostRequest;)V = SendGeneralRequest(Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest)
com/liveperson/messaging/network/http/IncaGetConversationsListRequest = Com.Liveperson.Messaging.Network.Http.IncaGetConversationsListRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;JJJLcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, long, long, long, Com.Liveperson.Infra.ICallback)
  MAX_LIMIT = MaxLimit
  MAX_TIME_LIMIT = MaxTimeLimit
  mController = MController
  getOffset()J = Offset
  setOffset(J)V = Offset
  execute()V = Execute()
  setOffset(I)V = SetOffset(int)
com/liveperson/messaging/network/http/MessageTimeoutListener = Com.Liveperson.Messaging.Network.Http.IMessageTimeoutListener
  onMessageTimeout(Ljava/lang/String;)V = OnMessageTimeout(string)
  onPublishMessageTimeout(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = OnPublishMessageTimeout(string, string, string)
com/liveperson/messaging/network/http/QueryMessagesINCACommand = Com.Liveperson.Messaging.Network.Http.QueryMessagesINCACommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  execute()V = Execute()
com/liveperson/messaging/network/http/RestRequestParams = Com.Liveperson.Messaging.Network.Http.RestRequestParams
  <init>()V = .ctor()
  mCertificates = MCertificates
  isNotValid()Z = IsNotValid
  setParams(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = SetParams(string, string, string, System.Collections.Generic.IList<string>)
com/liveperson/messaging/network/http/SendFileRequestRest = Com.Liveperson.Messaging.Network.Http.SendFileRequestRest
  <init>(Lcom/liveperson/messaging/network/http/RestRequestParams;Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = .ctor(Com.Liveperson.Messaging.Network.Http.RestRequestParams, Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
  execute()V = Execute()
com/liveperson/messaging/network/http/UnAuthRequest = Com.Liveperson.Messaging.Network.Http.UnAuthRequest
  <init>(Lcom/liveperson/messaging/model/AmsAccount;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Ljava/lang/String;Lcom/liveperson/messaging/commands/tasks/IdpTask$IDPExceptionICallback;Ljava/util/List;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Model.AmsAccount, string, string, Com.Liveperson.Infra.LPAuthenticationParams, string, Com.Liveperson.Messaging.Commands.Tasks.IdpTask.IDPExceptionICallback, System.Collections.Generic.IList<string>, string)
  IDP_ANONYMOUS_URL = IdpAnonymousUrl
  mConnectorId = MConnectorId
  TAG = Tag
  getHttpPostRequestForIDPV3(Ljava/lang/String;)Lcom/liveperson/infra/network/http/request/HttpPostRequest; = GetHttpPostRequestForIDPV3(string)
  sendUnAuthRequest()V = SendUnAuthRequest()
com/liveperson/messaging/network/http/UploadFileRequest = Com.Liveperson.Messaging.Network.Http.UploadFileRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/QueryParams;Ljava/util/List;Lcom/liveperson/infra/ICallback;[BLjava/lang/Integer;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.QueryParams, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback, byte[], Java.Lang.Integer)
  execute()V = Execute()
com/liveperson/messaging/network/MessageTimeoutQueue = Com.Liveperson.Messaging.Network.MessageTimeoutQueue
  <init>(Lcom/liveperson/messaging/network/http/MessageTimeoutListener;)V = .ctor(Com.Liveperson.Messaging.Network.Http.IMessageTimeoutListener)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;I)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, int)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string, int)
  handleMsgImmediately(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = HandleMsgImmediately(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string)
  onHandleMessage(Landroid/os/Message;)V = OnHandleMessage(Android.OS.Message)
  remove(I)Z = Remove(int)
  removeAll()V = RemoveAll()
com/liveperson/messaging/network/socket/ExConversationChangeNotificationResponseHandler = Com.Liveperson.Messaging.Network.Socket.ExConversationChangeNotificationResponseHandler
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  mConversationUtils = MConversationUtils
  getAPIResponseType()Ljava/lang/String; = APIResponseType
  getFetchConversationManager()Lcom/liveperson/messaging/commands/tasks/FetchConversationManager; = FetchConversationManager
  createNewConversation(Lcom/liveperson/messaging/model/ConversationData;)V = CreateNewConversation(Com.Liveperson.Messaging.Model.ConversationData)
  handle(Ljava/util/List;)Z = Handle(System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>)
  init()V = Init()
  isValidResponse(Lcom/liveperson/api/response/model/Result;)Z = IsValidResponse(Com.Liveperson.Api.Response.Model.Result)
  parse(Lorg/json/JSONObject;)Ljava/util/List; = Parse(Org.Json.JSONObject)
  queryMessages(Lcom/liveperson/messaging/model/Conversation;Lcom/liveperson/messaging/commands/tasks/FetchConversationManager$DATA_SOURCE;)V = QueryMessages(Com.Liveperson.Messaging.Model.Conversation, Com.Liveperson.Messaging.Commands.Tasks.FetchConversationManager.DATA_SOURCE)
  updateClosedConversation(Lcom/liveperson/messaging/model/ConversationData;Z)V = UpdateClosedConversation(Com.Liveperson.Messaging.Model.ConversationData, bool)
  updateConversation(Lcom/liveperson/messaging/model/ConversationData;)V = UpdateConversation(Com.Liveperson.Messaging.Model.ConversationData)
com/liveperson/messaging/network/socket/general_requests/ClockRequest = Com.Liveperson.Messaging.Network.Socket.General_requests.ClockRequest
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/MessagingEventNotificationHandler = Com.Liveperson.Messaging.Network.Socket.MessagingEventNotificationHandler
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  Companion = Companion
  getAPIResponseType()Ljava/lang/String; = APIResponseType
  getMController$messaging_debug()Lcom/liveperson/messaging/Messaging; = MController$messaging_debug
  setMController$messaging_debug(Lcom/liveperson/messaging/Messaging;)V = MController$messaging_debug
  getTAG()Ljava/lang/String; = TAG
  extractLinks(Ljava/lang/String;)[Ljava/lang/String; = ExtractLinks(string)
com/liveperson/messaging/network/socket/requests/BaseGetUrlRequest = Com.Liveperson.Messaging.Network.Socket.Requests.BaseGetUrlRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/ChangeConversationTTRRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ChangeConversationTTRRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;I)V = .ctor(string, string, Com.Liveperson.Api.Response.Types.TTRType, int)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/ChatStateChangeRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ChatStateChangeRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)V = .ctor(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/CsatRequest = Com.Liveperson.Messaging.Network.Socket.Requests.CsatRequest
  <init>(Ljava/lang/String;Ljava/lang/String;II)V = .ctor(string, string, int, int)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/DeliveryStatusUpdateRequest = Com.Liveperson.Messaging.Network.Socket.Requests.DeliveryStatusUpdateRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/DeliveryStatus;Ljava/util/List;)V = .ctor(string, string, Com.Liveperson.Api.Response.Types.DeliveryStatus, System.Collections.Generic.IList<Java.Lang.Integer>)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setInfo(Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = SetInfo(Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
com/liveperson/messaging/network/socket/requests/GetUrlForDownloadRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUrlForDownloadRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getData()Ljava/lang/String; = Data
com/liveperson/messaging/network/socket/requests/GetUrlForUploadRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUrlForUploadRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;ILjava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, int, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getData()Ljava/lang/String; = Data
com/liveperson/messaging/network/socket/requests/GetUserProfileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUserProfileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setServerConversationId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetServerConversationId(string)
  setShouldUpdateUI(Z)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetShouldUpdateUI(bool)
  setUserId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetUserId(string)
com/liveperson/messaging/network/socket/requests/NewConversationRequest = Com.Liveperson.Messaging.Network.Socket.Requests.NewConversationRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setAppId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetAppId(string)
  setSkill(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetSkill(string)
  setTtrType(Lcom/liveperson/api/response/types/TTRType;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetTtrType(Com.Liveperson.Api.Response.Types.TTRType)
com/liveperson/messaging/network/socket/requests/QueryMessagesRequest = Com.Liveperson.Messaging.Network.Socket.Requests.QueryMessagesRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, int)
  getConversationId()Ljava/lang/String; = ConversationId
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setMaxSize(I)Lcom/liveperson/messaging/network/socket/requests/QueryMessagesRequest; = SetMaxSize(int)
  setOlderThanSequenceId(I)Lcom/liveperson/messaging/network/socket/requests/QueryMessagesRequest; = SetOlderThanSequenceId(int)
  setResponseCallBack(Lcom/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback;)V = SetResponseCallBack(Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback)
  setShouldUpdateUI(Z)V = SetShouldUpdateUI(bool)
com/liveperson/messaging/network/socket/requests/ResolveConversationRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ResolveConversationRequest
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/SendFileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendFileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  setFileContent(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetFileContent(string, string, string, string)
com/liveperson/messaging/network/socket/requests/SendFormSubmissionMessageRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendFormSubmissionMessageRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, string)
  mMessage = MMessage
com/liveperson/messaging/network/socket/requests/SendMessageRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string)
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/ContentType;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, Com.Liveperson.Api.Response.Model.ContentType)
  mMessage = MMessage
  getData()Ljava/lang/String; = Data
  getEventId()Ljava/lang/String; = EventId
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setContentType(Lcom/liveperson/api/response/model/ContentType;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = SetContentType(Com.Liveperson.Api.Response.Model.ContentType)
  setConversationId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = SetConversationId(string)
  setMessageContent(Ljava/lang/String;)V = SetMessageContent(string)
com/liveperson/messaging/network/socket/requests/SetUsersProfileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SetUsersProfileRequest
  <init>(Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingUserProfile;)V = .ctor(Com.Liveperson.Messaging.Model.AmsUsers, string, string, Com.Liveperson.Messaging.Model.MessagingUserProfile)
  TAG = Tag
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SubscribeExConversationsRequest
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;JLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, long, string, string, string[])
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, long, string, string, string)
  TAG = Tag
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setAgentIds([Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetAgentIds(string[])
  setConvState([Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetConvState(string[])
  setMaxETTR(I)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetMaxETTR(int)
  setMaxLastUpdatedTime(J)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetMaxLastUpdatedTime(long)
com/liveperson/messaging/network/socket/requests/SubscribeMessagingEventsRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SubscribeMessagingEventsRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)V = .ctor(string, string, Java.Lang.Integer)
  getConversationId()Ljava/lang/String; = ConversationId
  getData()Ljava/lang/String; = Data
  getFromSeq()Ljava/lang/Integer; = FromSeq
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/UnSubscribeExConversationsRequest = Com.Liveperson.Messaging.Network.Socket.Requests.UnSubscribeExConversationsRequest
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/SocketTaskType = Com.Liveperson.Messaging.SocketTaskType
  GET_CLOCK = GetClock
  GET_USER = GetUser
  QUERY_MESSAGES = QueryMessages
  SUBSCRIBE = Subscribe
  UN_SUBSCRIBE = UnSubscribe
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/SocketTaskType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/SocketTaskType; = Values()
com/liveperson/messaging/structuredcontent/model/actions/BaseAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.BaseAction
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mName = MName
  getName()Ljava/lang/String; = Name
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
com/liveperson/messaging/structuredcontent/model/actions/LinkAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.LinkAction
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getUri()Ljava/lang/String; = Uri
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/actions/NavigateAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.NavigateAction
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getLatitude()Ljava/lang/String; = Latitude
  getLongitude()Ljava/lang/String; = Longitude
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.IOnActionClickListener
  onClick()V = OnClick()
com/liveperson/messaging/structuredcontent/model/actions/PublishTextAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.PublishTextAction
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/ActionableElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.ActionableElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mActionList = MActionList
  mMetadata = MMetadata
  TAG = Tag
  getActions()Ljava/util/List; = Actions
  getMetadata()Lorg/json/JSONArray; = Metadata
  parseActions(Lorg/json/JSONObject;)V = ParseActions(Org.Json.JSONObject)
  parseClick(Lorg/json/JSONObject;)V = ParseClick(Org.Json.JSONObject)
com/liveperson/messaging/structuredcontent/model/elements/BaseElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.BaseElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mType = MType
  getType()Ljava/lang/String; = Type
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getStyle()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle; = Style
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ElementStyle
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getBackgroundColor()I = BackgroundColor
  getBorderColor()Ljava/lang/Integer; = BorderColor
  getBorderRadius()Ljava/lang/Integer; = BorderRadius
  isBold()Z = IsBold
  isItalic()Z = IsItalic
  getSize()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle$ElementSize; = Size
  getTextColor()Ljava/lang/Integer; = TextColor
  setDefaultValues()V = SetDefaultValues()
com/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getCaption()Ljava/lang/String; = Caption
  getUrl()Ljava/lang/String; = Url
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  getUri()Ljava/lang/String; = Uri
  setUri(Ljava/lang/String;)V = Uri
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/MapElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getLatitude()F = Latitude
  getLongitude()F = Longitude
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/TextElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getStyle()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle; = Style
  getText()Ljava/lang/String; = Text
  setText(Ljava/lang/String;)V = Text
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getUrl()Ljava/lang/String; = Url
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getPadding()I = Padding
  setPadding(I)V = Padding
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/ComplexElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.ComplexElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  <init>(Lorg/json/JSONObject;Ljava/lang/String;)V = .ctor(Org.Json.JSONObject, string)
  mElementList = MElementList
  getElementList()Ljava/util/List; = ElementList
  addElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;)V = AddElement(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement)
com/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement
  <init>(Ljava/lang/String;Z)V = .ctor(string, bool)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  isVerticalOrientation()Z = IsVerticalOrientation
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getItemsPerRow()I = ItemsPerRow
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/SimpleElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mRtl = MRtl
  mTooltip = MTooltip
  isRtl()Z = Rtl
  setRtl(Z)V = Rtl
  getTooltip()Ljava/lang/String; = Tooltip
  setTooltip(Ljava/lang/String;)V = Tooltip
com/liveperson/messaging/structuredcontent/parsers/ActionParser = Com.Liveperson.Messaging.Structuredcontent.Parsers.ActionParser
  <init>()V = .ctor()
  TAG = Tag
  parse(Lorg/json/JSONArray;)Ljava/util/List; = Parse(Org.Json.JSONArray)
com/liveperson/messaging/structuredcontent/parsers/ElementParser = Com.Liveperson.Messaging.Structuredcontent.Parsers.ElementParser
  <init>()V = .ctor()
  TAG = Tag
  parse(Lorg/json/JSONObject;)Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement; = Parse(Org.Json.JSONObject)
com/liveperson/messaging/structuredcontent/parsers/ElementType = Com.Liveperson.Messaging.Structuredcontent.Parsers.ElementType
  <init>()V = .ctor()
  ACTIONS = Actions
  ANDROID = Android
  BACKGROUND_COLOR = BackgroundColor
  BOLD = Bold
  BORDER_COLOR = BorderColor
  BORDER_RADIUS = BorderRadius
  BUTTON = Button
  CAPTION = Caption
  CAROUSEL = Carousel
  CLICK = Click
  COLOR = Color
  ELEMENTS = Elements
  HORIZONTAL = Horizontal
  ID = Id
  IMAGE = Image
  ITALIC = Italic
  ITEMS_PER_ROW = ItemsPerRow
  LA = La
  LAYOUT = Layout
  LINK = Link
  LO = Lo
  MAP = Map
  METADATA = Metadata
  NAME = Name
  NAVIGATE = Navigate
  PADDING = Padding
  PUBLISH_TEXT = PublishText
  QUICK_REPLY = QuickReply
  REPLIES = Replies
  RTL = Rtl
  SIZE = Size
  STYLE = Style
  TEXT = Text
  TITLE = Title
  TOOLTIP = Tooltip
  TYPE = Type
  URI = Uri
  URL = Url
  VERTICAL = Vertical
  WEBVIEW = Webview
com/liveperson/messaging/structuredcontent/visitor/ElementVisitor = Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/MapElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/TextElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement)
com/liveperson/messaging/structuredcontent/visitor/Visitable = Com.Liveperson.Messaging.Structuredcontent.Visitor.IVisitable
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
com/liveperson/messaging/TaskType = Com.Liveperson.Messaging.TaskType
  CSDS = Csds
  IDP = Idp
  INVALID_CERTIFICATE = InvalidCertificate
  OPEN_SOCKET = OpenSocket
  USER_EXPIRED = UserExpired
  VERSION = Version
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/TaskType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/TaskType; = Values()
com/liveperson/messaging/Utils/TokenUtils = Com.Liveperson.Messaging.Utils.TokenUtils
  <init>()V = .ctor()
  TAG = Tag
  getConsumerUserId(Ljava/lang/String;)Ljava/lang/String; = GetConsumerUserId(string)
  getOriginalConsumerIdFromJWT(Ljava/lang/String;)Ljava/lang/String; = GetOriginalConsumerIdFromJWT(string)
  isJwtExpired(Ljava/lang/String;)Z = IsJwtExpired(string)
