com/liveperson/api/exception/BadConversationException = Com.Liveperson.Api.Exception.BadConversationException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/api/exception/BadMessageException = Com.Liveperson.Api.Exception.BadMessageException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/api/LivePersonCallback = Com.Liveperson.Api.ILivePersonCallback
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
com/liveperson/api/LivePersonCallbackImpl = Com.Liveperson.Api.LivePersonCallbackImpl
  <init>()V = .ctor()
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
com/liveperson/api/LivePersonIntents = Com.Liveperson.Api.LivePersonIntents
  <init>()V = .ctor()
  getIntentFilterForAllEvents()Landroid/content/IntentFilter; = IntentFilterForAllEvents
  getAgentData(Landroid/content/Intent;)Lcom/liveperson/messaging/model/AgentData; = GetAgentData(Android.Content.Intent)
  getAgentTypingValue(Landroid/content/Intent;)Z = GetAgentTypingValue(Android.Content.Intent)
  getConnectedValue(Landroid/content/Intent;)Z = GetConnectedValue(Android.Content.Intent)
  getConversationID(Landroid/content/Intent;)Ljava/lang/String; = GetConversationID(Android.Content.Intent)
  getLinkUri(Landroid/content/Intent;)Ljava/lang/String; = GetLinkUri(Android.Content.Intent)
  getLPConversationData(Landroid/content/Intent;)Lcom/liveperson/api/sdk/LPConversationData; = GetLPConversationData(Android.Content.Intent)
  getOfflineHoursOn(Landroid/content/Intent;)Z = GetOfflineHoursOn(Android.Content.Intent)
  getOnErrorMessage(Landroid/content/Intent;)Ljava/lang/String; = GetOnErrorMessage(Android.Content.Intent)
  getOnErrorTaskType(Landroid/content/Intent;)Lcom/liveperson/messaging/TaskType; = GetOnErrorTaskType(Android.Content.Intent)
  getPermissionDoNotShowAgainMarked(Landroid/content/Intent;)Z = GetPermissionDoNotShowAgainMarked(Android.Content.Intent)
  getPermissionType(Landroid/content/Intent;)Lcom/liveperson/api/sdk/PermissionType; = GetPermissionType(Android.Content.Intent)
  sendOnAgentAvatarTapped(Landroid/content/Context;Lcom/liveperson/messaging/model/AgentData;)V = SendOnAgentAvatarTapped(Android.Content.Context, Com.Liveperson.Messaging.Model.AgentData)
  sendOnAgentDetailsChanged(Landroid/content/Context;Lcom/liveperson/messaging/model/AgentData;)V = SendOnAgentDetailsChanged(Android.Content.Context, Com.Liveperson.Messaging.Model.AgentData)
  sendOnAgentTyping(Landroid/content/Context;Z)V = SendOnAgentTyping(Android.Content.Context, bool)
  sendOnConnectionChanged(Landroid/content/Context;Z)V = SendOnConnectionChanged(Android.Content.Context, bool)
  sendOnConversationMarkedAsNormal(Landroid/content/Context;)V = SendOnConversationMarkedAsNormal(Android.Content.Context)
  sendOnConversationMarkedAsUrgent(Landroid/content/Context;)V = SendOnConversationMarkedAsUrgent(Android.Content.Context)
  sendOnConversationResolved(Landroid/content/Context;Lcom/liveperson/api/sdk/LPConversationData;)V = SendOnConversationResolved(Android.Content.Context, Com.Liveperson.Api.Sdk.LPConversationData)
  sendOnConversationStarted(Landroid/content/Context;Lcom/liveperson/api/sdk/LPConversationData;)V = SendOnConversationStarted(Android.Content.Context, Com.Liveperson.Api.Sdk.LPConversationData)
  sendOnCsatDismissed(Landroid/content/Context;)V = SendOnCsatDismissed(Android.Content.Context)
  sendOnCsatLaunched(Landroid/content/Context;)V = SendOnCsatLaunched(Android.Content.Context)
  sendOnCsatSkipped(Landroid/content/Context;)V = SendOnCsatSkipped(Android.Content.Context)
  sendOnCsatSubmitted(Landroid/content/Context;Ljava/lang/String;)V = SendOnCsatSubmitted(Android.Content.Context, string)
  sendOnErrorIntent(Landroid/content/Context;Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = SendOnErrorIntent(Android.Content.Context, Com.Liveperson.Messaging.TaskType, string)
  sendOnOfflineHoursChanges(Landroid/content/Context;Z)V = SendOnOfflineHoursChanges(Android.Content.Context, bool)
  sendOnStructuredContentLinkClicked(Landroid/content/Context;Ljava/lang/String;)V = SendOnStructuredContentLinkClicked(Android.Content.Context, string)
  sendOnTokenExpired(Landroid/content/Context;)V = SendOnTokenExpired(Android.Content.Context)
  sendOnUserActionOnPreventedPermission(Landroid/content/Context;Lcom/liveperson/api/sdk/PermissionType;)V = SendOnUserActionOnPreventedPermission(Android.Content.Context, Com.Liveperson.Api.Sdk.PermissionType)
  sendOnUserDeniedPermission(Landroid/content/Context;Lcom/liveperson/api/sdk/PermissionType;Z)V = SendOnUserDeniedPermission(Android.Content.Context, Com.Liveperson.Api.Sdk.PermissionType, bool)
  sendOnUserExpired(Landroid/content/Context;)V = SendOnUserExpired(Android.Content.Context)
com/liveperson/api/request/AbstractRequest = Com.Liveperson.Api.Request.AbstractRequest
  <init>()V = .ctor()
  body = Body
  JSON_KEY_BODY = JsonKeyBody
  JSON_KEY_TYPE = JsonKeyType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
  toJsonString(J)Ljava/lang/String; = ToJsonString(long)
com/liveperson/api/request/BaseAMSSocketRequest = Com.Liveperson.Api.Request.BaseAMSSocketRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;J)V = .ctor(string, long)
  getSocketUrl()Ljava/lang/String; = SocketUrl
com/liveperson/api/request/BaseGenerateURL = Com.Liveperson.Api.Request.BaseGenerateURL
  <init>()V = .ctor()
  BASE_GENERATE_URL_TYPE = BaseGenerateUrlType
  getMessageType()Ljava/lang/String; = MessageType
com/liveperson/api/request/ConsumerRequestConversation = Com.Liveperson.Api.Request.ConsumerRequestConversation
  <init>(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/CampaignInfo;)V = .ctor(string, Com.Liveperson.Api.Response.Types.TTRType, string, string, Com.Liveperson.Infra.CampaignInfo)
  appId = AppId
  brandId = BrandId
  INTERACTION_CONTEXT_ID = InteractionContextId
  mCampaignInfo = MCampaignInfo
  skillId = SkillId
  ttrType = TtrType
com/liveperson/api/request/GeneratedUploadTokenField = Com.Liveperson.Api.Request.GeneratedUploadTokenField
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  GENERATE_UPLOAD_TOKEN_TYPE = GenerateUploadTokenType
  READ_OTK = ReadOtk
  WRITE_OTK = WriteOtk
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/GenerateUploadTokenRequest = Com.Liveperson.Api.Request.GenerateUploadTokenRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setResponseCallBack(Lcom/liveperson/infra/ICallback;)V = SetResponseCallBack(Com.Liveperson.Infra.ICallback)
com/liveperson/api/request/GenerateURLForDownloadFile = Com.Liveperson.Api.Request.GenerateURLForDownloadFile
  <init>(Ljava/lang/String;)V = .ctor(string)
  GENERATE_URL_FOR_DOWNLOAD_FILE_TYPE = GenerateUrlForDownloadFileType
  RELATIVE_PATH = RelativePath
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/GenerateURLForUploadFile = Com.Liveperson.Api.Request.GenerateURLForUploadFile
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  FILE_SIZE = FileSize
  FILE_TYPE = FileType
  GENERATE_URL_FOR_UPLOAD_FILE_TYPE = GenerateUrlForUploadFileType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/GetClock = Com.Liveperson.Api.Request.GetClock
  <init>()V = .ctor()
  CURRENT_TIME = CurrentTime
  GET_CLOCK_TYPE = GetClockType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/GetUserProfile = Com.Liveperson.Api.Request.GetUserProfile
  <init>(Ljava/lang/String;)V = .ctor(string)
  BODY = Body
  GET_USER_PROFILE_TYPE = GetUserProfileType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/message/BasePublishMessage = Com.Liveperson.Api.Request.Message.BasePublishMessage
  <init>()V = .ctor()
  getMessageText()Ljava/lang/String; = MessageText
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
  getMessageTextWithoutSpecialChars(Ljava/lang/String;)Ljava/lang/String; = GetMessageTextWithoutSpecialChars(string)
com/liveperson/api/request/message/FilePublishMessage = Com.Liveperson.Api.Request.Message.FilePublishMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  CAPTION = Caption
  FILE_TYPE = FileType
  PREVIEW = Preview
  RELATIVE_PATH = RelativePath
  getCaption()Ljava/lang/String; = Caption
  getFileType()Ljava/lang/String; = FileType
  getMessage()Lorg/json/JSONObject; = Message
  getMessageText()Ljava/lang/String; = MessageText
  getPreview()Ljava/lang/String; = Preview
  getRelativePath()Ljava/lang/String; = RelativePath
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
com/liveperson/api/request/message/FormPublishMessage = Com.Liveperson.Api.Request.Message.FormPublishMessage
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  FORM_ID = FormId
  INVITATION_ID = InvitationId
  TITLE = Title
  getFormId()Ljava/lang/String; = FormId
  getFormTitle()Ljava/lang/String; = FormTitle
  getInvitationId()Ljava/lang/String; = InvitationId
  getMessage()Lorg/json/JSONObject; = Message
  getMessageText()Ljava/lang/String; = MessageText
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
com/liveperson/api/request/message/FormSubmissionPublishMessage = Com.Liveperson.Api.Request.Message.FormSubmissionPublishMessage
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  INVITATION_ID = InvitationId
  SUBMISSION_ID = SubmissionId
  getInvitationId()Ljava/lang/String; = InvitationId
  getMessage()Lorg/json/JSONObject; = Message
  getMessageText()Ljava/lang/String; = MessageText
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
  getmSubmissionId()Ljava/lang/String; = GetmSubmissionId()
com/liveperson/api/request/message/JsonPublishMessage = Com.Liveperson.Api.Request.Message.JsonPublishMessage
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getCaption()Ljava/lang/String; = Caption
  getMessage()Ljava/lang/String; = Message
  getMessageText()Ljava/lang/String; = MessageText
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
com/liveperson/api/request/message/PublishMessage = Com.Liveperson.Api.Request.Message.IPublishMessage
  getMessage()Ljava/lang/Object; = Message
com/liveperson/api/request/message/StructuredContentPublishMessage = Com.Liveperson.Api.Request.Message.StructuredContentPublishMessage
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/api/request/message/TextPublishMessage = Com.Liveperson.Api.Request.Message.TextPublishMessage
  <init>(Ljava/lang/String;)V = .ctor(string)
  getMessage()Ljava/lang/String; = Message
  getMessageText()Ljava/lang/String; = MessageText
  getType()Lcom/liveperson/api/request/message/BasePublishMessage$PublishMessageType; = Type
com/liveperson/api/request/PublishEvent = Com.Liveperson.Api.Request.PublishEvent
  <init>(Ljava/lang/String;Lcom/liveperson/api/request/message/PublishMessage;Lcom/liveperson/api/request/PublishEvent$Type;Lcom/liveperson/api/response/model/ContentType;Ljava/lang/String;)V = .ctor(string, Com.Liveperson.Api.Request.Message.IPublishMessage, Com.Liveperson.Api.Request.PublishEvent.Type, Com.Liveperson.Api.Response.Model.ContentType, string)
  <init>(Ljava/lang/String;Lcom/liveperson/api/request/PublishEvent$Type;Lcom/liveperson/infra/model/types/ChatState;)V = .ctor(string, Com.Liveperson.Api.Request.PublishEvent.Type, Com.Liveperson.Infra.Model.Types.ChatState)
  <init>(Ljava/lang/String;Lcom/liveperson/api/request/PublishEvent$Type;Ljava/lang/String;[ILcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = .ctor(string, Com.Liveperson.Api.Request.PublishEvent.Type, string, int[], Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
  CHAT_TYPE = ChatType
  DIALOG_ID = DialogId
  EVENT = Event
  MESSAGE = Message
  METADATA = Metadata
  PUBLISH_EVENT_TYPE = PublishEventType
  SEQUENCE = Sequence
  SEQUENCE_LIST = SequenceList
  STATUS = Status
  SUBSCRIPTION_ID = SubscriptionId
  TYPE = Type
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/QueryMessages = Com.Liveperson.Api.Request.QueryMessages
  <init>(Ljava/lang/String;IJJ)V = .ctor(string, int, long, long)
  BODY = Body
  DIALOG_ID = DialogId
  dialogId = DialogId
  EVENT = Event
  MAX_QUANTITY = MaxQuantity
  maxQuantity = MaxQuantity
  NEWER_THAN_SEQUENCE = NewerThanSequence
  newerThanSequence = NewerThanSequence
  OLDER_THAN_SEQUENCE = OlderThanSequence
  olderThanSequence = OlderThanSequence
  ORIGINATOR_ID = OriginatorId
  SEQUENCE = Sequence
  SEQUENCE1 = Sequence1
  SERVER_TIMESTAMP = ServerTimestamp
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/ReqBody = Com.Liveperson.Api.Request.ReqBody
  <init>()V = .ctor()
  REQ_BODY_TYPE = ReqBodyType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/RequestConversation = Com.Liveperson.Api.Request.RequestConversation
  <init>()V = .ctor()
  CONVERSATION_ID = ConversationId
  REQUEST_CONVERSATION_TYPE = RequestConversationType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/SetUserProfile = Com.Liveperson.Api.Request.SetUserProfile
  <init>(Lcom/liveperson/api/response/model/UserProfile;)V = .ctor(Com.Liveperson.Api.Response.Model.UserProfile)
  currentProfile = CurrentProfile
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/SubscribeExConversations = Com.Liveperson.Api.Request.SubscribeExConversations
  <init>(Ljava/lang/String;JJ[Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/String;)V = .ctor(string, long, long, string[], string, int, string[])
  agentIds = AgentIds
  brandId = BrandId
  consumerId = ConsumerId
  convState = ConvState
  maxETTR = MaxETTR
  maxLastUpdatedTime = MaxLastUpdatedTime
  minLastUpdatedTime = MinLastUpdatedTime
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/UnsubscribeExConversations = Com.Liveperson.Api.Request.UnsubscribeExConversations
  <init>(Ljava/lang/String;)V = .ctor(string)
  TAG = Tag
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/request/UpdateConversationField = Com.Liveperson.Api.Request.UpdateConversationField
  <init>(Ljava/lang/String;Ljava/lang/String;IILcom/liveperson/api/response/types/CsatStatus;)V = .ctor(string, string, int, int, Com.Liveperson.Api.Response.Types.CsatStatus)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/request/UpdateConversationField$ConversationState;)V = .ctor(string, string, Com.Liveperson.Api.Request.UpdateConversationField.ConversationState)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;I)V = .ctor(string, string, Com.Liveperson.Api.Response.Types.TTRType, int)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  CONVERSATION_CSAT = ConversationCsat
  CONVERSATION_CSAT_RATE = ConversationCsatRate
  CONVERSATION_CSAT_STATUS = ConversationCsatStatus
  CONVERSATION_CSAT_YESNO_VALUE = ConversationCsatYesnoValue
  CONVERSATION_FIELD = ConversationField
  CONVERSATION_ID = ConversationId
  conversationId = ConversationId
  CONVERSATION_STATE = ConversationState
  conversationState = ConversationState
  CONVERSATION_STATE_FIELD = ConversationStateField
  csatNumberOfStars = CsatNumberOfStars
  csatStatus = CsatStatus
  csatYesNoValue = CsatYesNoValue
  FIELD = Field
  field = Field
  PARTICIPANTS_CHANGE_FIELD = ParticipantsChangeField
  TTR = Ttr
  TTR_FIELD = TtrField
  ttrType = TtrType
  ttrValue = TtrValue
  type = Type
  UPDATE_CONVERSATION_FIELD_TYPE = UpdateConversationFieldType
  getMessageType()Ljava/lang/String; = MessageType
  toJson(Lorg/json/JSONObject;)V = ToJson(Org.Json.JSONObject)
com/liveperson/api/response/AbstractResponse = Com.Liveperson.Api.Response.AbstractResponse
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  code = Code
  GENERAL_INNER_RESPONSE = GeneralInnerResponse
  reqId = ReqId
com/liveperson/api/response/BaseGenerateURLResponse = Com.Liveperson.Api.Response.BaseGenerateURLResponse
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  QUERY_PARAMS = QueryParams
  queryParams = QueryParams
  RELATIVE_PATH = RelativePath
  relativePath = RelativePath
com/liveperson/api/response/events/ContentEventNotification = Com.Liveperson.Api.Response.Events.ContentEventNotification
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  dialogId = DialogId
  event = Event
  eventId = EventId
  originatorId = OriginatorId
  originatorMetadata = OriginatorMetadata
  sequence = Sequence
  serverTimestamp = ServerTimestamp
com/liveperson/api/response/events/ExConversationChangeNotification = Com.Liveperson.Api.Response.Events.ExConversationChangeNotification
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  body = Body
  CONVERSATION_CHANGE_NOTIFICATION_TYPE = ConversationChangeNotificationType
  getType()Ljava/lang/String; = Type
  getBody()Lcom/liveperson/api/response/events/ExConversationChangeNotification$Body; = GetBody()
  getResponseHandler(Lcom/liveperson/messaging/Messaging;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetResponseHandler(Com.Liveperson.Messaging.Messaging)
com/liveperson/api/response/events/MessagingEventNotification = Com.Liveperson.Api.Response.Events.MessagingEventNotification
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getBody()Ljava/util/ArrayList; = Body
  getTAG()Ljava/lang/String; = TAG
  getType()Ljava/lang/String; = Type
com/liveperson/api/response/IOnUrlReady = Com.Liveperson.Api.Response.IOnUrlReady
  onUrlError(Ljava/lang/String;)V = OnUrlError(string)
  onUrlReady(Lcom/liveperson/api/response/BaseGenerateURLResponse;)V = OnUrlReady(Com.Liveperson.Api.Response.BaseGenerateURLResponse)
com/liveperson/api/response/model/Change = Com.Liveperson.Api.Response.Model.Change
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  result = Result
  type = Type
com/liveperson/api/response/model/CobrowseDialog = Com.Liveperson.Api.Response.Model.CobrowseDialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  metaData = MetaData
com/liveperson/api/response/model/ContentType = Com.Liveperson.Api.Response.Model.ContentType
  application_json = ApplicationJson
  forms_secure_invitation = FormsSecureInvitation
  forms_secure_submission = FormsSecureSubmission
  hosted_file = HostedFile
  text_html = TextHtml
  text_plain = TextPlain
  text_structured_content = TextStructuredContent
  isFile()Z = IsFile
  isFormInvitation()Z = IsFormInvitation
  isFormSubmission()Z = IsFormSubmission
  isHtml()Z = IsHtml
  isSimpleText()Z = IsSimpleText
  getText()Ljava/lang/String; = Text
  fromString(Ljava/lang/String;)Lcom/liveperson/api/response/model/ContentType; = FromString(string)
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/model/ContentType; = ValueOf(string)
  values()[Lcom/liveperson/api/response/model/ContentType; = Values()
com/liveperson/api/response/model/ConversationHistoryDetails = Com.Liveperson.Api.Response.Model.ConversationHistoryDetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  closeReason = CloseReason
  csat = Csat
  endTs = EndTs
  participants = Participants
  startTs = StartTs
  state = State
com/liveperson/api/response/model/ConversationINCADetails = Com.Liveperson.Api.Response.Model.ConversationINCADetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  conversationId = ConversationId
com/liveperson/api/response/model/ConversationUMSDetails = Com.Liveperson.Api.Response.Model.ConversationUMSDetails
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  delay = Delay
  dialogs = Dialogs
  manualETTR = ManualETTR
  metaDataLastUpdateTs = MetaDataLastUpdateTs
  skillId = SkillId
  ttr = Ttr
  getCalculatedTTR()J = CalculatedTTR
com/liveperson/api/response/model/Delay = Com.Liveperson.Api.Response.Model.Delay
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  tillWhen = TillWhen
  type = Type
com/liveperson/api/response/model/DeliveryStatusUpdateInfo = Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo
  <init>(Lorg/json/JSONArray;)V = .ctor(Org.Json.JSONArray)
  getMetadata()Lorg/json/JSONArray; = Metadata
com/liveperson/api/response/model/Dialog = Com.Liveperson.Api.Response.Model.Dialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  dialogId = DialogId
  dialogType = DialogType
  open = Open
  participants = Participants
com/liveperson/api/response/model/Event = Com.Liveperson.Api.Response.Model.Event
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  chatState = ChatState
  CONTENT = Content
  contentType = ContentType
  message = Message
  quickRepliesJsonString = QuickRepliesJsonString
  sequenceList = SequenceList
  status = Status
  type = Type
  extractLinks(Ljava/lang/String;)[Ljava/lang/String; = ExtractLinks(string)
com/liveperson/api/response/model/MultiDialog = Com.Liveperson.Api.Response.Model.MultiDialog
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TYPE = Type
  getType()Lcom/liveperson/api/response/model/MultiDialog$ChannelTypes; = Type
  create(Lorg/json/JSONObject;)Lcom/liveperson/api/response/model/Dialog; = Create(Org.Json.JSONObject)
com/liveperson/api/response/model/OriginatorMetadata = Com.Liveperson.Api.Response.Model.OriginatorMetadata
  <init>()V = .ctor()
  mId = MId
  mRole = MRole
  TAG = Tag
  fromJson(Lorg/json/JSONObject;)Lcom/liveperson/api/response/model/OriginatorMetadata; = FromJson(Org.Json.JSONObject)
com/liveperson/api/response/model/Participants = Com.Liveperson.Api.Response.Model.Participants
  <init>()V = .ctor()
  ALL_AGENTS = AllAgents
  ASSIGNED_AGENT = AssignedAgent
  CONSUMER = Consumer
  CONTROLLER = Controller
  MANAGER = Manager
  OTHER_AGENTS = OtherAgents
  READER = Reader
  add([Ljava/lang/String;Lcom/liveperson/api/response/model/Participants$ParticipantRole;)V = Add(string[], Com.Liveperson.Api.Response.Model.Participants.ParticipantRole)
com/liveperson/api/response/model/QueryParams = Com.Liveperson.Api.Response.Model.QueryParams
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  EXPIRE_TIME = ExpireTime
  expireTime = ExpireTime
  TEMP_URL = TempUrl
  tempURL = TempURL
  appendQueryParameter(Landroid/net/Uri$Builder;)V = AppendQueryParameter(Android.Net.Uri.Builder)
com/liveperson/api/response/model/Result = Com.Liveperson.Api.Response.Model.Result
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  conversationDetails = ConversationDetails
  convId = ConvId
  effectiveTTR = EffectiveTTR
com/liveperson/api/response/model/Ttr = Com.Liveperson.Api.Response.Model.Ttr
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  ttrType = TtrType
  value = Value
com/liveperson/api/response/model/UserProfile = Com.Liveperson.Api.Response.Model.UserProfile
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  AVATAR_URL = AvatarUrl
  BACKGND_IMG_URI = BackgndImgUri
  CERT_NAME = CertName
  DESCRIPTION = Description
  FIRST_NAME = FirstName
  LAST_NAME = LastName
  MAIL = Mail
  MOBILE_NUM = MobileNum
  NICKNAME = Nickname
  PRIVATE_DATA = PrivateData
  PUSH_NOTIFICATION_DATA = PushNotificationData
  ROLE = Role
  SERVICE_NAME = ServiceName
  TOKEN = Token
  USER_ID = UserId
  getAvatarUrl()Ljava/lang/String; = AvatarUrl
  setAvatarUrl(Ljava/lang/String;)V = AvatarUrl
  getBackgndImgUri()Ljava/lang/String; = BackgndImgUri
  setBackgndImgUri(Ljava/lang/String;)V = BackgndImgUri
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getEmail()Ljava/lang/String; = Email
  setEmail(Ljava/lang/String;)V = Email
  getFirstName()Ljava/lang/String; = FirstName
  setFirstName(Ljava/lang/String;)V = FirstName
  getFullName()Ljava/lang/String; = FullName
  getLastName()Ljava/lang/String; = LastName
  setLastName(Ljava/lang/String;)V = LastName
  getLocalId()J = LocalId
  setLocalId(J)V = LocalId
  getNickname()Ljava/lang/String; = Nickname
  setNickname(Ljava/lang/String;)V = Nickname
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getRequestId()J = RequestId
  setRequestId(J)V = RequestId
  getRole()Ljava/lang/String; = Role
  setRole(Ljava/lang/String;)V = Role
  addToJson(Lorg/json/JSONObject;)V = AddToJson(Org.Json.JSONObject)
  getPrivateData()Lcom/liveperson/api/response/model/UserProfile$PrivateData; = GetPrivateData()
  getUserType()Lcom/liveperson/api/response/model/UserProfile$UserType; = GetUserType()
  setMobileNumber(Ljava/lang/String;)V = SetMobileNumber(string)
  setOriginatorID(Ljava/lang/String;)V = SetOriginatorID(string)
  setPrivateData(Lcom/liveperson/api/response/model/UserProfile$PrivateData;)V = SetPrivateData(Com.Liveperson.Api.Response.Model.UserProfile.PrivateData)
  setUserType(Lcom/liveperson/api/response/model/UserProfile$UserType;)V = SetUserType(Com.Liveperson.Api.Response.Model.UserProfile.UserType)
com/liveperson/api/response/types/CloseReason = Com.Liveperson.Api.Response.Types.CloseReason
  AGENT = Agent
  CONSUMER = Consumer
  SYSTEM = System
  TIMEOUT = Timeout
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/CloseReason; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/CloseReason; = Values()
com/liveperson/api/response/types/ConversationState = Com.Liveperson.Api.Response.Types.ConversationState
  CLOSE = Close
  LOCKED = Locked
  OPEN = Open
  PENDING = Pending
  QUEUED = Queued
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/ConversationState; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/ConversationState; = Values()
com/liveperson/api/response/types/CSAT = Com.Liveperson.Api.Response.Types.CSAT
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  csatRate = CsatRate
  csatResolutionConfirmation = CsatResolutionConfirmation
  csatStatus = CsatStatus
  isShowedCsat()Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS; = IsShowedCsat()
com/liveperson/api/response/types/CsatStatus = Com.Liveperson.Api.Response.Types.CsatStatus
  EMPTY = Empty
  FILLED = Filled
  PARTIALLY_FILLED = PartiallyFilled
  SKIPPED = Skipped
  getValue()Ljava/lang/String; = Value
  get(Ljava/lang/String;)Lcom/liveperson/api/response/types/CsatStatus; = Get(string)
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/CsatStatus; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/CsatStatus; = Values()
com/liveperson/api/response/types/DeliveryStatus = Com.Liveperson.Api.Response.Types.DeliveryStatus
  ABORTED = Aborted
  ACCEPT = Accept
  ACTION = Action
  ERROR = Error
  READ = Read
  SUBMITTED = Submitted
  VIEWED = Viewed
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/DeliveryStatus; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/DeliveryStatus; = Values()
com/liveperson/api/response/types/TTRType = Com.Liveperson.Api.Response.Types.TTRType
  CUSTOM = Custom
  NIGHT = Night
  NORMAL = Normal
  PRIORITIZED = Prioritized
  URGENT = Urgent
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/response/types/TTRType; = ValueOf(string)
  values()[Lcom/liveperson/api/response/types/TTRType; = Values()
com/liveperson/api/sdk/LPConversationData = Com.Liveperson.Api.Sdk.LPConversationData
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/String;)V = .ctor(string)
  CREATOR = Creator
  getCloseReason()Lcom/liveperson/api/response/types/CloseReason; = CloseReason
  setCloseReason(Lcom/liveperson/api/response/types/CloseReason;)V = CloseReason
  getId()Ljava/lang/String; = Id
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/api/sdk/PermissionType = Com.Liveperson.Api.Sdk.PermissionType
  PHOTO_SHARING = PhotoSharing
  VOICE_RECORDING = VoiceRecording
  valueOf(Ljava/lang/String;)Lcom/liveperson/api/sdk/PermissionType; = ValueOf(string)
  values()[Lcom/liveperson/api/sdk/PermissionType; = Values()
com/liveperson/infra/BadArgumentException = Com.Liveperson.Infra.BadArgumentException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/infra/BuildConfig = Com.Liveperson.Infra.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/infra/callbacks/InitLivePersonCallBack = Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack
  onInitFailed(Ljava/lang/Exception;)V = OnInitFailed(Java.Lang.Exception)
  onInitSucceed()V = OnInitSucceed()
com/liveperson/infra/callbacks/LogoutLivePersonCallBack = Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack
  onLogoutFailed(Ljava/lang/Exception;)V = OnLogoutFailed(Java.Lang.Exception)
  onLogoutSucceed()V = OnLogoutSucceed()
com/liveperson/infra/callbacks/ShutDownLivePersonCallBack = Com.Liveperson.Infra.Callbacks.IShutDownLivePersonCallBack
  onShutDownFailed(Ljava/lang/Exception;)V = OnShutDownFailed(Java.Lang.Exception)
  onShutDownSucceed()V = OnShutDownSucceed()
com/liveperson/infra/CampaignInfo = Com.Liveperson.Infra.CampaignInfo
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Java.Lang.Long, Java.Lang.Long, string, string, string)
  CREATOR = Creator
  getCampaignId()Ljava/lang/Long; = CampaignId
  setCampaignId(Ljava/lang/Long;)V = CampaignId
  getContextId()Ljava/lang/String; = ContextId
  setContextId(Ljava/lang/String;)V = ContextId
  getEngagementId()Ljava/lang/Long; = EngagementId
  setEngagementId(Ljava/lang/Long;)V = EngagementId
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getVisitorId()Ljava/lang/String; = VisitorId
  setVisitorId(Ljava/lang/String;)V = VisitorId
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/Clearable = Com.Liveperson.Infra.IClearable
  clear()V = Clear()
com/liveperson/infra/Command = Com.Liveperson.Infra.ICommand
  execute()V = Execute()
com/liveperson/infra/configuration/ConfigurableResource = Com.Liveperson.Infra.Configuration.ConfigurableResource
  <init>(ILjava/lang/String;Lcom/liveperson/infra/configuration/ConfigurableResource$ResourceType;)V = .ctor(int, string, Com.Liveperson.Infra.Configuration.ConfigurableResource.ResourceType)
  getResourceId()I = ResourceId
  getResourceName()Ljava/lang/String; = ResourceName
  getResourceType()Lcom/liveperson/infra/configuration/ConfigurableResource$ResourceType; = GetResourceType()
com/liveperson/infra/configuration/Configuration = Com.Liveperson.Infra.Configuration.Configuration
  <init>()V = .ctor()
  getBoolean(I)Z = GetBoolean(int)
  getColor(I)I = GetColor(int)
  getDimension(I)F = GetDimension(int)
  getDrawable(I)Landroid/graphics/drawable/Drawable; = GetDrawable(int)
  getInteger(I)I = GetInteger(int)
  getString(I)Ljava/lang/String; = GetString(int)
  scanXmlIdsAndNames(Ljava/lang/Class;)Ljava/util/HashMap; = ScanXmlIdsAndNames(Java.Lang.Class)
  set(IZ)V = Set(int, bool)
  set(IF)V = Set(int, float)
  set(II)V = Set(int, int)
  set(ILjava/lang/String;)V = Set(int, string)
com/liveperson/infra/configuration/LptagEnvironment = Com.Liveperson.Infra.Configuration.LptagEnvironment
  <init>()V = .ctor()
  LPTAG_ALPHA_DOMAIN = LptagAlphaDomain
  LPTAG_PRODUCTION_DOMAIN = LptagProductionDomain
  LPTAG_QA_DOMAIN = LptagQaDomain
  getEnvironment()Lcom/liveperson/infra/configuration/LptagEnvironment$Env; = Environment
  setEnvironment(Lcom/liveperson/infra/configuration/LptagEnvironment$Env;)V = Environment
  getLptagDomain()Ljava/lang/String; = LptagDomain
com/liveperson/infra/controller/AudioPlayable = Com.Liveperson.Infra.Controller.IAudioPlayable
  playVoiceMessage(Ljava/lang/String;)V = PlayVoiceMessage(string)
  stopPlaying()V = StopPlaying()
com/liveperson/infra/controller/AudioRecordable = Com.Liveperson.Infra.Controller.IAudioRecordable
  cancelRecording()V = CancelRecording()
com/liveperson/infra/controller/DBEncryptionHelper = Com.Liveperson.Infra.Controller.DBEncryptionHelper
  <init>()V = .ctor()
  decrypt(Lcom/liveperson/infra/utils/EncryptionVersion;Ljava/lang/String;)Ljava/lang/String; = Decrypt(Com.Liveperson.Infra.Utils.EncryptionVersion, string)
  encrypt(Lcom/liveperson/infra/utils/EncryptionVersion;Ljava/lang/String;)Ljava/lang/String; = Encrypt(Com.Liveperson.Infra.Utils.EncryptionVersion, string)
com/liveperson/infra/controller/DBEncryptionKeyHelper = Com.Liveperson.Infra.Controller.DBEncryptionKeyHelper
  <init>(Ljava/lang/String;)V = .ctor(string)
  clear()V = Clear()
  getAppEncryptionVersion(Landroid/content/Context;)Lcom/liveperson/infra/utils/EncryptionVersion; = GetAppEncryptionVersion(Android.Content.Context)
com/liveperson/infra/controller/PlayingAudioManager = Com.Liveperson.Infra.Controller.PlayingAudioManager
  <init>()V = .ctor()
  getMCurrentlyPlayingList()Ljava/util/Set; = MCurrentlyPlayingList
  addPlayingAndStopOthers(Lcom/liveperson/infra/controller/AudioPlayable;)V = AddPlayingAndStopOthers(Com.Liveperson.Infra.Controller.IAudioPlayable)
  removePlaying(Lcom/liveperson/infra/controller/AudioPlayable;)V = RemovePlaying(Com.Liveperson.Infra.Controller.IAudioPlayable)
  stopAllCurrentlyPlaying()V = StopAllCurrentlyPlaying()
  stopPlaying(Lcom/liveperson/infra/controller/AudioPlayable;)V = StopPlaying(Com.Liveperson.Infra.Controller.IAudioPlayable)
com/liveperson/infra/ConversationViewParams = Com.Liveperson.Infra.ConversationViewParams
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Z)V = .ctor(bool)
  CREATOR = Creator
  getCampaignInfo()Lcom/liveperson/infra/CampaignInfo; = CampaignInfo
  getHistoryConversationMaxDaysType()Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = HistoryConversationMaxDaysType
  getHistoryConversationsMaxDays()I = HistoryConversationsMaxDays
  getHistoryConversationsStateToDisplay()Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = HistoryConversationsStateToDisplay
  isFilterOn()Z = IsFilterOn
  isViewOnlyMode()Z = IsViewOnlyMode
  clearCampaignInfo()V = ClearCampaignInfo()
  describeContents()I = DescribeContents()
  setCampaignInfo(Lcom/liveperson/infra/CampaignInfo;)Lcom/liveperson/infra/ConversationViewParams; = SetCampaignInfo(Com.Liveperson.Infra.CampaignInfo)
  setHistoryConversationMaxDaysType(Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType;)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationMaxDaysType(Com.Liveperson.Infra.LPConversationHistoryMaxDaysDateType)
  setHistoryConversationsMaxDays(I)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationsMaxDays(int)
  setHistoryConversationsStateToDisplay(Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay;)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationsStateToDisplay(Com.Liveperson.Infra.LPConversationsHistoryStateToDisplay)
  setReadOnlyMode(Z)Lcom/liveperson/infra/ConversationViewParams; = SetReadOnlyMode(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/database/BaseDBRepository = Com.Liveperson.Infra.Database.BaseDBRepository
  <init>(Ljava/lang/String;)V = .ctor(string)
  getDB()Lcom/liveperson/infra/database/DBUtilities; = DB
com/liveperson/infra/database/DataBaseCommand = Com.Liveperson.Infra.Database.DataBaseCommand
  <init>(Lcom/liveperson/infra/database/DataBaseCommand$QueryCommand;)V = .ctor(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCommand)
  mPostQueryOnBackground = MPostQueryOnBackground
  mPostQueryOnUI = MPostQueryOnUI
  mPreQueryOnBackground = MPreQueryOnBackground
  create(Lcom/liveperson/infra/database/DataBaseCommand$QueryCommand;)Lcom/liveperson/infra/database/DataBaseCommand; = Create(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCommand)
  execute()V = Execute()
  executeSynchronously()Ljava/lang/Object; = ExecuteSynchronously()
  setPostQueryOnBackground(Lcom/liveperson/infra/database/DataBaseCommand$QueryCallback;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPostQueryOnBackground(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCallback)
  setPostQueryOnUI(Lcom/liveperson/infra/database/DataBaseCommand$QueryCallback;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPostQueryOnUI(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCallback)
  setPreQueryOnBackground(Ljava/lang/Runnable;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPreQueryOnBackground(Java.Lang.IRunnable)
com/liveperson/infra/database/DataBaseExecutor = Com.Liveperson.Infra.Database.DataBaseExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;)V = Execute(Java.Lang.IRunnable)
  killAll(Lcom/liveperson/infra/ICallback;)V = KillAll(Com.Liveperson.Infra.ICallback)
com/liveperson/infra/database/DatabaseManager = Com.Liveperson.Infra.Database.DatabaseManager
  getBrandStructure()Lcom/liveperson/infra/database/tables/BrandProfileTable; = BrandStructure
  getConversationsTable()Lcom/liveperson/infra/database/tables/ConversationsTable; = ConversationsTable
  getInstance()Lcom/liveperson/infra/database/DatabaseManager; = Instance
  getMessagesTable()Lcom/liveperson/infra/database/tables/MessagesTable; = MessagesTable
  getUsersStructure()Lcom/liveperson/infra/database/tables/UsersTable; = UsersStructure
  clear()V = Clear()
  registerTable(Lcom/liveperson/infra/database/tables/BaseTable;)V = RegisterTable(Com.Liveperson.Infra.Database.Tables.IBaseTable)
  shutDown()V = ShutDown()
com/liveperson/infra/database/DBUtilities = Com.Liveperson.Infra.Database.DBUtilities
  ROW_UPDATED = RowUpdated
  insert(Landroid/content/ContentValues;)J = Insert(Android.Content.ContentValues)
  insertOrUpdate(Landroid/content/ContentValues;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)J = InsertOrUpdate(Android.Content.ContentValues, Android.Content.ContentValues, string, string[])
  insertWithOnConflict(Landroid/content/ContentValues;)J = InsertWithOnConflict(Android.Content.ContentValues)
  query([Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(string[], string, string[], string, string, string)
  query([Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(string[], string, string[], string, string, string, string)
  rawQuery(Ljava/lang/String;[Ljava/lang/Object;)Landroid/database/Cursor; = RawQuery(string, params Java.Lang.Object[])
  removeAll(Ljava/lang/String;[Ljava/lang/String;)I = RemoveAll(string, string[])
  replace(Landroid/content/ContentValues;)J = Replace(Android.Content.ContentValues)
  runTransaction(Ljava/util/List;)V = RunTransaction(System.Collections.Generic.IList<Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand>)
  update(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I = Update(Android.Content.ContentValues, string, string[])
com/liveperson/infra/database/tables/BaseTable = Com.Liveperson.Infra.Database.Tables.IBaseTable
  KEY_ID = KeyId
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/BrandProfileTable = Com.Liveperson.Infra.Database.Tables.BrandProfileTable
  <init>()V = .ctor()
  BRAND_TABLE = BrandTable
  KEY_BIO = KeyBio
  KEY_BRAND_ID = KeyBrandId
  KEY_COVER_IMAGE = KeyCoverImage
  KEY_IS_SAVED = KeyIsSaved
  KEY_LOGO_IMAGE = KeyLogoImage
  KEY_NAME = KeyName
  KEY_SKILL = KeySkill
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/ConversationsTable = Com.Liveperson.Infra.Database.Tables.ConversationsTable
  <init>()V = .ctor()
  CONVERSATION_TABLE = ConversationTable
  KEY_ASSIGNED_AGENT_ID = KeyAssignedAgentId
  KEY_BRAND_ID = KeyBrandId
  KEY_CLOSE_REASON = KeyCloseReason
  KEY_CLOSE_TIME = KeyCloseTime
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_LAST_SERVER_SEQUENCE = KeyLastServerSequence
  KEY_REQUEST_ID = KeyRequestId
  KEY_SHOWED_CSAT = KeyShowedCsat
  KEY_START_TIME = KeyStartTime
  KEY_STATE = KeyState
  KEY_TARGET_ID = KeyTargetId
  KEY_TTR_TYPE = KeyTtrType
  KEY_UNREAD_MESSAGES = KeyUnreadMessages
  KEY_UPDATE_IN_PROGRESS_SEMAPHORE = KeyUpdateInProgressSemaphore
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/FilesTable = Com.Liveperson.Infra.Database.Tables.filesTable
  <init>()V = .ctor()
  FILES_TABLE = FilesTable
  KEY_FILE_TYPE = KeyFileType
  KEY_ID_AS_VALUE = KeyIdAsValue
  KEY_LOAD_STATUS = KeyLoadStatus
  KEY_LOCAL_URL = KeyLocalUrl
  KEY_LOCAL_URL_UPDATE_TIMESTAMP = KeyLocalUrlUpdateTimestamp
  KEY_PREVIEW = KeyPreview
  KEY_RELATED_MESSAGE_ROW_ID = KeyRelatedMessageRowId
  KEY_SWIFT_PATH = KeySwiftPath
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/MessagesTable = Com.Liveperson.Infra.Database.Tables.messagesTable
  <init>()V = .ctor()
  ENCRYPTION_VERSION_CURSOR_AS_VALUE = EncryptionVersionCursorAsValue
  KEY_CONTENT_TYPE = KeyContentType
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_ENCRYPTION_VERSION = KeyEncryptionVersion
  KEY_EVENT_ID = KeyEventId
  KEY_MESSAGE_TYPE = KeyMessageType
  KEY_ORIGINATOR_ID = KeyOriginatorId
  KEY_SERVER_SEQUENCE = KeyServerSequence
  KEY_STATUS = KeyStatus
  KEY_TEXT = KeyText
  KEY_TIMESTAMP = KeyTimestamp
  MESSAGES_TABLE = MessagesTable
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/UsersTable = Com.Liveperson.Infra.Database.Tables.usersTable
  <init>()V = .ctor()
  ENCRYPTION_VERSION_CURSOR_AS_VALUE = EncryptionVersionCursorAsValue
  KEY_BRAND_ID = KeyBrandId
  KEY_COVER_IMAGE = KeyCoverImage
  KEY_DESCRIPTION = KeyDescription
  KEY_EMAIL = KeyEmail
  KEY_ENCRYPTION_VERSION = KeyEncryptionVersion
  KEY_FIRST_NAME = KeyFirstName
  KEY_LAST_NAME = KeyLastName
  KEY_NICKNAME = KeyNickname
  KEY_ORIGINATOR_ID = KeyOriginatorId
  KEY_PHONE_NUMBER = KeyPhoneNumber
  KEY_PROFILE_IMAGE = KeyProfileImage
  KEY_REQUEST_ID = KeyRequestId
  KEY_USER_TYPE = KeyUserType
  USERS_TABLE = UsersTable
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/transaction_helper/InsertOrUpdateSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.InsertOrUpdateSQLCommand
  <init>(Landroid/content/ContentValues;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Android.Content.ContentValues, Android.Content.ContentValues, string, string[])
  getContentValuesForInsert()Landroid/content/ContentValues; = ContentValuesForInsert
  getContentValuesForUpdate()Landroid/content/ContentValues; = ContentValuesForUpdate
com/liveperson/infra/database/transaction_helper/InsertSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.InsertSQLCommand
  <init>(Landroid/content/ContentValues;)V = .ctor(Android.Content.ContentValues)
  getType()I = Type
com/liveperson/infra/database/transaction_helper/SQLiteCommand = Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand
  <init>(Landroid/content/ContentValues;)V = .ctor(Android.Content.ContentValues)
  mListener = MListener
  getContentValues()Landroid/content/ContentValues; = ContentValues
  getType()I = Type
  onInserted(J)V = OnInserted(long)
  setListener(Lcom/liveperson/infra/database/transaction_helper/SQLiteCommand$SQLiteCommandListener;)V = SetListener(Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand.ISQLiteCommandListener)
com/liveperson/infra/database/transaction_helper/UpdateSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.UpdateSQLCommand
  <init>(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Android.Content.ContentValues, string, string[])
  getType()I = Type
  getUpdateWhereClause()Ljava/lang/String; = UpdateWhereClause
  getUpdateWhereArgs()[Ljava/lang/String; = GetUpdateWhereArgs()
com/liveperson/infra/ForegroundService = Com.Liveperson.Infra.ForegroundService
  SCREEN_FOREGROUND_ACTION = ScreenForegroundAction
  SCREEN_FOREGROUND_EXTRA_BRAND_ID = ScreenForegroundExtraBrandId
  SCREEN_FOREGROUND_EXTRA_IS_FOREGROUND = ScreenForegroundExtraIsForeground
  SCREEN_FOREGROUND_EXTRA_TARGET_ID = ScreenForegroundExtraTargetId
  getForegroundBrandId()Ljava/util/HashSet; = ForegroundBrandId
  getInstance()Lcom/liveperson/infra/ForegroundService; = Instance
  isBrandForeground()Z = IsBrandForeground
  isBrandForeground(Ljava/lang/String;)Z = InvokeIsBrandForeground(string)
  isTargetForeground(Ljava/lang/String;)Z = IsTargetForeground(string)
  register(Ljava/lang/String;Ljava/lang/String;)V = Register(string, string)
  restart()V = Restart()
  shutDown()V = ShutDown()
  unregisterAll()V = UnregisterAll()
  unregisterBrand(Ljava/lang/String;)V = UnregisterBrand(string)
  unregisterTarget(Ljava/lang/String;)V = UnregisterTarget(string)
com/liveperson/infra/ForegroundServiceInterface = Com.Liveperson.Infra.IForegroundServiceInterface
  getForegroundBrandId()Ljava/util/HashSet; = ForegroundBrandId
  isBrandForeground()Z = IsBrandForeground
  isBrandForeground(Ljava/lang/String;)Z = InvokeIsBrandForeground(string)
  isTargetForeground(Ljava/lang/String;)Z = IsTargetForeground(string)
  register(Ljava/lang/String;Ljava/lang/String;)V = Register(string, string)
  unregisterAll()V = UnregisterAll()
  unregisterBrand(Ljava/lang/String;)V = UnregisterBrand(string)
  unregisterTarget(Ljava/lang/String;)V = UnregisterTarget(string)
com/liveperson/infra/handler/NotificationHandler = Com.Liveperson.Infra.Handler.NotificationHandler
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  <init>(Ljava/lang/String;Landroid/content/Context;Ljava/lang/Class;)V = .ctor(string, Android.Content.Context, Java.Lang.Class)
  <init>(Ljava/lang/String;Landroid/content/Context;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, Android.Content.Context, Java.Lang.Class, string, string)
  createForegroundServiceNotificationBuilder()Landroid/app/Notification$Builder; = CreateForegroundServiceNotificationBuilder()
  hideNotification(Landroid/content/Context;Ljava/lang/String;)V = HideNotification(Android.Content.Context, string)
  setAutoCancel(Z)Lcom/liveperson/infra/handler/NotificationHandler; = SetAutoCancel(bool)
  setIconResourceId(I)Lcom/liveperson/infra/handler/NotificationHandler; = SetIconResourceId(int)
  setNotificationDefaults(I)Lcom/liveperson/infra/handler/NotificationHandler; = SetNotificationDefaults(int)
  setPendingIntent(Landroid/app/PendingIntent;)Lcom/liveperson/infra/handler/NotificationHandler; = SetPendingIntent(Android.App.PendingIntent)
  showNotification()V = ShowNotification()
com/liveperson/infra/ICallback = Com.Liveperson.Infra.ICallback
  onError(Ljava/lang/Throwable;)V = OnError(Java.Lang.Object)
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
com/liveperson/infra/IConfiguration = Com.Liveperson.Infra.IConfigurationNew
  mFeaturesMap = MFeaturesMap
com/liveperson/infra/IDisposable = Com.Liveperson.Infra.IDisposable
  dispose()V = Dispose()
com/liveperson/infra/Infra = Com.Liveperson.Infra.Infra
  CLEAR_HISTORY_SHOW_CONFIRM_DIALOG = ClearHistoryShowConfirmDialog
  CONTEXTUAL_MENU_ON_TOOLBAR = ContextualMenuOnToolbar
  DISABLE_TTR_POPUP = DisableTtrPopup
  FEATURES_CONFIGURATION = FeaturesConfiguration
  instance = Instance
  KEY_AUTH_KEY = KeyAuthKey
  KEY_BRAND_ID = KeyBrandId
  KEY_READ_ONLY = KeyReadOnly
  KEY_TARGET_ID = KeyTargetId
  KEY_VIEW_PARAMS = KeyViewParams
  SDK_VERSION = SdkVersion
  SHOULD_USE_CONFIGURATION = ShouldUseConfiguration
  SHOW_AGENT_DETAILS_CSAT = ShowAgentDetailsCsat
  SHOW_CSAT_THANK_YOU = ShowCsatThankYou
  SHOW_FEEDBACK = ShowFeedback
  SHOW_TIMESTAMP_IN_TTR_NOTIFICATION = ShowTimestampInTtrNotification
  SHOW_YES_NO_QUESTION = ShowYesNoQuestion
  TTR_MESSAGE_OFF_HOURS_ENABLED = TtrMessageOffHoursEnabled
  getApplicationContext()Landroid/content/Context; = ApplicationContext
  getApplicationHandler()Landroid/os/Handler; = ApplicationHandler
  getDbEncryptionKeyHelper()Lcom/liveperson/infra/controller/DBEncryptionKeyHelper; = DbEncryptionKeyHelper
  getFileProviderAuthorityPrefix()Ljava/lang/String; = FileProviderAuthorityPrefix
  getHostVersion()Ljava/lang/String; = HostVersion
  isInitialized()Z = IsInitialized
  getLoggos()Lcom/liveperson/infra/log/logreporter/loggos/Loggos; = Loggos
  getLptagEnvironment()Lcom/liveperson/infra/configuration/LptagEnvironment; = LptagEnvironment
  clear()V = Clear()
  init(Landroid/content/Context;Lcom/liveperson/infra/sdkstatemachine/init/InfraInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  logout(Landroid/content/Context;Lcom/liveperson/infra/sdkstatemachine/init/InfraInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  postOnMainThread(Ljava/lang/Runnable;)V = PostOnMainThread(Java.Lang.IRunnable)
  registerToNetworkChanges()V = RegisterToNetworkChanges()
  restart()V = Restart()
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterToNetworkChanges()V = UnregisterToNetworkChanges()
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/Infra; = ValueOf(string)
  values()[Lcom/liveperson/infra/Infra; = Values()
com/liveperson/infra/InitLivePersonProperties = Com.Liveperson.Infra.InitLivePersonProperties
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/MonitoringInitParams;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, Com.Liveperson.Infra.MonitoringInitParams, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  getAppId()Ljava/lang/String; = AppId
  getBrandId()Ljava/lang/String; = BrandId
  getInitCallBack()Lcom/liveperson/infra/callbacks/InitLivePersonCallBack; = InitCallBack
  setInitCallBack(Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = InitCallBack
  isMonitoringParamsValid()Z = IsMonitoringParamsValid
  getMonitoringInitParams()Lcom/liveperson/infra/MonitoringInitParams; = MonitoringInitParams
  isValid(Lcom/liveperson/infra/InitLivePersonProperties;)Z = IsValid(Com.Liveperson.Infra.InitLivePersonProperties)
com/liveperson/infra/InternetConnectionService = Com.Liveperson.Infra.InternetConnectionService
  BROADCAST_INTERNET_CONNECTION_CONNECTED = BroadcastInternetConnectionConnected
  BROADCAST_INTERNET_CONNECTION_DISCONNECTED = BroadcastInternetConnectionDisconnected
  isNetworkAvailable()Z = IsNetworkAvailable
  registeredReceiver()V = RegisteredReceiver()
  shutDown()V = ShutDown()
  unRegisteredReceiver()V = UnRegisteredReceiver()
com/liveperson/infra/IPermissionCallback = Com.Liveperson.Infra.IPermissionCallback
  onPermissionsDenied()V = OnPermissionsDenied()
  onPermissionsGranted()V = OnPermissionsGranted()
com/liveperson/infra/LivePersonConfiguration = Com.Liveperson.Infra.LivePersonConfiguration
  <init>(Ljava/util/HashMap;)V = .ctor(System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
com/liveperson/infra/LocalBroadcastReceiver = Com.Liveperson.Infra.LocalBroadcastReceiver
  register()V = Register()
  unregister()V = Unregister()
com/liveperson/infra/log/DefaultAndroidLogger = Com.Liveperson.Infra.Log.DefaultAndroidLogger
  <init>()V = .ctor()
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, string, Java.Lang.Throwable)
com/liveperson/infra/log/ILogger = Com.Liveperson.Infra.Log.ILogger
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, string, Java.Lang.Throwable)
com/liveperson/infra/log/logreporter/loggos/Loggos = Com.Liveperson.Infra.Log.Logreporter.Loggos.Loggos
  <init>()V = .ctor()
  CERTIFICATE_ERROR_ACTION = CertificateErrorAction
  PREFS_KEY_LOGGOS_DOMAIN = PrefsKeyLoggosDomain
  PREFS_KEY_LOGGOS_TARGETID = PrefsKeyLoggosTargetid
  TAG = Tag
  getDomain()Ljava/lang/String; = Domain
  setDomain(Ljava/lang/String;)V = Domain
  isShouldSendError()Z = IsShouldSendError
  getTargetId()Ljava/lang/String; = TargetId
  setTargetId(Ljava/lang/String;)V = TargetId
  addMessage(Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage;)V = AddMessage(Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage)
  init(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = Init(string, string, System.Collections.Generic.IList<string>)
  onError(Ljava/util/List;Ljava/lang/Exception;)V = OnError(System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, Java.Lang.Exception)
  onSuccess()V = OnSuccess()
  sendMessageImmediately(Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage;)V = SendMessageImmediately(Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage)
  shutdown()V = Shutdown()
com/liveperson/infra/log/logreporter/loggos/LoggosMessage = Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  ACCOUNT_ID = AccountId
  CONTEXT = Context
  DATE_FORMAT = DateFormat
  LOG_LEVEL = LogLevel
  MESSAGE = Message
  NAMESPACE = Namespace
  TAG = Tag
  TIME = Time
  URL = Url
  getAccountId()Ljava/lang/String; = AccountId
  getLevel()Ljava/lang/String; = Level
  getLogContext()Ljava/lang/String; = LogContext
  getMessage()Ljava/lang/String; = Message
  getNamespace()Ljava/lang/String; = Namespace
  getTime()Ljava/lang/String; = Time
  getUrl()Ljava/lang/String; = Url
  setAccountId(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetAccountId(string)
  setLevel(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetLevel(string)
  setLogContext(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetLogContext(string)
  setMessage(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetMessage(string)
  setNamespace(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetNamespace(string)
  setTime(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetTime(string)
  setTime(J)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetTime(long)
  setUrl(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetUrl(string)
  toJsonObject()Lorg/json/JSONObject; = ToJsonObject()
com/liveperson/infra/log/logreporter/loggos/logsender/HttpLogSender = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.HttpLogSender
  <init>()V = .ctor()
  TAG = Tag
  sendBulk(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = SendBulk(string, System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, System.Collections.Generic.IList<string>)
com/liveperson/infra/log/logreporter/loggos/logsender/LogSender = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.LogSender
  <init>()V = .ctor()
  mCallback = MCallback
  sendBulk(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = SendBulk(string, System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, System.Collections.Generic.IList<string>)
  setCallback(Lcom/liveperson/infra/log/logreporter/loggos/logsender/LogSenderCallback;)V = SetCallback(Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.ILogSenderCallback)
com/liveperson/infra/log/logreporter/loggos/logsender/LogSenderCallback = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.ILogSenderCallback
  onError(Ljava/util/List;Ljava/lang/Throwable;)V = OnError(System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, Java.Lang.Object)
  onSuccess()V = OnSuccess()
com/liveperson/infra/log/LPMobileLog = Com.Liveperson.Infra.Log.LPMobileLog
  <init>()V = .ctor()
  ERROR = Error
  INFO = Info
  LOGGOS_CONTEXT = LoggosContext
  WARNING = Warning
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = D(string, string, string)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  setDebugMode(Z)V = SetDebugMode(bool)
  setLogger(Lcom/liveperson/infra/log/ILogger;)V = SetLogger(Com.Liveperson.Infra.Log.ILogger)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, Java.Lang.Throwable)
com/liveperson/infra/LPAuthenticationParams = Com.Liveperson.Infra.LPAuthenticationParams
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Lcom/liveperson/infra/LPAuthenticationParams$LPAuthenticationType;)V = .ctor(Com.Liveperson.Infra.LPAuthenticationParams.LPAuthenticationType)
  CREATOR = Creator
  getAuthKey()Ljava/lang/String; = AuthKey
  getAuthType()Lcom/liveperson/infra/LPAuthenticationParams$LPAuthenticationType; = AuthType
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getHostAppJWT()Ljava/lang/String; = HostAppJWT
  getHostAppRedirectUri()Ljava/lang/String; = HostAppRedirectUri
  isAuthenticated()Z = IsAuthenticated
  addCertificatePinningKey(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = AddCertificatePinningKey(string)
  describeContents()I = DescribeContents()
  setAuthKey(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetAuthKey(string)
  setHostAppJWT(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetHostAppJWT(string)
  setHostAppRedirectUri(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetHostAppRedirectUri(string)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/LPConversationHistoryMaxDaysDateType = Com.Liveperson.Infra.LPConversationHistoryMaxDaysDateType
  endConversationDate = EndConversationDate
  startConversationDate = StartConversationDate
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = ValueOf(string)
  values()[Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = Values()
com/liveperson/infra/LPConversationsHistoryStateToDisplay = Com.Liveperson.Infra.LPConversationsHistoryStateToDisplay
  ALL = All
  CLOSE = Close
  OPEN = Open
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = ValueOf(string)
  values()[Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = Values()
com/liveperson/infra/managers/PreferenceManager = Com.Liveperson.Infra.Managers.PreferenceManager
  APP_LEVEL_PREFERENCES = AppLevelPreferences
  CONFIGURATION_DATA_PUBLISH_DATE_PREFERENCE_KEY = ConfigurationDataPublishDatePreferenceKey
  KILL_SWITCH_PHOTO_SHARING_ENABLED_PREFERENCE_KEY = KillSwitchPhotoSharingEnabledPreferenceKey
  SITE_SETTINGS_PHOTO_SHARING_ENABLED_PREFERENCE_KEY = SiteSettingsPhotoSharingEnabledPreferenceKey
  SITE_SETTINGS_VOICE_SHARING_ENABLED_PREFERENCE_KEY = SiteSettingsVoiceSharingEnabledPreferenceKey
  getInstance()Lcom/liveperson/infra/managers/PreferenceManager; = Instance
  clearAll()Z = ClearAll()
  contains(Ljava/lang/String;Ljava/lang/String;)Z = Contains(string, string)
  getBooleanValue(Ljava/lang/String;Ljava/lang/String;Z)Z = GetBooleanValue(string, string, bool)
  getIntValue(Ljava/lang/String;Ljava/lang/String;I)I = GetIntValue(string, string, int)
  getLongValue(Ljava/lang/String;Ljava/lang/String;Z)Z = GetLongValue(string, string, bool)
  getLongValue(Ljava/lang/String;Ljava/lang/String;J)J = GetLongValue(string, string, long)
  getStringSet(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)Ljava/util/Set; = GetStringSet(string, string, System.Collections.Generic.ICollection<string>)
  getStringValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetStringValue(string, string, string)
  remove(Ljava/lang/String;Ljava/lang/String;)V = Remove(string, string)
  setBooleanValue(Ljava/lang/String;Ljava/lang/String;Z)V = SetBooleanValue(string, string, bool)
  setIntValue(Ljava/lang/String;Ljava/lang/String;I)V = SetIntValue(string, string, int)
  setLongValue(Ljava/lang/String;Ljava/lang/String;J)V = SetLongValue(string, string, long)
  setStringsSet(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V = SetStringsSet(string, string, System.Collections.Generic.ICollection<string>)
  setStringValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetStringValue(string, string, string)
com/liveperson/infra/messaging/BuildConfig = Com.Liveperson.Infra.Messaging.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/infra/messaging_ui/BuildConfig = Com.Liveperson.Infra.Messaging_ui.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/infra/messaging_ui/ConversationActivity = Com.Liveperson.Infra.Messaging_ui.ConversationActivity
  <init>()V = .ctor()
  INTENT_ACTION = IntentAction
  TYPE_CLOSE_CHAT = TypeCloseChat
  getUiUtils()Lcom/liveperson/infra/messaging_ui/uicomponents/MessagingUIUtils; = UiUtils
  onClearHistoryClicked()V = OnClearHistoryClicked()
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onMarkAsUrgentClick(Lcom/liveperson/messaging/Messaging;)V = OnMarkAsUrgentClick(Com.Liveperson.Messaging.Messaging)
  onResolveConversationClick(Lcom/liveperson/messaging/Messaging;)V = OnResolveConversationClick(Com.Liveperson.Messaging.Messaging)
  onSurveySubmitted(Lcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = OnSurveySubmitted(Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  setFeedBackMode(ZLcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = SetFeedBackMode(bool, Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  setPCIToolbar(Ljava/lang/String;)V = SetPCIToolbar(string)
  setSecureFormMode(ZLjava/lang/String;)V = SetSecureFormMode(bool, string)
com/liveperson/infra/messaging_ui/dialog/ClearHistoryConfirmationDialog = Com.Liveperson.Infra.Messaging_ui.Dialog.ClearHistoryConfirmationDialog
  <init>()V = .ctor()
  TARGET_ID = TargetId
  getInstance(Ljava/lang/String;)Lcom/liveperson/infra/messaging_ui/dialog/ClearHistoryConfirmationDialog; = GetInstance(string)
com/liveperson/infra/messaging_ui/dialog/ConversationIsActiveWarningDialog = Com.Liveperson.Infra.Messaging_ui.Dialog.ConversationIsActiveWarningDialog
  <init>()V = .ctor()
  getInstance()Lcom/liveperson/infra/messaging_ui/dialog/ConversationIsActiveWarningDialog; = Instance
com/liveperson/infra/messaging_ui/dialog/NewUserDialog = Com.Liveperson.Infra.Messaging_ui.Dialog.NewUserDialog
  <init>()V = .ctor()
  getInstance()Lcom/liveperson/infra/messaging_ui/dialog/NewUserDialog; = Instance
com/liveperson/infra/messaging_ui/fragment/ConnectionStatusController = Com.Liveperson.Infra.Messaging_ui.Fragment.ConnectionStatusController
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  CONNECTING_DELAY = ConnectingDelay
  TAG = Tag
  TRYING_TO_CONNECT_DELAY = TryingToConnectDelay
  initState(ZZ)V = InitState(bool, bool)
  onConnected()V = OnConnected()
  onConnecting(Z)V = OnConnecting(bool)
  onError()V = OnError()
  unregister()V = Unregister()
com/liveperson/infra/messaging_ui/fragment/ConversationFragment = Com.Liveperson.Infra.Messaging_ui.Fragment.ConversationFragment
  <init>()V = .ctor()
  BUNDLE_CONVERSATION_ID = BundleConversationId
  conversationId = ConversationId
  mAgentTypingReceiver = MAgentTypingReceiver
  mBrandId = MBrandId
  mConnectionReceiver = MConnectionReceiver
  mConversationLayout = MConversationLayout
  mConversationStateChangeReceiver = MConversationStateChangeReceiver
  mConversationViewParams = MConversationViewParams
  mCopyBehavior = MCopyBehavior
  mEmptyView = MEmptyView
  mEnterMessageLayout = MEnterMessageLayout
  mFeaturesConfiguration = MFeaturesConfiguration
  mFormStateChangeReceiver = MFormStateChangeReceiver
  mFragmentContainer = MFragmentContainer
  mFullImageFragment = MFullImageFragment
  mIConversationProvider = MIConversationProvider
  mInlineMessagesController = MInlineMessagesController
  mLPAuthenticationParams = MLPAuthenticationParams
  mRecyclerView = MRecyclerView
  mUnAuthenticatedUserExpired = MUnAuthenticatedUserExpired
  PICK_PHOTO_FOR_MESSAGE = PickPhotoForMessage
  REQUEST_TAKE_PHOTO = RequestTakePhoto
  TAG = Tag
  attachActivity(Landroid/support/v4/app/FragmentActivity;)V = AttachActivity(Android.Support.V4.App.FragmentActivity)
  connect()V = Connect()
  handleConversationClosed(Ljava/lang/String;Ljava/lang/String;)V = HandleConversationClosed(string, string)
  handleConversationUpdate(Ljava/lang/String;Lcom/liveperson/api/response/types/ConversationState;Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS;Ljava/lang/String;)V = HandleConversationUpdate(string, Com.Liveperson.Api.Response.Types.ConversationState, Com.Liveperson.Api.Response.Types.CSAT.CSAT_SHOW_STATUS, string)
  initConversationProvider()V = InitConversationProvider()
  initRecyclerView()V = InitRecyclerView()
  initRelevantToolbar()V = InitRelevantToolbar()
  newInstance(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Ljava/util/HashMap;Lcom/liveperson/infra/ConversationViewParams;Z)Lcom/liveperson/infra/messaging_ui/fragment/ConversationFragment; = NewInstance(string, Com.Liveperson.Infra.LPAuthenticationParams, System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>, Com.Liveperson.Infra.ConversationViewParams, bool)
  onBackPressed()Z = OnBackPressed()
  onConversationResolved(Ljava/lang/String;)V = OnConversationResolved(string)
  onFileClicked(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;JJ)V = OnFileClicked(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, long, long)
  onSurveySubmitted(Ljava/lang/String;)V = OnSurveySubmitted(string)
  registerBroadCastReceivers()V = RegisterBroadCastReceivers()
  registerConnectionReceiver()V = RegisterConnectionReceiver()
  registerConversationStateChangedReceiver()V = RegisterConversationStateChangedReceiver()
  registerFormStateChangeReceiver()V = RegisterFormStateChangeReceiver()
  sendCSAT(II)V = SendCSAT(int, int)
  setSecureFormMode(ZLjava/lang/String;)V = SetSecureFormMode(bool, string)
  slideOutFragment()V = SlideOutFragment()
  slideOutSecureFormFragment()V = SlideOutSecureFormFragment()
  startCamera()V = StartCamera()
  unregisterForegroundService()V = UnregisterForegroundService()
  unregisterFragment()V = UnregisterFragment()
  unregisterReceivers()V = UnregisterReceivers()
  verifyCameraPermissions(Landroid/app/Activity;)Z = VerifyCameraPermissions(Android.App.Activity)
  verifyStorageAndRecordPermissions(Landroid/app/Activity;)Z = VerifyStorageAndRecordPermissions(Android.App.Activity)
  verifyStoragePermissions(Landroid/app/Activity;)Z = VerifyStoragePermissions(Android.App.Activity)
com/liveperson/infra/messaging_ui/fragment/ConversationFragmentCallbacks = Com.Liveperson.Infra.Messaging_ui.Fragment.IConversationFragmentCallbacks
  onSurveySubmitted(Lcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = OnSurveySubmitted(Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  setFeedBackMode(ZLcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = SetFeedBackMode(bool, Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  setSecureFormMode(ZLjava/lang/String;)V = SetSecureFormMode(bool, string)
com/liveperson/infra/messaging_ui/fragment/FeedbackFragment = Com.Liveperson.Infra.Messaging_ui.Fragment.FeedbackFragment
  <init>()V = .ctor()
  CSAT_FLOW_DEBUG = CsatFlowDebug
  TAG = Tag
  closeFeedBackScreen()V = CloseFeedBackScreen()
  newInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/HashMap;)Lcom/liveperson/infra/messaging_ui/fragment/FeedbackFragment; = NewInstance(string, string, string, System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
  onAttachFragment()V = OnAttachFragment()
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  skipFeedBackScreen()V = SkipFeedBackScreen()
  slideOutFragment()Z = SlideOutFragment()
com/liveperson/infra/messaging_ui/fragment/FullImageFragment = Com.Liveperson.Infra.Messaging_ui.Fragment.FullImageFragment
  <init>()V = .ctor()
  KEY_IMAGE_URI_STRING = KeyImageUriString
  TAG = Tag
  newInstance(Ljava/lang/String;)Lcom/liveperson/infra/messaging_ui/fragment/FullImageFragment; = NewInstance(string)
  toggleFullScreen()V = ToggleFullScreen()
com/liveperson/infra/messaging_ui/fragment/IFeedbackActions = Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions
  closeFeedBackScreen()V = CloseFeedBackScreen()
  skipFeedBackScreen()V = SkipFeedBackScreen()
com/liveperson/infra/messaging_ui/fragment/NestedFragmentsContainerCallbacks = Com.Liveperson.Infra.Messaging_ui.Fragment.INestedFragmentsContainerCallbacks
  onSurveySubmitted(Ljava/lang/String;)V = OnSurveySubmitted(string)
  sendCSAT(II)V = SendCSAT(int, int)
  setSecureFormMode(ZLjava/lang/String;)V = SetSecureFormMode(bool, string)
  slideOutFragment()V = SlideOutFragment()
  slideOutSecureFormFragment()V = SlideOutSecureFormFragment()
com/liveperson/infra/messaging_ui/fragment/SecuredFormFragment = Com.Liveperson.Infra.Messaging_ui.Fragment.SecuredFormFragment
  <init>()V = .ctor()
  ABORTED = Aborted
  ERROR = Error
  ERROR_REASON = ErrorReason
  FORM_TITLE = FormTitle
  GATEWAY_DOMAIN = GatewayDomain
  INVITATION_ID = InvitationId
  JS_INTERFACE_OBJ_NAME = JsInterfaceObjName
  NOT_DEFINED_YET = NotDefinedYet
  STATE = State
  SUBMIT = Submit
  TAG = Tag
  TOKEN = Token
  URL = Url
  VIEWED = Viewed
  slideOutFragment()Z = SlideOutFragment()
  slideOutSecureFormFragment()Z = SlideOutSecureFormFragment()
com/liveperson/infra/messaging_ui/IMessagingUi = Com.Liveperson.Infra.Messaging_ui.IMessagingUi
  isInitialized()Z = IsInitialized
  getConversationFragment(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Landroid/support/v4/app/Fragment; = GetConversationFragment(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  hideConversation(Landroid/app/Activity;)V = HideConversation(Android.App.Activity)
  init(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = Init(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  logout(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  onAgentAvatarTapped(Ljava/lang/String;)V = OnAgentAvatarTapped(string)
  setConfiguration(Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = SetConfiguration(Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  showConversation(Landroid/app/Activity;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Z = ShowConversation(Android.App.Activity, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/messaging_ui/MessagingUi = Com.Liveperson.Infra.Messaging_ui.MessagingUi
  <init>()V = .ctor()
  mMessagingUiConfiguration = MMessagingUiConfiguration
  TAG = Tag
  getInitBrandId()Ljava/lang/String; = InitBrandId
  isInitialized()Z = IsInitialized
  clear()V = Clear()
  getConversationFragment(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Landroid/support/v4/app/Fragment; = GetConversationFragment(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  hideConversation(Landroid/app/Activity;)V = HideConversation(Android.App.Activity)
  init(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = Init(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  logout(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  onAgentAvatarTapped(Ljava/lang/String;)V = OnAgentAvatarTapped(string)
  restart()V = Restart()
  setConfiguration(Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = SetConfiguration(Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  showConversation(Landroid/app/Activity;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Z = ShowConversation(Android.App.Activity, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/messaging_ui/MessagingUiConfiguration = Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration
  <init>(Ljava/util/HashMap;)V = .ctor(System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
  CLEAR_HISTORY_SHOW_CONFIRM_DIALOG = ClearHistoryShowConfirmDialog
  CONTEXTUAL_MENU_ON_TOOLBAR = ContextualMenuOnToolbar
  DISABLE_TTR_POPUP = DisableTtrPopup
  ENABLE_PHOTO_SHARING = EnablePhotoSharing
  SHOW_AGENT_DETAILS_CSAT = ShowAgentDetailsCsat
  SHOW_CSAT_THANK_YOU = ShowCsatThankYou
  SHOW_FEEDBACK = ShowFeedback
  SHOW_TIMESTAMP_IN_TTR_NOTIFICATION = ShowTimestampInTtrNotification
  SHOW_YES_NO_QUESTION = ShowYesNoQuestion
  TTR_MESSAGE_OFF_HOURS_ENABLED = TtrMessageOffHoursEnabled
  getAllFeatures()Ljava/util/HashMap; = AllFeatures
  getFeature(Ljava/lang/String;)Z = GetFeature(string)
  putFeature(Ljava/lang/String;Z)V = PutFeature(string, bool)
com/liveperson/infra/messaging_ui/MessagingUIFactory = Com.Liveperson.Infra.Messaging_ui.MessagingUIFactory
  <init>()V = .ctor()
  instance = Instance
  mMessagingUi = MMessagingUi
  getInstance()Lcom/liveperson/infra/messaging_ui/MessagingUIFactory; = Instance
  isInitialized()Z = IsInitialized
  getMessagingUi()Lcom/liveperson/infra/messaging_ui/MessagingUi; = MessagingUi
  clear()V = Clear()
  createController()Lcom/liveperson/infra/messaging_ui/MessagingUi; = CreateController()
  getConversationFragment(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Landroid/support/v4/app/Fragment; = GetConversationFragment(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  hideConversation(Landroid/app/Activity;)V = HideConversation(Android.App.Activity)
  init(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = Init(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  logout(Landroid/content/Context;Lcom/liveperson/infra/messaging_ui/MessagingUiInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  onAgentAvatarTapped(Ljava/lang/String;)V = OnAgentAvatarTapped(string)
  restart()V = Restart()
  setConfiguration(Lcom/liveperson/infra/messaging_ui/MessagingUiConfiguration;)V = SetConfiguration(Com.Liveperson.Infra.Messaging_ui.MessagingUiConfiguration)
  showConversation(Landroid/app/Activity;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Z = ShowConversation(Android.App.Activity, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/messaging_ui/MessagingUiInitData = Com.Liveperson.Infra.Messaging_ui.MessagingUiInitData
  <init>(Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack, string)
  <init>(Lcom/liveperson/infra/InitLivePersonProperties;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.InitLivePersonProperties, string)
  getInitCallBack()Lcom/liveperson/infra/callbacks/InitLivePersonCallBack; = InitCallBack
com/liveperson/infra/messaging_ui/notification/NotificationController = Com.Liveperson.Infra.Messaging_ui.Notification.NotificationController
  ACTION_LP_UPDATE_NUM_UNREAD_MESSAGES_ACTION = ActionLpUpdateNumUnreadMessagesAction
  ACTION_LP_UPDATE_NUM_UNREAD_MESSAGES_EXTRA = ActionLpUpdateNumUnreadMessagesExtra
  instance = Instance
  addMessageAndDisplayNotification(Landroid/content/Context;Ljava/lang/String;Lcom/liveperson/infra/model/PushMessage;ZI)V = AddMessageAndDisplayNotification(Android.Content.Context, string, Com.Liveperson.Infra.Model.PushMessage, bool, int)
  addMessageToCounter(Ljava/lang/String;Lcom/liveperson/infra/model/PushMessage;)I = AddMessageToCounter(string, Com.Liveperson.Infra.Model.PushMessage)
  clear()V = Clear()
  clearMessagesForBrand(Landroid/content/Context;Ljava/lang/String;)V = ClearMessagesForBrand(Android.Content.Context, string)
  getNumUnreadMessages(Ljava/lang/String;)I = GetNumUnreadMessages(string)
  getNumUnreadMessages(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetNumUnreadMessages(string, string, Com.Liveperson.Infra.ICallback)
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/messaging_ui/notification/NotificationController; = ValueOf(string)
  values()[Lcom/liveperson/infra/messaging_ui/notification/NotificationController; = Values()
com/liveperson/infra/messaging_ui/ResourceMapper = Com.Liveperson.Infra.Messaging_ui.ResourceMapper
  INSTANCE = Instance
  KEY_AGENT_CONVERSATION_BUBBLE_BG_COLOR = KeyAgentConversationBubbleBgColor
  KEY_CONVERSATION_BG_COLOR = KeyConversationBgColor
  VALUE_AGENT_CONVERSATION_BUBBLE_BG_COLOR = ValueAgentConversationBubbleBgColor
  VALUE_CONVERSATION_BG_COLOR = ValueConversationBgColor
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/messaging_ui/ResourceMapper; = ValueOf(string)
  values()[Lcom/liveperson/infra/messaging_ui/ResourceMapper; = Values()
com/liveperson/infra/messaging_ui/screens/CaptionPreviewActivity = Com.Liveperson.Infra.Messaging_ui.Screens.CaptionPreviewActivity
  <init>()V = .ctor()
  AUTH_KEY = AuthKey
  BRAND_ID = BrandId
  IMAGE_FROM_CAMERA = ImageFromCamera
  IMAGE_ORIENTATION = ImageOrientation
  IMAGE_URI = ImageUri
  TARGET_ID = TargetId
  VIEW_PARAMS = ViewParams
com/liveperson/infra/messaging_ui/toolbar/CaptionPreviewToolBar = Com.Liveperson.Infra.Messaging_ui.Toolbar.CaptionPreviewToolBar
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  init()V = Init()
  setTitle(Ljava/lang/String;)V = SetTitle(string)
com/liveperson/infra/messaging_ui/toolbar/ConversationToolBar = Com.Liveperson.Infra.Messaging_ui.Toolbar.ConversationToolBar
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mAgentTypingReceiver = MAgentTypingReceiver
com/liveperson/infra/messaging_ui/toolbar/LPToolBar = Com.Liveperson.Infra.Messaging_ui.Toolbar.LPToolBar
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mBrandId = MBrandId
  initReceivers()V = InitReceivers()
  onInitCompleted()V = OnInitCompleted()
  onPause()V = OnPause()
  onResume()V = OnResume()
  onSurveySubmitted(Lcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = OnSurveySubmitted(Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  registerReceivers()V = RegisterReceivers()
  setAgentName(Ljava/lang/String;)V = SetAgentName(string)
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setFeedBackMode(ZLcom/liveperson/infra/messaging_ui/fragment/IFeedbackActions;)V = SetFeedBackMode(bool, Com.Liveperson.Infra.Messaging_ui.Fragment.IFeedbackActions)
  unregisterReceivers()V = UnregisterReceivers()
  updateAgent()V = UpdateAgent()
  updateToolBarData()V = UpdateToolBarData()
com/liveperson/infra/messaging_ui/toolbar/SecuredFormToolBar = Com.Liveperson.Infra.Messaging_ui.Toolbar.SecuredFormToolBar
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
com/liveperson/infra/messaging_ui/uicomponents/AmsEnterMessage = Com.Liveperson.Infra.Messaging_ui.Uicomponents.AmsEnterMessage
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  MAX_RECORD_TIME_MS = MaxRecordTimeMs
  mHandler = MHandler
  mMaxRecordTimeMs = MMaxRecordTimeMs
  mMaxRecordTimeTextView = MMaxRecordTimeTextView
  mMicButton = MMicButton
  mMicTooltipWindow = MMicTooltipWindow
  mRecordProgressBar = MRecordProgressBar
  mRecordProgressTimeTextView = MRecordProgressTimeTextView
  isRecordingInProgress()Z = IsRecordingInProgress
  cancelRecording()V = CancelRecording()
  changeState(Lcom/liveperson/infra/model/types/ChatState;)V = ChangeState(Com.Liveperson.Infra.Model.Types.ChatState)
  enableMicButtonTooltips(Z)V = EnableMicButtonTooltips(bool)
  onAfterChangedText(Ljava/lang/String;)V = OnAfterChangedText(string)
  onBeforeChangedText()V = OnBeforeChangedText()
  onCancelRecording()V = OnCancelRecording()
  onHasText(Z)V = OnHasText(bool)
  onRecordVoice()V = OnRecordVoice()
  sendMessage(Ljava/lang/String;)V = SendMessage(string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string)
  shouldUpdateSendButton()Z = ShouldUpdateSendButton()
com/liveperson/infra/messaging_ui/uicomponents/AttachmentMenu = Com.Liveperson.Infra.Messaging_ui.Uicomponents.AttachmentMenu
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  isMenuOpen()Z = IsMenuOpen
  hide()V = Hide()
  setListener(Lcom/liveperson/infra/messaging_ui/uicomponents/AttachmentMenu$AttachmentMenuListener;)V = SetListener(Com.Liveperson.Infra.Messaging_ui.Uicomponents.AttachmentMenu.IAttachmentMenuListener)
  setOnCloseListener(Lcom/liveperson/infra/ui/view/uicomponents/ICloseMenuListener;)V = SetOnCloseListener(Com.Liveperson.Infra.UI.View.Uicomponents.ICloseMenuListener)
  show()V = Show()
com/liveperson/infra/messaging_ui/uicomponents/ChatMessageRecyclerView = Com.Liveperson.Infra.Messaging_ui.Uicomponents.ChatMessageRecyclerView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  TAG = Tag
  getCopyBehavior()Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior; = CopyBehavior
  setCopyBehavior(Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = CopyBehavior
  getItemCount()I = ItemCount
  changeCursor(Landroid/database/Cursor;)V = ChangeCursor(Android.Database.ICursor)
  focusLastItem()V = FocusLastItem()
  initListCursorLoader(Landroid/support/v4/app/LoaderManager;Lcom/liveperson/messaging/Messaging;Lcom/liveperson/infra/messaging_ui/uicomponents/CursorLoaderFactory;)V = InitListCursorLoader(Android.Support.V4.App.LoaderManager, Com.Liveperson.Messaging.Messaging, Com.Liveperson.Infra.Messaging_ui.Uicomponents.ICursorLoaderFactory)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  setLoaded()V = SetLoaded()
  setMoveToBeginningOnNextUpdate()V = SetMoveToBeginningOnNextUpdate()
com/liveperson/infra/messaging_ui/uicomponents/CursorLoaderFactory = Com.Liveperson.Infra.Messaging_ui.Uicomponents.ICursorLoaderFactory
  getBrandId()Ljava/lang/String; = BrandId
  getTargetId()Ljava/lang/String; = TargetId
  create()Landroid/support/v4/content/CursorLoader; = Create()
com/liveperson/infra/messaging_ui/uicomponents/inlinemessages/IInlineMessage = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Inlinemessages.IInlineMessage
  hide()V = Hide()
  show(Landroid/content/Context;Landroid/content/Intent;)V = Show(Android.Content.Context, Android.Content.Intent)
com/liveperson/infra/messaging_ui/uicomponents/inlinemessages/InlineMessagesController = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Inlinemessages.InlineMessagesController
  <init>(Landroid/content/Context;Landroid/content/res/Resources;Landroid/view/View;Lcom/liveperson/infra/ui/view/uicomponents/IConversationProvider;Ljava/util/HashMap;)V = .ctor(Android.Content.Context, Android.Content.Res.Resources, Android.Views.View, Com.Liveperson.Infra.UI.View.Uicomponents.IConversationProvider, System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
  mTTRReceiver = MTTRReceiver
  hideAll()V = HideAll()
  onConversationResolved()V = OnConversationResolved()
  register(Ljava/lang/String;)V = Register(string)
  registerTTRReceiver()V = RegisterTTRReceiver()
  unregister()V = Unregister()
com/liveperson/infra/messaging_ui/uicomponents/inlinemessages/OffHours = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Inlinemessages.OffHours
  <init>(Landroid/content/res/Resources;Landroid/widget/TextView;)V = .ctor(Android.Content.Res.Resources, Android.Widget.TextView)
  hide()V = Hide()
  show(Landroid/content/Context;Landroid/content/Intent;)V = Show(Android.Content.Context, Android.Content.Intent)
com/liveperson/infra/messaging_ui/uicomponents/inlinemessages/TTRSnackBar = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Inlinemessages.TTRSnackBar
  <init>(Landroid/content/res/Resources;Landroid/view/View;Ljava/util/HashMap;)V = .ctor(Android.Content.Res.Resources, Android.Views.View, System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
  hide()V = Hide()
  show(Landroid/content/Context;Landroid/content/Intent;)V = Show(Android.Content.Context, Android.Content.Intent)
com/liveperson/infra/messaging_ui/uicomponents/IScrollDownIndicator = Com.Liveperson.Infra.Messaging_ui.Uicomponents.IScrollDownIndicator
  isExpand()Z = IsExpand
  resetAndHide()V = ResetAndHide()
  resetAndShowCollapsed()V = ResetAndShowCollapsed()
  setOnClickListener(Landroid/view/View$OnClickListener;)V = SetOnClickListener(Android.Views.View.IOnClickListener)
  show(ILjava/lang/String;)V = Show(int, string)
com/liveperson/infra/messaging_ui/uicomponents/list/ChatMessageBgFgListener = Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.IChatMessageBgFgListener
  onBackground()V = OnBackground()
  onForeground()V = OnForeground()
com/liveperson/infra/messaging_ui/uicomponents/list/ChatMessageListRecyclerView = Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.ChatMessageListRecyclerView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  TAG = Tag
  getCopyBehavior()Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior; = CopyBehavior
  getView()Landroid/view/View; = View
  focusLastItem()V = FocusLastItem()
  initData(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Landroid/view/View;Lcom/liveperson/infra/messaging_ui/uicomponents/IScrollDownIndicator;Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;Lcom/liveperson/infra/messaging_ui/view/adapter/MessagingAdapterListener;)V = InitData(Com.Liveperson.Messaging.Messaging, string, Android.Views.View, Com.Liveperson.Infra.Messaging_ui.Uicomponents.IScrollDownIndicator, Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.CopyBehavior, Com.Liveperson.Infra.Messaging_ui.View.Adapter.IMessagingAdapterListener)
  onBackground()V = OnBackground()
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onForeground()V = OnForeground()
  removeQuickRepliesMessage(Ljava/lang/String;)V = RemoveQuickRepliesMessage(string)
  setAgentIsTyping(ZLjava/lang/String;)V = SetAgentIsTyping(bool, string)
com/liveperson/infra/messaging_ui/uicomponents/list/MessagesAsListAdapter = Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.MessagesAsListAdapter
  <init>(Lcom/liveperson/infra/messaging_ui/uicomponents/list/ChatMessageListRecyclerView;Landroid/view/View;Lcom/liveperson/infra/messaging_ui/uicomponents/IScrollDownIndicator;Lcom/liveperson/messaging/model/AmsMessagesLoaderProvider;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.ChatMessageListRecyclerView, Android.Views.View, Com.Liveperson.Infra.Messaging_ui.Uicomponents.IScrollDownIndicator, Com.Liveperson.Messaging.Model.IAmsMessagesLoaderProvider, string)
  getCopyBehavior()Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior; = CopyBehavior
  setCopyBehavior(Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = CopyBehavior
  getFirstVisibleItemPosition()I = FirstVisibleItemPosition
  getItemCount()I = ItemCount
  getLastVisibleItemPosition()I = LastVisibleItemPosition
  getHeaderId(I)J = GetHeaderId(int)
  getItem(I)Lcom/liveperson/messaging/model/FullMessageRow; = GetItem(int)
  hideAgentIsTyping()V = HideAgentIsTyping()
  notifyUnreadMessagesChanged(ILjava/lang/String;I)V = NotifyUnreadMessagesChanged(int, string, int)
  onBackground()V = OnBackground()
  onBindHeaderViewHolder(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;I)V = OnBindHeaderViewHolder(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder, int)
  onBindViewHolder(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;I)V = OnBindViewHolder(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder, int)
  onBindViewHolder(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;ILjava/util/List;)V = OnBindViewHolder(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder, int, System.Collections.Generic.IList<Java.Lang.Object>)
  onClearAllMessages(II)V = OnClearAllMessages(int, int)
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionLost()V = OnConnectionLost()
  onCreateHeaderViewHolder(Landroid/view/ViewGroup;)Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder; = OnCreateHeaderViewHolder(Android.Views.ViewGroup)
  onCreateViewHolder(Landroid/view/ViewGroup;I)Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder; = OnCreateViewHolder(Android.Views.ViewGroup, int)
  onForeground()V = OnForeground()
  onHistoryLoaded(IIZ)V = OnHistoryLoaded(int, int, bool)
  onItemMoved(II)V = OnItemMoved(int, int)
  onItemRemoved(I)V = OnItemRemoved(int)
  onMessageUpdated(ILandroid/os/Bundle;)V = OnMessageUpdated(int, Android.OS.Bundle)
  onNewAgentMessageReceived(ILcom/liveperson/messaging/model/FullMessageRow;)V = OnNewAgentMessageReceived(int, Com.Liveperson.Messaging.Model.FullMessageRow)
  onNewAgentMessagesLoaded(II)V = OnNewAgentMessagesLoaded(int, int)
  onNewMessagesLoaded(III)V = OnNewMessagesLoaded(int, int, int)
  onNewSystemMessageAdded(ILcom/liveperson/messaging/model/FullMessageRow;)V = OnNewSystemMessageAdded(int, Com.Liveperson.Messaging.Model.FullMessageRow)
  onNewUnreadMessages(I)V = OnNewUnreadMessages(int)
  onNewUserMessageAdded(I)V = OnNewUserMessageAdded(int)
  onViewRecycled(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = OnViewRecycled(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  removeQuickRepliesMessage(Ljava/lang/String;)V = RemoveQuickRepliesMessage(string)
  setListener(Lcom/liveperson/infra/messaging_ui/view/adapter/MessagingAdapterListener;)V = SetListener(Com.Liveperson.Infra.Messaging_ui.View.Adapter.IMessagingAdapterListener)
  showAgentIsTyping(Ljava/lang/String;)V = ShowAgentIsTyping(string)
com/liveperson/infra/messaging_ui/uicomponents/list/MessagesAsListLoader = Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.MessagesAsListLoader
  <init>(Lcom/liveperson/infra/messaging_ui/uicomponents/list/MessagesAsListLoader$IHandlerProvider;Landroid/view/View;Lcom/liveperson/messaging/model/AmsMessagesLoaderProvider;Lcom/liveperson/infra/messaging_ui/uicomponents/list/MessagesAsListLoader$OnListUpdated;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.MessagesAsListLoader.IHandlerProvider, Android.Views.View, Com.Liveperson.Messaging.Model.IAmsMessagesLoaderProvider, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.MessagesAsListLoader.IOnListUpdated, string)
  getUnreadPosition()I = UnreadPosition
  getItem(I)Lcom/liveperson/messaging/model/FullMessageRow; = GetItem(int)
  getPositionMergeStarts(Lcom/liveperson/messaging/model/FullMessageRow;)I = GetPositionMergeStarts(Com.Liveperson.Messaging.Model.FullMessageRow)
  getTimeAtPosition(I)J = GetTimeAtPosition(int)
  onAgentIsTyping(ZLjava/lang/String;)V = OnAgentIsTyping(bool, string)
  onBackground()V = OnBackground()
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionLost()V = OnConnectionLost()
  onForeground()V = OnForeground()
  onScroll(I)V = OnScroll(int)
  removeListener()V = RemoveListener()
  removeQuickRepliesMessage(Ljava/lang/String;)V = RemoveQuickRepliesMessage(string)
  setNumOfUnreadAgentMessages(I)V = SetNumOfUnreadAgentMessages(int)
  setQuickRepliesMessageShown(Z)V = SetQuickRepliesMessageShown(bool)
  size()I = Size()
com/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener = Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener
  <init>()V = .ctor()
  onClick(Lorg/json/JSONArray;)V = OnClick(Org.Json.JSONArray)
com/liveperson/infra/messaging_ui/uicomponents/ListBehavior = Com.Liveperson.Infra.Messaging_ui.Uicomponents.ListBehavior
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
com/liveperson/infra/messaging_ui/uicomponents/MessagingUIUtils = Com.Liveperson.Infra.Messaging_ui.Uicomponents.MessagingUIUtils
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  showActionNotAvailableMessage(Landroid/content/Context;)V = ShowActionNotAvailableMessage(Android.Content.Context)
  showMarkAsNormalDialog(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = ShowMarkAsNormalDialog(Android.Content.Context, string, string)
  showMarkAsUrgentDialog(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = ShowMarkAsUrgentDialog(Android.Content.Context, string, string)
  showNoNetworkMessage(Landroid/content/Context;)V = ShowNoNetworkMessage(Android.Content.Context)
  showResolveDialog(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = ShowResolveDialog(Android.Content.Context, string, string)
com/liveperson/infra/messaging_ui/uicomponents/PushMessageParser = Com.Liveperson.Infra.Messaging_ui.Uicomponents.PushMessageParser
  <init>()V = .ctor()
  convertDataToBundle(Ljava/util/Map;)Landroid/os/Bundle; = ConvertDataToBundle(System.Collections.Generic.IDictionary<string, string>)
  parse(Ljava/lang/String;Ljava/util/Map;)Lcom/liveperson/infra/model/PushMessage; = Parse(string, System.Collections.Generic.IDictionary<string, string>)
  parseBundle(Ljava/lang/String;Landroid/os/Bundle;)Lcom/liveperson/infra/model/PushMessage; = ParseBundle(string, Android.OS.Bundle)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/QRActionClickListener = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.IQRActionClickListener
  onClick()V = OnClick()
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/quickreplies/QuickRepliesControl = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Quickreplies.QuickRepliesControl
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  TAG = Tag
  setQuickRepliesElement(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement;ILjava/lang/String;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/QRActionClickListener;)V = SetQuickRepliesElement(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement, int, string, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.IQRActionClickListener)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/TouchyWebView = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.TouchyWebView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  setWebViewOnClickListener(Landroid/content/Context;Ljava/lang/String;Lcom/liveperson/messaging/structuredcontent/model/actions/BaseAction;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;)V = SetWebViewOnClickListener(Android.Content.Context, string, Com.Liveperson.Messaging.Structuredcontent.Model.Actions.BaseAction, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/viewpager/CustomViewPager = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Viewpager.CustomViewPager
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/viewpager/CustomViewPagerAdapter = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Viewpager.CustomViewPagerAdapter
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor$StructuredContentContainerOperations;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;)V = .ctor(Android.Content.Context, string, System.Collections.Generic.IList<Com.Liveperson.Messaging.Structuredcontent.Model.Elements.BaseElement>, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor.IStructuredContentContainerOperations, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener)
  getCount()I = Count
  isViewFromObject(Landroid/view/View;Ljava/lang/Object;)Z = IsViewFromObject(Android.Views.View, Java.Lang.Object)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/viewpager/ViewPaperPageListener = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Viewpager.ViewPaperPageListener
  <init>(Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor$StructuredContentContainerOperations;)V = .ctor(Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor.IStructuredContentContainerOperations)
  TAG = Tag
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/BaseViewBuilderVisitor = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.BaseViewBuilderVisitor
  <init>(Landroid/content/Context;Ljava/lang/String;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor$StructuredContentContainerOperations;)V = .ctor(Android.Content.Context, string, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor.IStructuredContentContainerOperations)
  mBrandId = MBrandId
  mContentDescriptionStringBuilder = MContentDescriptionStringBuilder
  mContext = MContext
  mGlobalListener = MGlobalListener
  mStructuredContentContainerOperations = MStructuredContentContainerOperations
  activateActions(Ljava/util/List;Lcom/liveperson/messaging/structuredcontent/model/elements/ActionableElement;)V = ActivateActions(System.Collections.Generic.IList<Com.Liveperson.Messaging.Structuredcontent.Model.Actions.BaseAction>, Com.Liveperson.Messaging.Structuredcontent.Model.Elements.ActionableElement)
  convertDip2Pixels(Landroid/content/Context;I)I = ConvertDip2Pixels(Android.Content.Context, int)
  createElementContentDescription(Landroid/view/View;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = CreateElementContentDescription(Android.Views.View, string, string)
  setElementClickListener(Lcom/liveperson/messaging/structuredcontent/model/elements/ActionableElement;Landroid/view/View;)V = SetElementClickListener(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.ActionableElement, Android.Views.View)
  setStyle(Landroid/widget/TextView;Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle;)V = SetStyle(Android.Widget.TextView, Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ElementStyle)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/QuickRepliesViewBuilderVisitor = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.QuickRepliesViewBuilderVisitor
  <init>(Landroid/content/Context;Landroid/view/ViewGroup;Ljava/lang/String;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/QRActionClickListener;IILcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor$StructuredContentContainerOperations;)V = .ctor(Android.Content.Context, Android.Views.ViewGroup, string, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.IQRActionClickListener, int, int, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor.IStructuredContentContainerOperations)
  TAG = Tag
  getOutputView()Landroid/view/View; = OutputView
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/MapElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/TextElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement)
com/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor = Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor
  <init>(Landroid/content/Context;Ljava/lang/String;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/visitor/ViewBuilderVisitor$StructuredContentContainerOperations;)V = .ctor(Android.Content.Context, string, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.Visitor.ViewBuilderVisitor.IStructuredContentContainerOperations)
  mQuickRepliesActionListener = MQuickRepliesActionListener
  TAG = Tag
  getViewGroup()Landroid/view/ViewGroup; = ViewGroup
  createViewGroupIfMissing()V = CreateViewGroupIfMissing()
  setQuickRepliesActionListener(Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/QRActionClickListener;)V = SetQuickRepliesActionListener(Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.IQRActionClickListener)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/MapElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/TextElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement)
com/liveperson/infra/messaging_ui/utils/LpFileProvider = Com.Liveperson.Infra.Messaging_ui.Utils.LpFileProvider
  <init>()V = .ctor()
com/liveperson/infra/messaging_ui/view/adapter/ChatMessageRow = Com.Liveperson.Infra.Messaging_ui.View.Adapter.ChatMessageRow
  <init>(Lcom/liveperson/messaging/model/MessagingChatMessage;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/FileMessage;)V = .ctor(Com.Liveperson.Messaging.Model.MessagingChatMessage, string, string, Com.Liveperson.Messaging.Model.FileMessage)
com/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.CopyBehavior
  mActivityProvider = MActivityProvider
  mMenuCallback = MMenuCallback
  isSelectable()Z = IsSelectable
  applyCopyCapability(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = ApplyCopyCapability(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnClickListener; = GetOnClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnLongClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnLongClickListener; = GetOnLongClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  onViewRecycled(Landroid/support/v7/widget/RecyclerView$ViewHolder;)V = OnViewRecycled(Android.Support.V7.Widget.RecyclerView.ViewHolder)
  setActivityProvider(Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/IActivityProvider;)V = SetActivityProvider(Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.IActivityProvider)
  setMenuStateListener(Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/IMenuCallback;)V = SetMenuStateListener(Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.IMenuCallback)
com/liveperson/infra/messaging_ui/view/adapter/copybehavior/IActivityProvider = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.IActivityProvider
  getActivity()Landroid/app/Activity; = Activity
com/liveperson/infra/messaging_ui/view/adapter/copybehavior/IMenuCallback = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.IMenuCallback
  onMenuClose()V = OnMenuClose()
  onMenuOpen()V = OnMenuOpen()
com/liveperson/infra/messaging_ui/view/adapter/copybehavior/MessagingActionModeCopyBehavior = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.MessagingActionModeCopyBehavior
  <init>()V = .ctor()
  isSelectable()Z = IsSelectable
  getSelectionTextToCopy()Ljava/lang/String; = SelectionTextToCopy
  applyCopyCapability(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = ApplyCopyCapability(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnClickListener; = GetOnClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnLongClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnLongClickListener; = GetOnLongClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  onViewRecycled(Landroid/support/v7/widget/RecyclerView$ViewHolder;)V = OnViewRecycled(Android.Support.V7.Widget.RecyclerView.ViewHolder)
  setOnClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = SetOnClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  setOnLongClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = SetOnLongClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  setSelected(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = SetSelected(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
com/liveperson/infra/messaging_ui/view/adapter/copybehavior/MessagingSimpleMenuCopyBehavior = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.MessagingSimpleMenuCopyBehavior
  <init>()V = .ctor()
  isSelectable()Z = IsSelectable
  applyCopyCapability(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = ApplyCopyCapability(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnClickListener; = GetOnClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  getOnLongClickListener(ILcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)Landroid/view/View$OnLongClickListener; = GetOnLongClickListener(int, Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  onViewRecycled(Landroid/support/v7/widget/RecyclerView$ViewHolder;)V = OnViewRecycled(Android.Support.V7.Widget.RecyclerView.ViewHolder)
com/liveperson/infra/messaging_ui/view/adapter/MessageRow = Com.Liveperson.Infra.Messaging_ui.View.Adapter.MessageRow
  <init>(Ljava/lang/String;JI)V = .ctor(string, long, int)
  getAgentAvatarUrl()Ljava/lang/String; = AgentAvatarUrl
  setAgentAvatarUrl(Ljava/lang/String;)V = AgentAvatarUrl
  getEventId()Ljava/lang/String; = EventId
  setEventId(Ljava/lang/String;)V = EventId
  getMessage()Ljava/lang/String; = Message
  getMessageState()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState; = MessageState
  getMessageType()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = MessageType
  getTimestamp()J = Timestamp
  setMessageState(I)V = SetMessageState(int)
com/liveperson/infra/messaging_ui/view/adapter/MessagingAdapterListener = Com.Liveperson.Infra.Messaging_ui.View.Adapter.IMessagingAdapterListener
  onFileClicked(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;JJ)V = OnFileClicked(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, long, long)
com/liveperson/infra/messaging_ui/view/adapter/MessagingRecyclerViewCursorAdapter = Com.Liveperson.Infra.Messaging_ui.View.Adapter.MessagingRecyclerViewCursorAdapter
  <init>(Landroid/content/Context;Landroid/database/Cursor;)V = .ctor(Android.Content.Context, Android.Database.ICursor)
  TAG = Tag
  getCopyBehavior()Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior; = CopyBehavior
  setCopyBehavior(Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = CopyBehavior
  extractFromCursor(Landroid/database/Cursor;)Lcom/liveperson/infra/messaging_ui/view/adapter/ChatMessageRow; = ExtractFromCursor(Android.Database.ICursor)
  getItemViewType(I)I = GetItemViewType(int)
  isLoadingItem(I)Z = IsLoadingItem(int)
  onAccessibilityEventAvailable(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;)V = OnAccessibilityEventAvailable(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder)
  onBind(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;Lcom/liveperson/infra/messaging_ui/view/adapter/ChatMessageRow;II)V = OnBind(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder, Com.Liveperson.Infra.Messaging_ui.View.Adapter.ChatMessageRow, int, int)
  onCreate(Landroid/view/ViewGroup;I)Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder; = OnCreate(Android.Views.ViewGroup, int)
  setListener(Lcom/liveperson/infra/messaging_ui/view/adapter/MessagingAdapterListener;)V = SetListener(Com.Liveperson.Infra.Messaging_ui.View.Adapter.IMessagingAdapterListener)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsAgentFormInvitationViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsAgentFormInvitationViewHolder
  <init>(Landroid/view/View;Ljava/lang/String;Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = .ctor(Android.Views.View, string, Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.CopyBehavior)
  EXTRA_MESSAGE_STATE = ExtraMessageState
  setViewAppearanceByState(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = SetViewAppearanceByState(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsAgentStructuredContentViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsAgentStructuredContentViewHolder
  <init>(Landroid/view/View;Ljava/lang/String;)V = .ctor(Android.Views.View, string)
  getLeftPadding()I = LeftPadding
  onChangeContainerSize(I)V = OnChangeContainerSize(int)
  setRootElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;)V = SetRootElement(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener)
  setRootElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;Lcom/liveperson/infra/messaging_ui/uicomponents/list/OnSCActionClickListener;Lcom/liveperson/infra/messaging_ui/uicomponents/structuredcontent/QRActionClickListener;)V = SetRootElement(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement, Com.Liveperson.Infra.Messaging_ui.Uicomponents.List.OnSCActionClickListener, Com.Liveperson.Infra.Messaging_ui.Uicomponents.Structuredcontent.IQRActionClickListener)
  showAvatar(Z)V = ShowAvatar(bool)
  showTimestamp(Z)V = ShowTimestamp(bool)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsAgentTypingViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsAgentTypingViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mAgentIsTypingAnimatedIndicator = MAgentIsTypingAnimatedIndicator
  showTypingAnimation()V = ShowTypingAnimation()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsAgentURLViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsAgentURLViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = .ctor(Android.Views.View, Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.CopyBehavior)
  setTimestamp(J)V = SetTimestamp(long)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsAgentViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsAgentViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mAgentAvatar = MAgentAvatar
  mAgentNickName = MAgentNickName
  applyColors()V = ApplyColors()
  setAgentAvatar(Ljava/lang/String;)V = SetAgentAvatar(string)
  setAgentNickName(Ljava/lang/String;)V = SetAgentNickName(string)
  setMessageText(Ljava/lang/String;Z)V = SetMessageText(string, bool)
  setOnAgentAvatarClicked(Landroid/view/View$OnClickListener;)V = SetOnAgentAvatarClicked(Android.Views.View.IOnClickListener)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsBrandMsgViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsBrandMsgViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  applyColors()V = ApplyColors()
  setMessageText(Ljava/lang/String;Z)V = SetMessageText(string, bool)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsConsumerFormSubmissionViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsConsumerFormSubmissionViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsConsumerImageViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsConsumerImageViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  mMessageImageView = MMessageImageView
  TAG = Tag
  onCompletedAction()V = OnCompletedAction()
  onNotStartedAction()V = OnNotStartedAction()
  onRequestingUrlAction()V = OnRequestingUrlAction()
  setImageClickListener(Landroid/view/View$OnClickListener;)V = SetImageClickListener(Android.Views.View.IOnClickListener)
  setMessageImage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetMessageImage(string, string, Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsConsumerURLViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsConsumerURLViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/infra/messaging_ui/view/adapter/copybehavior/CopyBehavior;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Infra.Messaging_ui.View.Adapter.Copybehavior.CopyBehavior)
  setTimestamp(J)V = SetTimestamp(long)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsConsumerViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsConsumerViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  mMessageErrorView = MMessageErrorView
  mMessageStateIcon = MMessageStateIcon
  mMessageStateText = MMessageStateText
  mMessageStateTextArray = MMessageStateTextArray
  mMessageType = MMessageType
  mSdkMessageState = MSdkMessageState
  mViewHolderType = MViewHolderType
  getErrorView()Landroid/widget/ImageView; = ErrorView
  applyColors()V = ApplyColors()
  resend(Lcom/liveperson/infra/model/Message;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = Resend(Com.Liveperson.Infra.Model.Message, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  setMessageText(Ljava/lang/String;Z)V = SetMessageText(string, bool)
  setStateVisibility(I)V = SetStateVisibility(int)
  setViewAppearanceByState(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/infra/model/Message;)V = SetViewAppearanceByState(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Infra.Model.Message)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsConsumerVoiceViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsConsumerVoiceViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Ljava/lang/String;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, string)
  TAG = Tag
  onCompletedAction()V = OnCompletedAction()
  onNotStartedAction()V = OnNotStartedAction()
  onRequestingUrlAction()V = OnRequestingUrlAction()
  playVoiceMessage(Ljava/lang/String;)V = PlayVoiceMessage(string)
  setCurrentPlaying(Ljava/lang/String;II)V = SetCurrentPlaying(string, int, int)
  setVoiceProperties(Ljava/lang/String;Ljava/lang/String;JJLcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetVoiceProperties(string, string, long, long, Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  stopPlaying()V = StopPlaying()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsControllerSystemViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsControllerSystemViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mMessageSequence = MMessageSequence
  getMessageSequence()I = MessageSequence
  setMessageSequence(I)V = MessageSequence
  applyColors()V = ApplyColors()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsDownloadableFileViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsDownloadableFileViewHolder
  <init>(Landroid/view/View;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(Android.Views.View, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  mFileRowId = MFileRowId
  mFileStatusView = MFileStatusView
  mFullFile = MFullFile
  mPreviewImage = MPreviewImage
  TAG = Tag
  getFailedDownloadDrawableResourceId()I = FailedDownloadDrawableResourceId
  additionalFailAction()V = AdditionalFailAction()
  applyLoadStatusForDownloadFlow(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = ApplyLoadStatusForDownloadFlow(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  applyLoadStatusForUploadFlow(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = ApplyLoadStatusForUploadFlow(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  onCompletedAction()V = OnCompletedAction()
  onNotStartedAction()V = OnNotStartedAction()
  onRequestingUrlAction()V = OnRequestingUrlAction()
  setFileRowId(J)V = SetFileRowId(long)
  startFailedAnimation()V = StartFailedAnimation()
  startProgressBar()V = StartProgressBar()
  stopAnimation()V = StopAnimation()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsLoadMoreViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsLoadMoreViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  applyColors()V = ApplyColors()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsSystemMaskedViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsSystemMaskedViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mMessageSequence = MMessageSequence
  getMessageSequence()J = MessageSequence
  setMessageSequence(J)V = MessageSequence
  applyColors()V = ApplyColors()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsSystemResolvedViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.AmsSystemResolvedViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mMessageSequence = MMessageSequence
  getMessageSequence()I = MessageSequence
  setMessageSequence(I)V = MessageSequence
  applyColors()V = ApplyColors()
  hideSystemMessageView(ZZ)V = HideSystemMessageView(bool, bool)
com/liveperson/infra/messaging_ui/view/adapter/viewholder/AmsViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.IAmsViewHolder
  applyColors()V = ApplyColors()
  updateContentDescription()V = UpdateContentDescription()
com/liveperson/infra/messaging_ui/view/adapter/viewholder/UiUnreadIndicatorViewHolder = Com.Liveperson.Infra.Messaging_ui.View.Adapter.Viewholder.UiUnreadIndicatorViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  applyColors()V = ApplyColors()
com/liveperson/infra/messaging_ui/view/separator/ConversationSeparationDecorator = Com.Liveperson.Infra.Messaging_ui.View.Separator.ConversationSeparationDecorator
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
com/liveperson/infra/model/LptagData = Com.Liveperson.Infra.Model.LptagData
  <init>()V = .ctor()
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  getMaxRetries()I = MaxRetries
  setMaxRetries(I)V = MaxRetries
  getRetryTimeout()I = RetryTimeout
  setRetryTimeout(I)V = RetryTimeout
com/liveperson/infra/model/Message = Com.Liveperson.Infra.Model.Message
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Infra.Utils.EncryptionVersion)
  EXTRA_MESSAGE_TEXT = ExtraMessageText
  getContentType()Ljava/lang/String; = ContentType
  setContentType(Ljava/lang/String;)V = ContentType
  getConversationId()Ljava/lang/String; = ConversationId
  setConversationId(Ljava/lang/String;)V = ConversationId
  getEventId()Ljava/lang/String; = EventId
  setEventId(Ljava/lang/String;)V = EventId
  getFullTimeString()Ljava/lang/String; = FullTimeString
  getLocalId()J = LocalId
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getServerSequence()I = ServerSequence
  setServerSequence(I)V = ServerSequence
  getTimeStamp()J = TimeStamp
  getMessage()Ljava/lang/String; = GetMessage()
  setMessageId(J)V = SetMessageId(long)
com/liveperson/infra/model/PushMessage = Com.Liveperson.Infra.Model.PushMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  getBackendService()Ljava/lang/String; = BackendService
  setBackendService(Ljava/lang/String;)V = BackendService
  getBrandId()Ljava/lang/String; = BrandId
  getCollapseKey()Ljava/lang/String; = CollapseKey
  setCollapseKey(Ljava/lang/String;)V = CollapseKey
  getConversationId()Ljava/lang/String; = ConversationId
  setConversationId(Ljava/lang/String;)V = ConversationId
  getCurrentUnreadMessgesCounter()I = CurrentUnreadMessgesCounter
  setCurrentUnreadMessgesCounter(I)V = CurrentUnreadMessgesCounter
  getFrom()Ljava/lang/String; = From
  getMessage()Ljava/lang/String; = Message
com/liveperson/infra/model/SocketConnectionParams = Com.Liveperson.Infra.Model.SocketConnectionParams
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  <init>(Ljava/lang/String;ILjava/util/List;)V = .ctor(string, int, System.Collections.Generic.IList<string>)
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getHeaders()Ljava/util/HashMap; = Headers
  getTimeout()I = Timeout
  getUrl()Ljava/lang/String; = Url
  addHeader(Ljava/lang/String;Ljava/lang/String;)V = AddHeader(string, string)
com/liveperson/infra/model/types/ChatState = Com.Liveperson.Infra.Model.Types.ChatState
  ACTIVE = Active
  BACKGROUND = Background
  COMPOSING = Composing
  GONE = Gone
  INACTIVE = Inactive
  PAUSE = Pause
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/model/types/ChatState; = ValueOf(string)
  values()[Lcom/liveperson/infra/model/types/ChatState; = Values()
com/liveperson/infra/MonitoringInitParams = Com.Liveperson.Infra.MonitoringInitParams
  <init>(Ljava/lang/String;)V = .ctor(string)
  getAppInstallId()Ljava/lang/String; = AppInstallId
  setAppInstallId(Ljava/lang/String;)V = AppInstallId
com/liveperson/infra/network/BackOff = Com.Liveperson.Infra.Network.IBackOff
  STOP = Stop
  STOP_BACKOFF = StopBackoff
  ZERO = Zero
  ZERO_BACKOFF = ZeroBackoff
  getNextBackOffMillis()J = NextBackOffMillis
  getRetryNumber()I = RetryNumber
  calculateNextBackOffMillis()V = CalculateNextBackOffMillis()
  reset()V = Reset()
com/liveperson/infra/network/ExponentialBackOff = Com.Liveperson.Infra.Network.ExponentialBackOff
  DEFAULT_INITIAL_INTERVAL_MILLIS = DefaultInitialIntervalMillis
  DEFAULT_MAX_ELAPSED_TIME_MILLIS = DefaultMaxElapsedTimeMillis
  DEFAULT_MAX_INTERVAL_MILLIS = DefaultMaxIntervalMillis
  DEFAULT_MULTIPLIER = DefaultMultiplier
  DEFAULT_RANDOMIZATION_FACTOR = DefaultRandomizationFactor
  getNextBackOffMillis()J = NextBackOffMillis
  getRetryNumber()I = RetryNumber
  calculateNextBackOffMillis()V = CalculateNextBackOffMillis()
  reset()V = Reset()
com/liveperson/infra/network/http/body/HttpImageRequestBody = Com.Liveperson.Infra.Network.Http.Body.HttpImageRequestBody
  <init>()V = .ctor()
  isString()Z = IsString
com/liveperson/infra/network/http/body/HttpRequestBody = Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody
  getContentType()Ljava/lang/String; = ContentType
  isString()Z = IsString
  get()Ljava/lang/Object; = Get()
com/liveperson/infra/network/http/HttpHandler = Com.Liveperson.Infra.Network.Http.HttpHandler
  <init>()V = .ctor()
  execute(Lcom/liveperson/infra/network/http/request/HttpRequest;)V = Execute(Com.Liveperson.Infra.Network.Http.Request.HttpRequest)
  executeDelayed(Lcom/liveperson/infra/network/http/request/HttpRequest;J)V = ExecuteDelayed(Com.Liveperson.Infra.Network.Http.Request.HttpRequest, long)
com/liveperson/infra/network/http/request/HttpGetRequest = Com.Liveperson.Infra.Network.Http.Request.HttpGetRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpHeadRequest = Com.Liveperson.Infra.Network.Http.Request.HttpHeadRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpOpenStreamRequest = Com.Liveperson.Infra.Network.Http.Request.HttpOpenStreamRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  reportSuccess(Lokhttp3/Response;)V = ReportSuccess(Square.OkHttp3.Response)
com/liveperson/infra/network/http/request/HttpPostRequest = Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpPutRequest = Com.Liveperson.Infra.Network.Http.Request.HttpPutRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpRequest = Com.Liveperson.Infra.Network.Http.Request.HttpRequest
  <init>(Ljava/lang/String;Lcom/liveperson/infra/network/http/request/HttpRequest$HttpMethod;)V = .ctor(string, Com.Liveperson.Infra.Network.Http.Request.HttpRequest.HttpMethod)
  mCallback = MCallback
  mRequestBody = MRequestBody
  getCallback()Lcom/liveperson/infra/ICallback; = Callback
  setCallback(Lcom/liveperson/infra/ICallback;)V = Callback
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  setCertificatePinningKeys(Ljava/util/List;)V = CertificatePinningKeys
  getFollowRedirect()Z = FollowRedirect
  setFollowRedirect(Z)V = FollowRedirect
  getHeaders()Ljava/util/List; = Headers
  getMethod()Lcom/liveperson/infra/network/http/request/HttpRequest$HttpMethod; = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  getTimeout()I = Timeout
  setTimeout(I)V = Timeout
  getUrl()Ljava/lang/String; = Url
  addHeader(Ljava/lang/String;Ljava/lang/String;)V = AddHeader(string, string)
  isResponseSuccessful(Lokhttp3/Response;)Z = IsResponseSuccessful(Square.OkHttp3.Response)
  processErrorResponse(Ljava/lang/Exception;)V = ProcessErrorResponse(Java.Lang.Exception)
  processResponse(Lokhttp3/Response;)V = ProcessResponse(Square.OkHttp3.Response)
  reportSuccess(Lokhttp3/Response;)V = ReportSuccess(Square.OkHttp3.Response)
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/requests/BadgeCounterRequest = Com.Liveperson.Infra.Network.Http.Requests.BadgeCounterRequest
  <init>(Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/infra/network/http/requests/ConfigurationRequest = Com.Liveperson.Infra.Network.Http.Requests.ConfigurationRequest
  <init>(Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/infra/network/http/requests/CSDSRequest = Com.Liveperson.Infra.Network.Http.Requests.CSDSRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/infra/network/http/requests/LptagRequest = Com.Liveperson.Infra.Network.Http.Requests.LptagRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  JSON_KEY_FEATURES = JsonKeyFeatures
  JSON_KEY_MAX_RETRIES = JsonKeyMaxRetries
  JSON_KEY_MESSAGING_AUTO_MESSAGES = JsonKeyMessagingAutoMessages
  JSON_KEY_RETRY = JsonKeyRetry
  JSON_KEY_RETRY_TIMEOUT = JsonKeyRetryTimeout
  execute()V = Execute()
com/liveperson/infra/network/http/requests/PushRequest = Com.Liveperson.Infra.Network.Http.Requests.PushRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, string, string, System.Collections.Generic.IList<string>)
  KEY_APP_ID = KeyAppId
  KEY_DEVICE_ID = KeyDeviceId
  KEY_PLATFORM = KeyPlatform
  KEY_REGISTRATION_ID = KeyRegistrationId
  KEY_TOKEN_ID = KeyTokenId
  KEY_USER_ID = KeyUserId
  mAppId = MAppId
  mCallback = MCallback
  mCertificates = MCertificates
  mDeviceId = MDeviceId
  mGcmRegistrationId = MGcmRegistrationId
  mPlatform = MPlatform
  mPusherURL = MPusherURL
  mTokenId = MTokenId
  mUserId = MUserId
  TAG = Tag
  getBody()Lorg/json/JSONObject; = Body
  execute()V = Execute()
  handleError(Ljava/lang/Exception;)V = HandleError(Java.Lang.Exception)
  handleResponse(Ljava/lang/String;)V = HandleResponse(string)
  setAppId(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetAppId(string)
  setCallback(Lcom/liveperson/infra/ICallback;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetCallback(Com.Liveperson.Infra.ICallback)
  setDeviceId(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetDeviceId(string)
  setPlatform(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetPlatform(string)
com/liveperson/infra/network/http/requests/SiteSettingsRequest = Com.Liveperson.Infra.Network.Http.Requests.SiteSettingsRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/infra/network/http/requests/UnregisterPushRequest = Com.Liveperson.Infra.Network.Http.Requests.UnregisterPushRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, System.Collections.Generic.IList<string>)
  TAG = Tag
com/liveperson/infra/network/socket/BaseResponseHandler = Com.Liveperson.Infra.Network.Socket.BaseResponseHandler
  <init>()V = .ctor()
  getAPIResponseType()Ljava/lang/String; = APIResponseType
  getRequest()Lcom/liveperson/infra/network/socket/BaseSocketRequest; = Request
  getResponseByExpectedType(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetResponseByExpectedType(string)
  getSupportedResponseHandler(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetSupportedResponseHandler(string)
  giveUp()V = GiveUp()
  onParsingError()V = OnParsingError()
com/liveperson/infra/network/socket/BaseSocketRequest = Com.Liveperson.Infra.Network.Socket.BaseSocketRequest
  <init>()V = .ctor()
  <init>(J)V = .ctor(long)
  getData()Ljava/lang/String; = Data
  getRequestId()J = RequestId
  getRequestName()Ljava/lang/String; = RequestName
  getSocketUrl()Ljava/lang/String; = SocketUrl
  addCallback(Lcom/liveperson/infra/network/socket/ResponseCallback;)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = AddCallback(Com.Liveperson.Infra.Network.Socket.IResponseCallback)
  createRequestId()J = CreateRequestId()
  removeCallback(Lcom/liveperson/infra/network/socket/ResponseCallback;)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = RemoveCallback(Com.Liveperson.Infra.Network.Socket.IResponseCallback)
  setRequestId(J)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = SetRequestId(long)
com/liveperson/infra/network/socket/GeneralResponseHandler = Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler
  <init>()V = .ctor()
  createInstance(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = CreateInstance(string)
com/liveperson/infra/network/socket/IdleQueueHandler = Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler
  queueIdle()V = QueueIdle()
com/liveperson/infra/network/socket/ISocketCallbacks = Com.Liveperson.Infra.Network.Socket.ISocketCallbacks
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onMessage(Ljava/lang/String;)V = OnMessage(string)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/network/socket/ISocketWrapper = Com.Liveperson.Infra.Network.Socket.ISocketWrapper
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  disconnect()V = Disconnect()
  send(Ljava/lang/String;)V = Send(string)
com/liveperson/infra/network/socket/ResponseCallback = Com.Liveperson.Infra.Network.Socket.IResponseCallback
  onError()V = OnError()
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
com/liveperson/infra/network/socket/ResponseMap = Com.Liveperson.Infra.Network.Socket.ResponseMap
  <init>()V = .ctor()
  RESPONSE_TAG = ResponseTag
  getRequestIdHandler(Ljava/lang/String;J)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetRequestIdHandler(string, long)
  onRequestHandled(J)V = OnRequestHandled(long)
  onSocketClosed()V = OnSocketClosed()
  putGeneralHandler(Lcom/liveperson/infra/network/socket/GeneralResponseHandler;)V = PutGeneralHandler(Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler)
  putGeneralHandler(Ljava/lang/String;Ljava/lang/Class;)V = PutGeneralHandler(string, Java.Lang.Class)
  putRequestIdHandler(JLcom/liveperson/infra/network/socket/BaseResponseHandler;)V = PutRequestIdHandler(long, Com.Liveperson.Infra.Network.Socket.BaseResponseHandler)
  shutDown()V = ShutDown()
com/liveperson/infra/network/socket/SocketErrorCallback = Com.Liveperson.Infra.Network.Socket.ISocketErrorCallback
  onFatalError()V = OnFatalError()
  onParsingError()V = OnParsingError()
com/liveperson/infra/network/socket/SocketHandler = Com.Liveperson.Infra.Network.Socket.SocketHandler
  <init>(Lcom/liveperson/infra/network/socket/ResponseMap;)V = .ctor(Com.Liveperson.Infra.Network.Socket.ResponseMap)
  CERTIFICATE_ERROR = CertificateError
  PERIODIC_PING_TIME = PeriodicPingTime
  dispose()V = Dispose()
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onMessage(Ljava/lang/String;)V = OnMessage(string)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
  send(Ljava/lang/String;)V = Send(string)
  sendDelayed(Ljava/lang/String;J)Ljava/lang/Runnable; = SendDelayed(string, long)
com/liveperson/infra/network/socket/SocketManager = Com.Liveperson.Infra.Network.Socket.SocketManager
  getInstance()Lcom/liveperson/infra/network/socket/SocketManager; = Instance
  cancelDelayedRequest(Lcom/liveperson/infra/network/socket/BaseSocketRequest;Ljava/lang/Runnable;)V = CancelDelayedRequest(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest, Java.Lang.IRunnable)
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  connect(Ljava/lang/String;I)V = Connect(string, int)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  getSocketState(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/SocketState; = GetSocketState(string)
  killSocket(Ljava/lang/String;)V = KillSocket(string)
  putGeneralHandlerMap(Lcom/liveperson/infra/network/socket/GeneralResponseHandler;)V = PutGeneralHandlerMap(Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler)
  registerToSocketState(Ljava/lang/String;Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = RegisterToSocketState(string, Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
  send(Lcom/liveperson/infra/network/socket/BaseSocketRequest;)V = Send(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest)
  send(Lcom/liveperson/infra/network/socket/BaseSocketRequest;J)Ljava/lang/Runnable; = Send(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest, long)
  shutDown()V = ShutDown()
  unregisterFromSocketState(Ljava/lang/String;Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = UnregisterFromSocketState(string, Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
com/liveperson/infra/network/socket/SocketState = Com.Liveperson.Infra.Network.Socket.SocketState
  CLOSED = Closed
  CLOSING = Closing
  CONNECTING = Connecting
  ERROR = Error
  INIT = Init
  OPEN = Open
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/SocketState; = ValueOf(string)
  values()[Lcom/liveperson/infra/network/socket/SocketState; = Values()
com/liveperson/infra/network/socket/SocketStateManager = Com.Liveperson.Infra.Network.Socket.SocketStateManager
  <init>()V = .ctor()
  getState()Lcom/liveperson/infra/network/socket/SocketState; = State
  dispose()V = Dispose()
  register(Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = Register(Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
  unregister(Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = Unregister(Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
com/liveperson/infra/network/socket/SocketToRestCommand = Com.Liveperson.Infra.Network.Socket.SocketToRestCommand
  <init>()V = .ctor()
  getData(Lcom/liveperson/infra/network/socket/BaseSocketRequest;)Ljava/lang/String; = GetData(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest)
com/liveperson/infra/network/socket/SocketWrapperOK = Com.Liveperson.Infra.Network.Socket.SocketWrapperOK
  <init>(Lcom/liveperson/infra/network/socket/ISocketCallbacks;)V = .ctor(Com.Liveperson.Infra.Network.Socket.ISocketCallbacks)
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  disconnect()V = Disconnect()
  send(Ljava/lang/String;)V = Send(string)
com/liveperson/infra/network/socket/state/SocketStateAdapter = Com.Liveperson.Infra.Network.Socket.State.SocketStateAdapter
  <init>()V = .ctor()
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/network/socket/state/SocketStateListener = Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/sdkstatemachine/BaseInfraState = Com.Liveperson.Infra.Sdkstatemachine.BaseInfraState
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  name = Name
  TAG = Tag
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  visit(Lcom/liveperson/infra/sdkstatemachine/events/InitEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/LogoutEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.LogoutEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/PreLogoutCompletedEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.PreLogoutCompletedEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/ShutDownCompletedEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownCompletedEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/ShutDownEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownEvent)
com/liveperson/infra/sdkstatemachine/events/InitEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent
  <init>(Lcom/liveperson/infra/statemachine/InitProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.InitProcess)
  getInitProcess()Lcom/liveperson/infra/statemachine/InitProcess; = InitProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/LogoutEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.LogoutEvent
  <init>(Lcom/liveperson/infra/statemachine/LogoutProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.LogoutProcess)
  getInitEvent()Lcom/liveperson/infra/sdkstatemachine/events/InitEvent; = InitEvent
  getLogoutProcess()Lcom/liveperson/infra/statemachine/LogoutProcess; = LogoutProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  setInitAfterLogout(Lcom/liveperson/infra/sdkstatemachine/events/InitEvent;)V = SetInitAfterLogout(Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent)
  setSkipInit(Z)V = SetSkipInit(bool)
  skipInit()Z = SkipInit()
com/liveperson/infra/sdkstatemachine/events/PreLogoutCompletedEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.PreLogoutCompletedEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/ShutDownCompletedEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownCompletedEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/ShutDownEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownEvent
  <init>(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  getInitProcess()Lcom/liveperson/infra/statemachine/ShutDownProcess; = InitProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/InfraStateMachine = Com.Liveperson.Infra.Sdkstatemachine.InfraStateMachine
  <init>()V = .ctor()
  isSDKInitialized()Z = IsSDKInitialized
  initSDK(Lcom/liveperson/infra/statemachine/InitProcess;)V = InitSDK(Com.Liveperson.Infra.Statemachine.InitProcess)
  logoutSDK(Lcom/liveperson/infra/statemachine/LogoutProcess;)V = LogoutSDK(Com.Liveperson.Infra.Statemachine.LogoutProcess)
  shutDownSDK(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDownSDK(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
com/liveperson/infra/sdkstatemachine/init/InfraInitData = Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData
  <init>(Ljava/lang/String;)V = .ctor(string)
  getSdkVersion()Ljava/lang/String; = SdkVersion
com/liveperson/infra/sdkstatemachine/init/InitData = Com.Liveperson.Infra.Sdkstatemachine.Init.InitData
  <init>(Lcom/liveperson/infra/InitLivePersonProperties;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.InitLivePersonProperties, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, string, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  getSdkVersion()Ljava/lang/String; = SdkVersion
com/liveperson/infra/sdkstatemachine/logout/LogoutCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Logout.ILogoutCompletionListener
  logoutCompleted()V = LogoutCompleted()
com/liveperson/infra/sdkstatemachine/logout/PreLogoutCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Logout.IPreLogoutCompletionListener
  preLogoutCompleted()V = PreLogoutCompleted()
  preLogoutFailed(Ljava/lang/Exception;)V = PreLogoutFailed(Java.Lang.Exception)
com/liveperson/infra/sdkstatemachine/shutdown/ShutDown = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDown
  shutDown()V = ShutDown()
com/liveperson/infra/sdkstatemachine/shutdown/ShutDownAsync = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownAsync
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener
  shutDownCompleted()V = ShutDownCompleted()
  shutDownFailed()V = ShutDownFailed()
com/liveperson/infra/statemachine/BaseEvent = Com.Liveperson.Infra.Statemachine.BaseEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/statemachine/BaseState = Com.Liveperson.Infra.Statemachine.BaseState
  <init>(Lcom/liveperson/infra/statemachine/BaseState;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Statemachine.BaseState, string, string)
  name = Name
  parent = Parent
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  handleDefaultEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = HandleDefaultEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
com/liveperson/infra/statemachine/BaseStateMachine = Com.Liveperson.Infra.Statemachine.BaseStateMachine
  <init>(Ljava/lang/String;)V = .ctor(string)
  activeState = ActiveState
  isInitialized()Z = IsInitialized
  getTag()Ljava/lang/String; = Tag
  activeState()Lcom/liveperson/infra/statemachine/interfaces/IState; = ActiveState()
  apply(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Apply(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  cancelDelayedEvent(Ljava/lang/Runnable;)V = CancelDelayedEvent(Java.Lang.IRunnable)
  changeState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = ChangeState(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  changeStateAndPassEvent(Lcom/liveperson/infra/statemachine/interfaces/IState;Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = ChangeStateAndPassEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IState, Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  initActiveState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = InitActiveState(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  postDelayEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = PostDelayEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  postEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = PostEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  setStateMachineExecutor(Lcom/liveperson/infra/statemachine/interfaces/IStateMachineExecutor;)V = SetStateMachineExecutor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor)
  shutDown()V = ShutDown()
com/liveperson/infra/statemachine/InitProcess = Com.Liveperson.Infra.Statemachine.InitProcess
  <init>()V = .ctor()
  getInitCallback()Lcom/liveperson/infra/callbacks/InitLivePersonCallBack; = InitCallback
  init()V = Init()
com/liveperson/infra/statemachine/interfaces/IEvent = Com.Liveperson.Infra.Statemachine.Interfaces.IEvent
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/statemachine/interfaces/IEventScheduler = Com.Liveperson.Infra.Statemachine.Interfaces.IEventScheduler
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Lcom/liveperson/infra/statemachine/interfaces/IEventScheduler$Cancelable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/statemachine/interfaces/IState = Com.Liveperson.Infra.Statemachine.Interfaces.IState
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
com/liveperson/infra/statemachine/interfaces/IStateMachine = Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine
  getTag()Ljava/lang/String; = Tag
  activeState()Lcom/liveperson/infra/statemachine/interfaces/IState; = ActiveState()
  apply(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Apply(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  changeState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = ChangeState(Java.Lang.Object)
  initActiveState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = InitActiveState(Java.Lang.Object)
  postDelayEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = PostDelayEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  postEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = PostEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  setStateMachineExecutor(Lcom/liveperson/infra/statemachine/interfaces/IStateMachineExecutor;)V = SetStateMachineExecutor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor)
com/liveperson/infra/statemachine/interfaces/IStateMachineExecutor = Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor
  isInitialized()Z = IsInitialized
  cancel(Ljava/lang/Runnable;)V = Cancel(Java.Lang.IRunnable)
  post(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Post(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/statemachine/LogoutProcess = Com.Liveperson.Infra.Statemachine.LogoutProcess
  <init>()V = .ctor()
  getLogoutCallback()Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack; = LogoutCallback
  initForLogout()V = InitForLogout()
  logout()V = Logout()
  preLogout(Lcom/liveperson/infra/sdkstatemachine/logout/PreLogoutCompletionListener;)V = PreLogout(Com.Liveperson.Infra.Sdkstatemachine.Logout.IPreLogoutCompletionListener)
  shutDownForLogout(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDownForLogout(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/statemachine/ShutDownProcess = Com.Liveperson.Infra.Statemachine.ShutDownProcess
  <init>()V = .ctor()
  getShutDownCallback()Lcom/liveperson/infra/callbacks/ShutDownLivePersonCallBack; = ShutDownCallback
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/statemachine/StateMachineExecutor = Com.Liveperson.Infra.Statemachine.StateMachineExecutor
  <init>(Ljava/lang/String;Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)V = .ctor(string, Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  isInitialized()Z = IsInitialized
  cancel(Ljava/lang/Runnable;)V = Cancel(Java.Lang.IRunnable)
  post(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Post(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/ui/BuildConfig = Com.Liveperson.Infra.UI.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/infra/ui/view/adapter/BaseRecyclerViewCursorAdapter = Com.Liveperson.Infra.UI.View.Adapter.BaseRecyclerViewCursorAdapter
  <init>(Landroid/content/Context;Landroid/database/Cursor;)V = .ctor(Android.Content.Context, Android.Database.ICursor)
  mContext = MContext
  mCount = MCount
  mCursor = MCursor
  mResourse = MResourse
  mRowIdColumn = MRowIdColumn
  mSelectedPosition = MSelectedPosition
  TAG = Tag
  getCursor()Landroid/database/Cursor; = Cursor
  isCursorValid()Z = IsCursorValid
  getItemCount()I = ItemCount
  changeCursor(Landroid/database/Cursor;)V = ChangeCursor(Android.Database.ICursor)
  getItemViewType(I)I = GetItemViewType(int)
  getObjectAt(I)Ljava/lang/Object; = GetObjectAt(int)
  onBindViewHolder(Landroid/support/v7/widget/RecyclerView$ViewHolder;I)V = OnBindViewHolder(Android.Support.V7.Widget.RecyclerView.ViewHolder, int)
  onCreateViewHolder(Landroid/view/ViewGroup;I)Landroid/support/v7/widget/RecyclerView$ViewHolder; = OnCreateViewHolder(Android.Views.ViewGroup, int)
  setSelectedPosition(I)V = SetSelectedPosition(int)
  swapCursor(Landroid/database/Cursor;)Landroid/database/Cursor; = SwapCursor(Android.Database.ICursor)
com/liveperson/infra/ui/view/adapter/RecyclerViewCursorAdapter = Com.Liveperson.Infra.UI.View.Adapter.RecyclerViewCursorAdapter
  <init>(Landroid/content/Context;Landroid/database/Cursor;)V = .ctor(Android.Content.Context, Android.Database.ICursor)
  TAG = Tag
  extractFromCursor(Landroid/database/Cursor;)Lcom/liveperson/infra/model/Message; = ExtractFromCursor(Android.Database.ICursor)
  getItemViewType(I)I = GetItemViewType(int)
  onBind(Lcom/liveperson/infra/ui/view/adapter/viewholder/MiddleViewHolder;Lcom/liveperson/infra/model/Message;II)V = OnBind(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.MiddleViewHolder, Com.Liveperson.Infra.Model.Message, int, int)
  onCreate(Landroid/view/ViewGroup;I)Lcom/liveperson/infra/ui/view/adapter/viewholder/MiddleViewHolder; = OnCreate(Android.Views.ViewGroup, int)
com/liveperson/infra/ui/view/adapter/StickyHeaderRecyclerViewCursorAdapter = Com.Liveperson.Infra.UI.View.Adapter.StickyHeaderRecyclerViewCursorAdapter
  <init>(Landroid/content/Context;Landroid/database/Cursor;)V = .ctor(Android.Content.Context, Android.Database.ICursor)
  TAG = Tag
  getHeaderId(I)J = GetHeaderId(int)
  onBindHeaderViewHolder(Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder;I)V = OnBindHeaderViewHolder(Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder, int)
  onCreateHeaderViewHolder(Landroid/view/ViewGroup;)Lcom/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder; = OnCreateHeaderViewHolder(Android.Views.ViewGroup)
com/liveperson/infra/ui/view/adapter/viewholder/BaseViewHolder = Com.Liveperson.Infra.UI.View.Adapter.Viewholder.BaseViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mMessageTextView = MMessageTextView
  mTimestampAccessibilityString = MTimestampAccessibilityString
  getTempPosition()I = TempPosition
  setTempPosition(I)V = TempPosition
  getTextToCopy()Ljava/lang/String; = TextToCopy
  applyChanges(Landroid/os/Bundle;Lcom/liveperson/infra/model/Message;)V = ApplyChanges(Android.OS.Bundle, Com.Liveperson.Infra.Model.Message)
  getAccessibilityDateTimeFormat(J)Ljava/lang/String; = GetAccessibilityDateTimeFormat(long)
  getTimeFormat(J)Ljava/lang/String; = GetTimeFormat(long)
  linkifyText(Landroid/widget/TextView;)Z = LinkifyText(Android.Widget.TextView)
  onBind()V = OnBind()
  recycle()V = Recycle()
  setContentDescription(Ljava/lang/String;)V = SetContentDescription(string)
  setCopy(Landroid/view/View$OnClickListener;)V = SetCopy(Android.Views.View.IOnClickListener)
  setLongCopy(Landroid/view/View$OnLongClickListener;)Z = SetLongCopy(Android.Views.View.IOnLongClickListener)
  setMessageTextView(Ljava/lang/String;)V = SetMessageTextView(string)
  setOnClickListener(Landroid/view/View$OnClickListener;)V = SetOnClickListener(Android.Views.View.IOnClickListener)
  setOnLongClickListener(Landroid/view/View$OnLongClickListener;)V = SetOnLongClickListener(Android.Views.View.IOnLongClickListener)
  setTimestampTextView(J)V = SetTimestampTextView(long)
  updateContentDescription()V = UpdateContentDescription()
com/liveperson/infra/ui/view/adapter/viewholder/EndViewHolder = Com.Liveperson.Infra.UI.View.Adapter.Viewholder.EndViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mTimestampTextView = MTimestampTextView
com/liveperson/infra/ui/view/adapter/viewholder/HeaderViewHolder = Com.Liveperson.Infra.UI.View.Adapter.Viewholder.HeaderViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  setHeaderText(Ljava/lang/String;)V = SetHeaderText(string)
com/liveperson/infra/ui/view/adapter/viewholder/MiddleViewHolder = Com.Liveperson.Infra.UI.View.Adapter.Viewholder.MiddleViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
com/liveperson/infra/ui/view/adapter/viewholder/StartViewHolder = Com.Liveperson.Infra.UI.View.Adapter.Viewholder.StartViewHolder
  <init>(Landroid/view/View;)V = .ctor(Android.Views.View)
  mTimestampTextView = MTimestampTextView
com/liveperson/infra/ui/view/header/caching/HeaderProvider = Com.Liveperson.Infra.UI.View.Header.Caching.IHeaderProvider
  getHeader(Landroid/support/v7/widget/RecyclerView;I)Landroid/view/View; = GetHeader(Android.Support.V7.Widget.RecyclerView, int)
  invalidate()V = Invalidate()
com/liveperson/infra/ui/view/header/caching/HeaderViewCache = Com.Liveperson.Infra.UI.View.Header.Caching.HeaderViewCache
  <init>(Lcom/liveperson/infra/ui/view/header/StickyRecyclerHeadersAdapter;Lcom/liveperson/infra/ui/view/header/util/OrientationProvider;)V = .ctor(Com.Liveperson.Infra.UI.View.Header.IStickyRecyclerHeadersAdapter, Com.Liveperson.Infra.UI.View.Header.Util.IOrientationProvider)
  getHeader(Landroid/support/v7/widget/RecyclerView;I)Landroid/view/View; = GetHeader(Android.Support.V7.Widget.RecyclerView, int)
  invalidate()V = Invalidate()
com/liveperson/infra/ui/view/header/calculation/DimensionCalculator = Com.Liveperson.Infra.UI.View.Header.Calculation.DimensionCalculator
  <init>()V = .ctor()
  initMargins(Landroid/graphics/Rect;Landroid/view/View;)V = InitMargins(Android.Graphics.Rect, Android.Views.View)
com/liveperson/infra/ui/view/header/HeaderPositionCalculator = Com.Liveperson.Infra.UI.View.Header.HeaderPositionCalculator
  <init>(Lcom/liveperson/infra/ui/view/header/StickyRecyclerHeadersAdapter;Lcom/liveperson/infra/ui/view/header/caching/HeaderProvider;Lcom/liveperson/infra/ui/view/header/util/OrientationProvider;Lcom/liveperson/infra/ui/view/header/calculation/DimensionCalculator;)V = .ctor(Com.Liveperson.Infra.UI.View.Header.IStickyRecyclerHeadersAdapter, Com.Liveperson.Infra.UI.View.Header.Caching.IHeaderProvider, Com.Liveperson.Infra.UI.View.Header.Util.IOrientationProvider, Com.Liveperson.Infra.UI.View.Header.Calculation.DimensionCalculator)
  hasNewHeader(IZ)Z = HasNewHeader(int, bool)
  hasStickyHeader(Landroid/view/View;II)Z = HasStickyHeader(Android.Views.View, int, int)
  initHeaderBounds(Landroid/graphics/Rect;Landroid/support/v7/widget/RecyclerView;Landroid/view/View;Landroid/view/View;Z)V = InitHeaderBounds(Android.Graphics.Rect, Android.Support.V7.Widget.RecyclerView, Android.Views.View, Android.Views.View, bool)
com/liveperson/infra/ui/view/header/rendering/HeaderRenderer = Com.Liveperson.Infra.UI.View.Header.Rendering.HeaderRenderer
  <init>(Lcom/liveperson/infra/ui/view/header/util/OrientationProvider;)V = .ctor(Com.Liveperson.Infra.UI.View.Header.Util.IOrientationProvider)
  drawHeader(Landroid/support/v7/widget/RecyclerView;Landroid/graphics/Canvas;Landroid/view/View;Landroid/graphics/Rect;)V = DrawHeader(Android.Support.V7.Widget.RecyclerView, Android.Graphics.Canvas, Android.Views.View, Android.Graphics.Rect)
com/liveperson/infra/ui/view/header/StickyRecyclerHeadersAdapter = Com.Liveperson.Infra.UI.View.Header.IStickyRecyclerHeadersAdapter
  getItemCount()I = ItemCount
  getHeaderId(I)J = GetHeaderId(int)
  onBindHeaderViewHolder(Landroid/support/v7/widget/RecyclerView$ViewHolder;I)V = OnBindHeaderViewHolder(Java.Lang.Object, int)
  onCreateHeaderViewHolder(Landroid/view/ViewGroup;)Landroid/support/v7/widget/RecyclerView$ViewHolder; = OnCreateHeaderViewHolder(Android.Views.ViewGroup)
com/liveperson/infra/ui/view/header/StickyRecyclerHeadersDecoration = Com.Liveperson.Infra.UI.View.Header.StickyRecyclerHeadersDecoration
  <init>(Lcom/liveperson/infra/ui/view/header/StickyRecyclerHeadersAdapter;)V = .ctor(Com.Liveperson.Infra.UI.View.Header.IStickyRecyclerHeadersAdapter)
  findHeaderPositionUnder(II)I = FindHeaderPositionUnder(int, int)
  getHeaderView(Landroid/support/v7/widget/RecyclerView;I)Landroid/view/View; = GetHeaderView(Android.Support.V7.Widget.RecyclerView, int)
  invalidateHeaders()V = InvalidateHeaders()
com/liveperson/infra/ui/view/header/util/LinearLayoutOrientationProvider = Com.Liveperson.Infra.UI.View.Header.Util.LinearLayoutOrientationProvider
  <init>()V = .ctor()
  getOrientation(Landroid/support/v7/widget/RecyclerView;)I = GetOrientation(Android.Support.V7.Widget.RecyclerView)
  isReverseLayout(Landroid/support/v7/widget/RecyclerView;)Z = IsReverseLayout(Android.Support.V7.Widget.RecyclerView)
com/liveperson/infra/ui/view/header/util/OrientationProvider = Com.Liveperson.Infra.UI.View.Header.Util.IOrientationProvider
  getOrientation(Landroid/support/v7/widget/RecyclerView;)I = GetOrientation(Android.Support.V7.Widget.RecyclerView)
  isReverseLayout(Landroid/support/v7/widget/RecyclerView;)Z = IsReverseLayout(Android.Support.V7.Widget.RecyclerView)
com/liveperson/infra/ui/view/resources/ResourceHelper = Com.Liveperson.Infra.UI.View.Resources.ResourceHelper
  <init>()V = .ctor()
  updateBackgroundColor(Landroid/view/View;I)V = UpdateBackgroundColor(Android.Views.View, int)
  updateBackgroundDrawable(Landroid/view/View;I)V = UpdateBackgroundDrawable(Android.Views.View, int)
  updateBackgroundSolidColor(Landroid/view/View;I)V = UpdateBackgroundSolidColor(Android.Views.View, int)
  updateBackgroundStrokeColor(Landroid/view/View;II)V = UpdateBackgroundStrokeColor(Android.Views.View, int, int)
  updateTextColor(Landroid/widget/TextView;I)V = UpdateTextColor(Android.Widget.TextView, int)
  updateTextColorLink(Landroid/widget/TextView;I)V = UpdateTextColorLink(Android.Widget.TextView, int)
com/liveperson/infra/ui/view/resources/ResourceManager = Com.Liveperson.Infra.UI.View.Resources.ResourceManager
  instance = Instance
  getColor(I)I = GetColor(int)
  getDimension(I)F = GetDimension(int)
  getDrawable(I)Landroid/graphics/drawable/Drawable; = GetDrawable(int)
  mapColor(II)V = MapColor(int, int)
  mapDimension(IF)V = MapDimension(int, float)
  mapDrawable(II)V = MapDrawable(int, int)
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/ui/view/resources/ResourceManager; = ValueOf(string)
  values()[Lcom/liveperson/infra/ui/view/resources/ResourceManager; = Values()
com/liveperson/infra/ui/view/screen/BaseFragment = Com.Liveperson.Infra.UI.View.Screen.BaseFragment
  <init>()V = .ctor()
com/liveperson/infra/ui/view/ui/CustomButton = Com.Liveperson.Infra.UI.View.UI.CustomButton
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  TAG = Tag
com/liveperson/infra/ui/view/ui/CustomEditText = Com.Liveperson.Infra.UI.View.UI.CustomEditText
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  TAG = Tag
com/liveperson/infra/ui/view/ui/CustomTextView = Com.Liveperson.Infra.UI.View.UI.CustomTextView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  TAG = Tag
com/liveperson/infra/ui/view/ui/TooltipWindow = Com.Liveperson.Infra.UI.View.UI.TooltipWindow
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  TAG = Tag
  isTooltipShown()Z = IsTooltipShown
  dismissTooltip()V = DismissTooltip()
  enable(Z)V = Enable(bool)
  showToolTip(Landroid/view/View;Ljava/lang/String;)V = ShowToolTip(Android.Views.View, string)
  showToolTip(Landroid/view/View;Ljava/lang/String;Z)V = ShowToolTip(Android.Views.View, string, bool)
com/liveperson/infra/ui/view/ui/TouchImageView = Com.Liveperson.Infra.UI.View.UI.touchImageView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getCurrentZoom()F = CurrentZoom
  isZoomed()Z = IsZoomed
  getMaxZoom()F = MaxZoom
  setMaxZoom(F)V = MaxZoom
  getMinZoom()F = MinZoom
  setMinZoom(F)V = MinZoom
  getScrollPosition()Landroid/graphics/PointF; = ScrollPosition
  getZoomedRect()Landroid/graphics/RectF; = ZoomedRect
  canScrollHorizontallyFroyo(I)Z = CanScrollHorizontallyFroyo(int)
  onConfigurationChanged(Landroid/content/res/Configuration;)V = OnConfigurationChanged(Android.Content.Res.Configuration)
  onRestoreInstanceState(Landroid/os/Parcelable;)V = OnRestoreInstanceState(Android.OS.IParcelable)
  onSaveInstanceState()Landroid/os/Parcelable; = OnSaveInstanceState()
  resetZoom()V = ResetZoom()
  setOnDoubleTapListener(Landroid/view/GestureDetector$OnDoubleTapListener;)V = SetOnDoubleTapListener(Android.Views.GestureDetector.IOnDoubleTapListener)
  setOnTouchImageViewListener(Lcom/liveperson/infra/ui/view/ui/TouchImageView$OnTouchImageViewListener;)V = SetOnTouchImageViewListener(Com.Liveperson.Infra.UI.View.UI.touchImageView.IOnTouchImageViewListener)
  setScrollPosition(FF)V = SetScrollPosition(float, float)
  setZoom(Lcom/liveperson/infra/ui/view/ui/TouchImageView;)V = SetZoom(Com.Liveperson.Infra.UI.View.UI.touchImageView)
  setZoom(F)V = SetZoom(float)
  setZoom(FFF)V = SetZoom(float, float, float)
  setZoom(FFFLandroid/widget/ImageView$ScaleType;)V = SetZoom(float, float, float, Android.Widget.ImageView.ScaleType)
com/liveperson/infra/ui/view/uicomponents/BaseEnterMessage = Com.Liveperson.Infra.UI.View.Uicomponents.BaseEnterMessage
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mBrandIdProvider = MBrandIdProvider
  mEnterMessageLayoutSwitcher = MEnterMessageLayoutSwitcher
  mEnterMessageListener = MEnterMessageListener
  mImageSendButton = MImageSendButton
  mIsConnected = MIsConnected
  mTextSendButton = MTextSendButton
  mTrashButton = MTrashButton
  RECORDING_LAYOUT_ANIMATION_DURATION_MILLIS = RecordingLayoutAnimationDurationMillis
  clearText()V = ClearText()
  enableSendButton()V = EnableSendButton()
  extractLinks(Ljava/lang/String;)[Ljava/lang/String; = ExtractLinks(string)
  onAfterChangedText(Ljava/lang/String;)V = OnAfterChangedText(string)
  onBeforeChangedText()V = OnBeforeChangedText()
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onHasText(Z)V = OnHasText(bool)
  sendMessage()V = SendMessage()
  sendMessage(Ljava/lang/String;)V = SendMessage(string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string)
  setBrandIdProvider(Lcom/liveperson/infra/ui/view/uicomponents/IConversationProvider;)V = SetBrandIdProvider(Com.Liveperson.Infra.UI.View.Uicomponents.IConversationProvider)
  setEnterMessageListener(Lcom/liveperson/infra/ui/view/uicomponents/IEnterMessageListener;)V = SetEnterMessageListener(Com.Liveperson.Infra.UI.View.Uicomponents.IEnterMessageListener)
  setOverflowMenu(Lcom/liveperson/infra/ui/view/uicomponents/IOverflowMenu;)V = SetOverflowMenu(Com.Liveperson.Infra.UI.View.Uicomponents.IOverflowMenu)
  setText(Ljava/lang/String;)V = SetText(string)
  shouldUpdateSendButton()Z = ShouldUpdateSendButton()
  showNoNetworkMessage()V = ShowNoNetworkMessage()
  updateSendButtonState()V = UpdateSendButtonState()
com/liveperson/infra/ui/view/uicomponents/ICloseMenuListener = Com.Liveperson.Infra.UI.View.Uicomponents.ICloseMenuListener
  onCloseMenu()V = OnCloseMenu()
com/liveperson/infra/ui/view/uicomponents/IConnectionChangedCustomView = Com.Liveperson.Infra.UI.View.Uicomponents.IConnectionChangedCustomView
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
com/liveperson/infra/ui/view/uicomponents/IConversationProvider = Com.Liveperson.Infra.UI.View.Uicomponents.IConversationProvider
  getBrandId()Ljava/lang/String; = BrandId
  getTargetId()Ljava/lang/String; = TargetId
com/liveperson/infra/ui/view/uicomponents/IEnterMessageListener = Com.Liveperson.Infra.UI.View.Uicomponents.IEnterMessageListener
  onMessageSent()V = OnMessageSent()
  onVoiceRecordingPermissionRequired(Lcom/liveperson/infra/IPermissionCallback;)V = OnVoiceRecordingPermissionRequired(Com.Liveperson.Infra.IPermissionCallback)
com/liveperson/infra/ui/view/uicomponents/IOverflowMenu = Com.Liveperson.Infra.UI.View.Uicomponents.IOverflowMenu
  isMenuOpen()Z = IsMenuOpen
  hide()V = Hide()
  setOnCloseListener(Lcom/liveperson/infra/ui/view/uicomponents/ICloseMenuListener;)V = SetOnCloseListener(Com.Liveperson.Infra.UI.View.Uicomponents.ICloseMenuListener)
  show()V = Show()
com/liveperson/infra/ui/view/utils/ImageUrlUtil = Com.Liveperson.Infra.UI.View.Utils.ImageUrlUtil
  <init>()V = .ctor()
  completeToValidImageUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = CompleteToValidImageUrl(string, string)
com/liveperson/infra/ui/view/utils/ItemsView = Com.Liveperson.Infra.UI.View.Utils.ItemsView
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;ILcom/liveperson/infra/ui/view/utils/ItemsView$CellsFactory;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int, Com.Liveperson.Infra.UI.View.Utils.ItemsView.ICellsFactory)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;Lcom/liveperson/infra/ui/view/utils/ItemsView$CellsFactory;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, Com.Liveperson.Infra.UI.View.Utils.ItemsView.ICellsFactory)
  <init>(Landroid/content/Context;Lcom/liveperson/infra/ui/view/utils/ItemsView$CellsFactory;)V = .ctor(Android.Content.Context, Com.Liveperson.Infra.UI.View.Utils.ItemsView.ICellsFactory)
  add(Ljava/lang/Object;)V = Add(Java.Lang.Object)
  filter(Ljava/lang/String;)V = Filter(string)
  reload()V = Reload()
  remove(Ljava/lang/Object;)V = Remove(Java.Lang.Object)
  setData(Ljava/util/List;)V = SetData(System.Collections.IList)
  withCellType(Ljava/lang/Object;)Lcom/liveperson/infra/ui/view/utils/ItemsView; = WithCellType(Java.Lang.Object)
com/liveperson/infra/ui/view/utils/picasso/CircleTransform = Com.Liveperson.Infra.UI.View.Utils.Picasso.CircleTransform
  <init>()V = .ctor()
  key()Ljava/lang/String; = InvokeKey()
  transform(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap; = Transform(Android.Graphics.Bitmap)
com/liveperson/infra/ui/view/utils/UIUtils = Com.Liveperson.Infra.UI.View.Utils.UIUtils
  <init>()V = .ctor()
  TAG = Tag
  changeCustomTextViewFont(Landroid/widget/TextView;Landroid/content/Context;Landroid/util/AttributeSet;[II)V = ChangeCustomTextViewFont(Android.Widget.TextView, Android.Content.Context, Android.Util.IAttributeSet, int[], int)
  createDialog(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/content/DialogInterface$OnClickListener;Ljava/lang/String;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog; = CreateDialog(Android.Content.Context, string, string, string, Android.Content.IDialogInterfaceOnClickListener, string, Android.Content.IDialogInterfaceOnClickListener)
  detectEmojis(Ljava/lang/String;)I = DetectEmojis(string)
  hideKeyboard(Landroid/app/Activity;)V = HideKeyboard(Android.App.Activity)
  startProgressBarAnimation(Landroid/widget/ImageView;I)V = StartProgressBarAnimation(Android.Widget.ImageView, int)
com/liveperson/infra/utils/AccessibilityChecker = Com.Liveperson.Infra.Utils.AccessibilityChecker
  <init>()V = .ctor()
  exploreByTouchEnabled(Landroid/content/Context;)Z = ExploreByTouchEnabled(Android.Content.Context)
com/liveperson/infra/utils/BitmapLruCache = Com.Liveperson.Infra.Utils.BitmapLruCache
  <init>(I)V = .ctor(int)
  TAG = Tag
  addBitmapToCache(Ljava/lang/String;Landroid/graphics/Bitmap;)V = AddBitmapToCache(string, Android.Graphics.Bitmap)
  getBitmapFromCache(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetBitmapFromCache(string)
com/liveperson/infra/utils/DateUtils = Com.Liveperson.Infra.Utils.DateUtils
  <init>()V = .ctor()
  getEndOfToday()J = EndOfToday
  getBeginningOfDayTime(J)J = GetBeginningOfDayTime(long)
  getDateFormat(Ljava/lang/String;II)Ljava/text/DateFormat; = GetDateFormat(string, int, int)
  getDayOfTheWeek(J)Ljava/lang/String; = GetDayOfTheWeek(long)
  getDurationString(J)Ljava/lang/String; = GetDurationString(long)
  getFormattedDate(Ljava/lang/String;IJ)Ljava/lang/String; = GetFormattedDate(string, int, long)
  getFormattedDateAndTime(Ljava/lang/String;IIJ)Ljava/lang/String; = GetFormattedDateAndTime(string, int, int, long)
  getFormattedDateAndTime(Ljava/lang/String;IIJLjava/lang/String;)Ljava/lang/String; = GetFormattedDateAndTime(string, int, int, long, string)
  getFormattedTime(Ljava/lang/String;IJ)Ljava/lang/String; = GetFormattedTime(string, int, long)
  getFormattedTime(Ljava/lang/String;IJLjava/lang/String;)Ljava/lang/String; = GetFormattedTime(string, int, long, string)
  isInTheLast24hours(J)Z = IsInTheLast24hours(long)
  isToday(J)Z = IsToday(long)
  isTomorrow(J)Z = IsTomorrow(long)
  isYesterday(J)Z = IsYesterday(long)
com/liveperson/infra/utils/DetectHeadsetUnpluggedBroadcastReceiver = Com.Liveperson.Infra.Utils.DetectHeadsetUnpluggedBroadcastReceiver
  <init>()V = .ctor()
  TAG = Tag
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
  onUnpluggedHeadset()V = OnUnpluggedHeadset()
com/liveperson/infra/utils/DispatchQueue = Com.Liveperson.Infra.Utils.DispatchQueue
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  <init>(Ljava/lang/String;ILcom/liveperson/infra/network/socket/IdleQueueHandler;)V = .ctor(string, int, Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler)
  <init>(Ljava/lang/String;Lcom/liveperson/infra/network/socket/IdleQueueHandler;)V = .ctor(string, Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler)
  isCurrentThread()Z = IsCurrentThread
  cleanupQueue()V = CleanupQueue()
  dispose()V = Dispose()
  postRunnable(Ljava/lang/Runnable;)V = PostRunnable(Java.Lang.IRunnable)
  postRunnable(Ljava/lang/Runnable;J)V = PostRunnable(Java.Lang.IRunnable, long)
  queueIdle()Z = QueueIdle()
  removeMessage(I)Z = RemoveMessage(int)
  removeRunnable(Ljava/lang/Runnable;)V = RemoveRunnable(Java.Lang.IRunnable)
  sendMessage(Landroid/os/Message;)V = SendMessage(Android.OS.Message)
  sendMessage(Landroid/os/Message;I)V = SendMessage(Android.OS.Message, int)
  setHandleMessageCallback(Lcom/liveperson/infra/utils/HandleMessageCallback;)V = SetHandleMessageCallback(Com.Liveperson.Infra.Utils.IHandleMessageCallback)
  unregisterQueueIdleCallbacks()V = UnregisterQueueIdleCallbacks()
com/liveperson/infra/utils/EncryptionVersion = Com.Liveperson.Infra.Utils.EncryptionVersion
  NONE = None
  VERSION_1 = Version1
  fromInt(I)Lcom/liveperson/infra/utils/EncryptionVersion; = FromInt(int)
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/utils/EncryptionVersion; = ValueOf(string)
  values()[Lcom/liveperson/infra/utils/EncryptionVersion; = Values()
com/liveperson/infra/utils/FeaturesWrapperUtil = Com.Liveperson.Infra.Utils.FeaturesWrapperUtil
  <init>()V = .ctor()
  getAllFeatures()Ljava/util/HashMap; = AllFeatures
  getInstance()Lcom/liveperson/infra/utils/FeaturesWrapperUtil; = Instance
  getFeature(Ljava/lang/String;)Z = GetFeature(string)
  putFeature(Ljava/lang/String;Z)V = PutFeature(string, bool)
com/liveperson/infra/utils/HandleMessageCallback = Com.Liveperson.Infra.Utils.IHandleMessageCallback
  onHandleMessage(Landroid/os/Message;)V = OnHandleMessage(Android.OS.Message)
com/liveperson/infra/utils/ImageUtils = Com.Liveperson.Infra.Utils.ImageUtils
  <init>()V = .ctor()
  FULL_IMAGE_FOLDER = FullImageFolder
  IMAGES_FOLDER = ImagesFolder
  JPG = Jpg
  PNG = Png
  PREVIEW_IMAGE_FOLDER = PreviewImageFolder
  SAMSUNG = Samsung
  TAG = Tag
  base64ToBitmap(Ljava/lang/String;)Landroid/graphics/Bitmap; = Base64ToBitmap(string)
  base64ToByteArray(Ljava/lang/String;)[B = Base64ToByteArray(string)
  bitmapToBase64(Landroid/graphics/Bitmap;)Ljava/lang/String; = BitmapToBase64(Android.Graphics.Bitmap)
  bitmapToBase64([B)Ljava/lang/String; = BitmapToBase64(byte[])
  blur(Landroid/content/Context;Landroid/graphics/Bitmap;I)Landroid/graphics/Bitmap; = Blur(Android.Content.Context, Android.Graphics.Bitmap, int)
  createBitmap(Landroid/net/Uri;)Landroid/graphics/Bitmap; = CreateBitmap(Android.Net.Uri)
  createBitmapFromURL(Landroid/content/Context;Ljava/lang/String;II)Landroid/graphics/Bitmap; = CreateBitmapFromURL(Android.Content.Context, string, int, int)
  createImageFileForCamera(Landroid/content/Context;Ljava/lang/String;)Landroid/net/Uri; = CreateImageFileForCamera(Android.Content.Context, string)
  createImageOnCanvas(Landroid/content/Context;Landroid/view/WindowManager;Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Drawable; = CreateImageOnCanvas(Android.Content.Context, Android.Views.IWindowManager, Android.Graphics.Bitmap)
  createResizedBitmap(Landroid/net/Uri;IIZ)Landroid/graphics/Bitmap; = CreateResizedBitmap(Android.Net.Uri, int, int, bool)
  createResizedExactBitmap(Landroid/net/Uri;II)Landroid/graphics/Bitmap; = CreateResizedExactBitmap(Android.Net.Uri, int, int)
  decodeExifOrientation(IZ)I = DecodeExifOrientation(int, bool)
  deleteImageFolder()V = DeleteImageFolder()
  getBitmap(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetBitmap(string)
  getFilePath(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/io/File; = GetFilePath(Android.Content.Context, string, string)
  getImagePath(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)Ljava/lang/String; = GetImagePath(Android.Content.Context, Android.Net.Uri, string)
  getImageRotation(Ljava/lang/String;Z)I = GetImageRotation(string, bool)
  getOutputStreamFromBitmap(Landroid/graphics/Bitmap;ILjava/lang/String;)[B = GetOutputStreamFromBitmap(Android.Graphics.Bitmap, int, string)
  saveBase64ToDisk(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = SaveBase64ToDisk(Android.Content.Context, string, string)
  saveBitmapToDisk(Landroid/content/Context;[BLjava/lang/String;Lcom/liveperson/infra/utils/ImageUtils$ImageFolderType;Ljava/lang/String;)Ljava/lang/String; = SaveBitmapToDisk(Android.Content.Context, byte[], string, Com.Liveperson.Infra.Utils.ImageUtils.ImageFolderType, string)
  saveBitmapToDisk(Landroid/content/Context;[BLjava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/ImageUtils$ImageFolderType;)Ljava/lang/String; = SaveBitmapToDisk(Android.Content.Context, byte[], string, string, Com.Liveperson.Infra.Utils.ImageUtils.ImageFolderType)
  saveBitmapToDisk([BLjava/io/File;)Ljava/lang/String; = SaveBitmapToDisk(byte[], Java.IO.File)
com/liveperson/infra/utils/LanguageUtils = Com.Liveperson.Infra.Utils.LanguageUtils
  <init>()V = .ctor()
  TAG = Tag
  getLanguageCode(Ljava/lang/String;)Ljava/lang/String; = GetLanguageCode(string)
  getLocale(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetLocale(string, string)
com/liveperson/infra/utils/LinkPreviewCallback = Com.Liveperson.Infra.Utils.ILinkPreviewCallback
  clean()V = Clean()
  onPos(Lcom/liveperson/infra/utils/SourceContent;Z)V = OnPos(Com.Liveperson.Infra.Utils.SourceContent, bool)
  onPre()V = OnPre()
com/liveperson/infra/utils/LinkPreviewLruCache = Com.Liveperson.Infra.Utils.LinkPreviewLruCache
  DEFAULT_NUM_OF_OBJECTS = DefaultNumOfObjects
  TAG = Tag
  getInstance()Lcom/liveperson/infra/utils/LinkPreviewLruCache; = Instance
  addSourceContentToCache(Ljava/lang/String;Lcom/liveperson/infra/utils/SourceContent;)V = AddSourceContentToCache(string, Com.Liveperson.Infra.Utils.SourceContent)
  getSourceContentFromCache(Ljava/lang/String;)Lcom/liveperson/infra/utils/SourceContent; = GetSourceContentFromCache(string)
com/liveperson/infra/utils/LocalBroadcast = Com.Liveperson.Infra.Utils.LocalBroadcast
  <init>()V = .ctor()
  sendBroadcast(Ljava/lang/String;)V = SendBroadcast(string)
  sendBroadcast(Ljava/lang/String;Landroid/os/Bundle;)V = SendBroadcast(string, Android.OS.Bundle)
com/liveperson/infra/utils/LPAudioUtils = Com.Liveperson.Infra.Utils.LPAudioUtils
  <init>()V = .ctor()
  TAG = Tag
  VOICE_FOLDER = VoiceFolder
  getCurrentPlayingDuration()I = CurrentPlayingDuration
  getCurrentPlayingLocation()I = CurrentPlayingLocation
  isRecording()Z = IsRecording
  getPlayingAudioManager()Lcom/liveperson/infra/controller/PlayingAudioManager; = PlayingAudioManager
  getVoiceFolder()Ljava/lang/String; = VoiceFolder
  bindPlayingAudio(Ljava/lang/String;Lcom/liveperson/infra/utils/LPAudioUtils$PlaybackCallback;)V = BindPlayingAudio(string, Com.Liveperson.Infra.Utils.LPAudioUtils.IPlaybackCallback)
  cancelAndDeleteRecording(Lcom/liveperson/infra/ICallback;)V = CancelAndDeleteRecording(Com.Liveperson.Infra.ICallback)
  deleteVoiceFolder()V = DeleteVoiceFolder()
  generateVoiceFileName()Ljava/lang/String; = GenerateVoiceFileName()
  getDuration(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetDuration(string, Com.Liveperson.Infra.ICallback)
  isPlaying(Ljava/lang/String;)Z = IsPlaying(string)
  pause()V = Pause()
  playAudio(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/LPAudioUtils$PlaybackCallback;)V = PlayAudio(string, string, Com.Liveperson.Infra.Utils.LPAudioUtils.IPlaybackCallback)
  playSound(I)V = PlaySound(int)
  saveByteArrayToDisk([B)Ljava/lang/String; = SaveByteArrayToDisk(byte[])
  startRecording(Ljava/lang/String;ILcom/liveperson/infra/utils/LPAudioUtils$MaxRecordingDurationReachedListener;)Lcom/liveperson/infra/utils/LPAudioUtils$LPRecorderStatus; = StartRecording(string, int, Com.Liveperson.Infra.Utils.LPAudioUtils.IMaxRecordingDurationReachedListener)
  stopPlayback()V = StopPlayback()
  stopRecording(Lcom/liveperson/infra/ICallback;)V = StopRecording(Com.Liveperson.Infra.ICallback)
com/liveperson/infra/utils/MaskedMessage = Com.Liveperson.Infra.Utils.MaskedMessage
  <init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V = .ctor(string, string, bool, string)
  getDbMessage()Ljava/lang/String; = DbMessage
  setDbMessage(Ljava/lang/String;)V = DbMessage
  isMasked()Z = IsMasked
  getMaskedSystemMessage()Ljava/lang/String; = MaskedSystemMessage
  getServerMessage()Ljava/lang/String; = ServerMessage
  setServerMessage(Ljava/lang/String;)V = ServerMessage
com/liveperson/infra/utils/MessageValidator = Com.Liveperson.Infra.Utils.MessageValidator
  <init>(Landroid/content/Context;Z)V = .ctor(Android.Content.Context, bool)
  maskMessage(Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = MaskMessage(string)
com/liveperson/infra/utils/RegexUtil = Com.Liveperson.Infra.Utils.RegexUtil
  <init>()V = .ctor()
  ICON_REV_TAG_PATTERN = IconRevTagPattern
  ICON_TAG_PATTERN = IconTagPattern
  IMAGE_PATTERN = ImagePattern
  IMAGE_TAG_PATTERN = ImageTagPattern
  ITEMPROP_IMAGE_REV_TAG_PATTERN = ItempropImageRevTagPattern
  ITEMPROP_IMAGE_TAG_PATTERN = ItempropImageTagPattern
  METATAG_CONTENT_PATTERN = MetatagContentPattern
  METATAG_PATTERN = MetatagPattern
  SCRIPT_PATTERN = ScriptPattern
  TITLE_PATTERN = TitlePattern
  URL_PATTERN = UrlPattern
  pregMatch(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; = PregMatch(string, string, int)
  pregMatchAll(Ljava/lang/String;Ljava/lang/String;I)Ljava/util/List; = PregMatchAll(string, string, int)
  pregMatchAllExtraImages(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; = PregMatchAllExtraImages(string, string)
  pregMatchAllImages(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; = PregMatchAllImages(string, string)
com/liveperson/infra/utils/SDKUncaughtExceptionHandler = Com.Liveperson.Infra.Utils.SDKUncaughtExceptionHandler
  <init>()V = .ctor()
  getInstance()Lcom/liveperson/infra/utils/SDKUncaughtExceptionHandler; = Instance
  getInstance(Ljava/lang/Thread$UncaughtExceptionHandler;)Lcom/liveperson/infra/utils/SDKUncaughtExceptionHandler; = GetInstance(Java.Lang.Thread.IUncaughtExceptionHandler)
  uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V = UncaughtException(Java.Lang.Thread, Java.Lang.Throwable)
com/liveperson/infra/utils/SourceContent = Com.Liveperson.Infra.Utils.SourceContent
  <init>()V = .ctor()
  getCannonicalUrl()Ljava/lang/String; = CannonicalUrl
  setCannonicalUrl(Ljava/lang/String;)V = CannonicalUrl
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getFinalUrl()Ljava/lang/String; = FinalUrl
  setFinalUrl(Ljava/lang/String;)V = FinalUrl
  getHtmlCode()Ljava/lang/String; = HtmlCode
  setHtmlCode(Ljava/lang/String;)V = HtmlCode
  getImages()Ljava/lang/String; = Images
  setImages(Ljava/lang/String;)V = Images
  getMetaTags()Ljava/util/HashMap; = MetaTags
  setMetaTags(Ljava/util/HashMap;)V = MetaTags
  getRaw()Ljava/lang/String; = Raw
  setRaw(Ljava/lang/String;)V = Raw
  getSiteName()Ljava/lang/String; = SiteName
  setSiteName(Ljava/lang/String;)V = SiteName
  isSuccess()Z = Success
  setSuccess(Z)V = Success
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
  getUrlData()[Ljava/lang/String; = GetUrlData()
  setUrlData([Ljava/lang/String;)V = SetUrlData(string[])
com/liveperson/infra/utils/TextCrawler = Com.Liveperson.Infra.Utils.TextCrawler
  <init>()V = .ctor()
  TIMEOUT_IN_MILLI = TimeoutInMilli
  getSourceContent()Lcom/liveperson/infra/utils/SourceContent; = SourceContent
  makePreview(Lcom/liveperson/infra/utils/LinkPreviewCallback;Ljava/lang/String;)V = MakePreview(Com.Liveperson.Infra.Utils.ILinkPreviewCallback, string)
  parseHtml([Ljava/lang/String;)V = ParseHtml(string[])
com/liveperson/infra/utils/ThreadPoolExecutor = Com.Liveperson.Infra.Utils.ThreadPoolExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;)V = Execute(Java.Lang.IRunnable)
  executeDelayed(Ljava/lang/Runnable;J)V = ExecuteDelayed(Java.Lang.IRunnable, long)
  killAll()V = KillAll()
com/liveperson/infra/utils/UIUtils = Com.Liveperson.Infra.Utils.UIUtils
  <init>()V = .ctor()
  hideKeyboard(Landroid/app/Activity;)V = HideKeyboard(Android.App.Activity)
com/liveperson/infra/utils/UniqueID = Com.Liveperson.Infra.Utils.UniqueID
  <init>()V = .ctor()
  createUniqueMessageEventId()Ljava/lang/String; = CreateUniqueMessageEventId()
  getUniqueID()J = GetUniqueID()
com/liveperson/infra/utils/Utils = Com.Liveperson.Infra.Utils.Utils
  <init>()V = .ctor()
  SHA1 = Sha1
  SHA256 = Sha256
  getResources()Landroid/content/res/Resources; = Resources
  isValidCertificateKey(Ljava/lang/String;)Z = IsValidCertificateKey(string)
  tryParse(Ljava/lang/Object;F)F = TryParse(Java.Lang.Object, float)
  tryParse(Ljava/lang/Object;I)I = TryParse(Java.Lang.Object, int)
com/liveperson/infra/utils/VersionUtils = Com.Liveperson.Infra.Utils.VersionUtils
  <init>()V = .ctor()
  TAG = Tag
  isValidSdkVersion(Ljava/lang/String;)Z = IsValidSdkVersion(string)
  isVersionsEqual(Ljava/lang/String;Ljava/lang/String;)Z = IsVersionsEqual(string, string)
com/liveperson/lp_monitoring_sdk/BuildConfig = Com.Liveperson.Lp_monitoring_sdk.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/messaging/background/BackgroundActionsService = Com.Liveperson.Messaging.Background.BackgroundActionsService
  <init>()V = .ctor()
  EXTRA_ACTION_TYPE = ExtraActionType
  EXTRA_ACTION_TYPE_UPLOAD = ExtraActionTypeUpload
  EXTRA_FILE_TYPE = ExtraFileType
  EXTRA_TYPE_ACTION_DOWNLOAD = ExtraTypeActionDownload
  EXTRA_TYPE_ACTION_REUPLOAD = ExtraTypeActionReupload
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/liveperson/messaging/background/DownloadFileTask = Com.Liveperson.Messaging.Background.DownloadFileTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  mDownloadFileTaskParams = MDownloadFileTaskParams
  isDownloadCompleted()Z = IsDownloadCompleted
  isDownloadFailed()Z = IsDownloadFailed
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionUnavailable()V = OnConnectionUnavailable()
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
  setCallBack(Lcom/liveperson/messaging/background/DownloadFileTaskCallback;)V = SetCallBack(Com.Liveperson.Messaging.Background.IDownloadFileTaskCallback)
  setStatus(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetStatus(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  startDownload()V = StartDownload()
com/liveperson/messaging/background/DownloadFileTaskCallback = Com.Liveperson.Messaging.Background.IDownloadFileTaskCallback
  onDownloadFailed(Lcom/liveperson/messaging/background/DownloadFileTask;Ljava/lang/Throwable;)V = OnDownloadFailed(Com.Liveperson.Messaging.Background.DownloadFileTask, Java.Lang.Throwable)
  onDownloadFinishedSuccessfully(Ljava/lang/String;)V = OnDownloadFinishedSuccessfully(string)
  onReadyToGetUrl()V = OnReadyToGetUrl()
com/liveperson/messaging/background/filesharing/BaseTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.BaseTaskBundle
  <init>()V = .ctor()
  mBrandId = MBrandId
  mRestRequestParams = MRestRequestParams
  mSwiftDomain = MSwiftDomain
  mTargetId = MTargetId
  getBrandId()Ljava/lang/String; = BrandId
  getRestRequestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestRequestParams
  getSwiftDomain()Ljava/lang/String; = SwiftDomain
  getTargetId()Ljava/lang/String; = TargetId
  addBrandId(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddBrandId(string)
  addRestDomain(Lcom/liveperson/messaging/network/http/RestRequestParams;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddRestDomain(Com.Liveperson.Messaging.Network.Http.RestRequestParams)
  addSwiftDomain(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddSwiftDomain(string)
  addTargetId(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/BaseTaskBundle; = AddTargetId(string)
com/liveperson/messaging/background/filesharing/BaseUploadTask = Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask
  <init>(Ljava/lang/Integer;)V = .ctor(Java.Lang.Integer)
  mFileRowId = MFileRowId
  mMessageRowId = MMessageRowId
  mOriginalFileByteArray = MOriginalFileByteArray
  mRelativePath = MRelativePath
  mStatus = MStatus
  mUploadTimeout = MUploadTimeout
  sendMessageCommand = SendMessageCommand
  TAG = Tag
  getEventId()Ljava/lang/String; = EventId
  isUploadCompleted()Z = IsUploadCompleted
  isUploadFailed()Z = IsUploadFailed
  getMessageRowId()J = MessageRowId
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  getFileByteArray()[B = GetFileByteArray()
  onConnectionAvailable()V = OnConnectionAvailable()
  onConnectionUnavailable()V = OnConnectionUnavailable()
  onUploadFailed(Ljava/lang/Throwable;)V = OnUploadFailed(Java.Lang.Throwable)
  sendPublishFile(Z)V = SendPublishFile(bool)
  setCallBack(Lcom/liveperson/messaging/background/UploadFileTaskCallback;)V = SetCallBack(Com.Liveperson.Messaging.Background.IUploadFileTaskCallback)
  setSendMessageCommandCallback()V = SetSendMessageCommandCallback()
  setStatus(Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = SetStatus(Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
  startUpload()V = StartUpload()
com/liveperson/messaging/background/filesharing/DownloadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle
  <init>()V = .ctor()
  getContext()Landroid/content/Context; = Context
  getFileRowId()J = FileRowId
  getMessageRowId()J = MessageRowId
  getRelativePath()Ljava/lang/String; = RelativePath
  getRestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestParams
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddFileRowId(long)
  addMessageRowId(J)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddMessageRowId(long)
  addRelativePath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = AddRelativePath(string)
  build(JLandroid/content/Context;)Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle; = Build(long, Android.Content.Context)
com/liveperson/messaging/background/filesharing/FileExtensionTypes = Com.Liveperson.Messaging.Background.Filesharing.FileExtensionTypes
  <init>()V = .ctor()
  getImageExtensions()Ljava/util/List; = ImageExtensions
  getImageExtensionsAsSqlString()Ljava/lang/String; = ImageExtensionsAsSqlString
  getVoiceExtensions()Ljava/util/List; = VoiceExtensions
  getVoiceExtensionsAsSqlString()Ljava/lang/String; = VoiceExtensionsAsSqlString
com/liveperson/messaging/background/filesharing/FileSharingType = Com.Liveperson.Messaging.Background.Filesharing.FileSharingType
  IMAGE = Image
  VOICE = Voice
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/FileSharingType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/background/filesharing/FileSharingType; = Values()
com/liveperson/messaging/background/filesharing/image/DownloadImageTask = Com.Liveperson.Messaging.Background.Filesharing.Image.DownloadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
com/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.Image.ReUploadImageTaskBundle
  <init>()V = .ctor()
  getEventId()Ljava/lang/String; = EventId
  getFileRowId()J = FileRowId
  getOriginalMessageTime()J = OriginalMessageTime
  getThumbnailLocalPath()Ljava/lang/String; = ThumbnailLocalPath
  addEventID(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddEventID(string)
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddFileRowId(long)
  addOriginalLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddOriginalLocalPath(string)
  addOriginalMessageTime(J)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddOriginalMessageTime(long)
  addThumbnailLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle; = AddThumbnailLocalPath(string)
com/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.Image.UploadImageTaskBundle
  <init>()V = .ctor()
  isImageFromCamera()Z = IsImageFromCamera
  addImageFromCamera(Z)Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle; = AddImageFromCamera(bool)
com/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.ReUploadFileTaskBundle
  <init>()V = .ctor()
  getEventId()Ljava/lang/String; = EventId
  getFileRowId()J = FileRowId
  getOriginalMessageTime()J = OriginalMessageTime
  addEventID(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddEventID(string)
  addFileRowId(J)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddFileRowId(long)
  addOriginalLocalPath(Ljava/lang/String;)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddOriginalLocalPath(string)
  addOriginalMessageTime(J)Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle; = AddOriginalMessageTime(long)
com/liveperson/messaging/background/filesharing/UploadFileTaskBundle = Com.Liveperson.Messaging.Background.Filesharing.UploadFileTaskBundle
  <init>()V = .ctor()
  mFileContentType = MFileContentType
  mFilePath = MFilePath
  mFileTypeExtension = MFileTypeExtension
  mFileUri = MFileUri
  TAG = Tag
  getFileContentType()Ljava/lang/String; = FileContentType
  getFilePath()Ljava/lang/String; = FilePath
  getFileTypeExtension()Ljava/lang/String; = FileTypeExtension
  setFileTypeExtension(Ljava/lang/String;)V = FileTypeExtension
  getFileUri()Landroid/net/Uri; = FileUri
  getMessage()Lcom/liveperson/infra/utils/MaskedMessage; = Message
  getRestParams()Lcom/liveperson/messaging/network/http/RestRequestParams; = RestParams
  getTaskId()I = TaskId
  addFileUri(Landroid/net/Uri;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = AddFileUri(Android.Net.Uri)
  addMessage(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = AddMessage(Com.Liveperson.Infra.Utils.MaskedMessage)
  build(ILandroid/content/Context;)Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = Build(int, Android.Content.Context)
  setTaskID(I)V = SetTaskID(int)
com/liveperson/messaging/background/filesharing/voice/DownloadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.DownloadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/DownloadFileTaskBundle;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.DownloadFileTaskBundle)
  saveFileToDisk([B)Ljava/lang/String; = SaveFileToDisk(byte[])
com/liveperson/messaging/background/filesharing/voice/ReUploadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.ReUploadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/ReUploadFileTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.ReUploadFileTaskBundle, Java.Lang.Integer)
  TAG = Tag
com/liveperson/messaging/background/filesharing/voice/UploadVoiceTask = Com.Liveperson.Messaging.Background.Filesharing.Voice.UploadVoiceTask
  <init>(Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.UploadFileTaskBundle, Java.Lang.Integer)
  mPreviewContentType = MPreviewContentType
  mUploadFileTaskBundle = MUploadFileTaskBundle
  TAG = Tag
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  createSendMessageCommand(Ljava/lang/String;Ljava/lang/String;)V = CreateSendMessageCommand(string, string)
  getFileByteArray()[B = GetFileByteArray()
com/liveperson/messaging/background/FileSharingManager = Com.Liveperson.Messaging.Background.FileSharingManager
  <init>(Lcom/liveperson/messaging/Messaging;Landroid/content/Context;)V = .ctor(Com.Liveperson.Messaging.Messaging, Android.Content.Context)
  SERVICE_EXTRA_BRAND_ID = ServiceExtraBrandId
  SERVICE_EXTRA_EVENT_ID = ServiceExtraEventId
  SERVICE_EXTRA_FILE_CAPTION = ServiceExtraFileCaption
  SERVICE_EXTRA_FILE_ROW_ID = ServiceExtraFileRowId
  SERVICE_EXTRA_FILE_SHARING_TYPE = ServiceExtraFileSharingType
  SERVICE_EXTRA_FILE_URI = ServiceExtraFileUri
  SERVICE_EXTRA_IMAGE_FROM_CAMERA = ServiceExtraImageFromCamera
  SERVICE_EXTRA_MESSAGE = ServiceExtraMessage
  SERVICE_EXTRA_MESSAGE_ROW_ID = ServiceExtraMessageRowId
  SERVICE_EXTRA_ORIGINAL_MESSAGE_TIME = ServiceExtraOriginalMessageTime
  SERVICE_EXTRA_TARGET_ID = ServiceExtraTargetId
  getInProgressUploadMessageRowIdsString()Ljava/lang/String; = InProgressUploadMessageRowIdsString
  isPendingActions()Z = IsPendingActions
  actionFromService(Landroid/content/Intent;Lcom/liveperson/messaging/background/BackgroundActionsService$ServiceActionCallbackListener;)V = ActionFromService(Android.Content.Intent, Com.Liveperson.Messaging.Background.BackgroundActionsService.IServiceActionCallbackListener)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLcom/liveperson/messaging/background/FileSharingManager$FileDownloadProgressListener;)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long, Com.Liveperson.Messaging.Background.FileSharingManager.IFileDownloadProgressListener)
  removeMultipleOlderFiles(Ljava/lang/String;ILjava/lang/String;)V = RemoveMultipleOlderFiles(string, int, string)
  reUploadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLcom/liveperson/messaging/background/FileSharingManager$FileUploadProgressListener;)V = ReUploadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, long, long, Com.Liveperson.Messaging.Background.FileSharingManager.IFileUploadProgressListener)
  uploadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLcom/liveperson/messaging/background/FileSharingManager$FileUploadProgressListener;)V = UploadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool, Com.Liveperson.Messaging.Background.FileSharingManager.IFileUploadProgressListener)
com/liveperson/messaging/background/ReUploadImageTask = Com.Liveperson.Messaging.Background.ReUploadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/image/ReUploadImageTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.Image.ReUploadImageTaskBundle, Java.Lang.Integer)
com/liveperson/messaging/background/UploadFileTaskCallback = Com.Liveperson.Messaging.Background.IUploadFileTaskCallback
  onFileAddedToDB()V = OnFileAddedToDB()
  onUploadFailed(Lcom/liveperson/messaging/background/filesharing/BaseUploadTask;Ljava/lang/Throwable;)V = OnUploadFailed(Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask, Java.Lang.Throwable)
  onUploadFinishedSuccessfully(Lcom/liveperson/messaging/background/filesharing/BaseUploadTask;)V = OnUploadFinishedSuccessfully(Com.Liveperson.Messaging.Background.Filesharing.BaseUploadTask)
com/liveperson/messaging/background/UploadImageTask = Com.Liveperson.Messaging.Background.UploadImageTask
  <init>(Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle;Ljava/lang/Integer;)V = .ctor(Com.Liveperson.Messaging.Background.Filesharing.Image.UploadImageTaskBundle, Java.Lang.Integer)
  mBase64 = MBase64
  uploadImageTaskParams = UploadImageTaskParams
  getTaskId()I = TaskId
  getThumbnailBase64()Ljava/lang/String; = ThumbnailBase64
  getUploadImageTaskParams()Lcom/liveperson/messaging/background/filesharing/image/UploadImageTaskBundle; = UploadImageTaskParams
  getUploadTaskBundle()Lcom/liveperson/messaging/background/filesharing/UploadFileTaskBundle; = UploadTaskBundle
  createOriginalImageByteArray(Landroid/graphics/Bitmap;Ljava/lang/String;)V = CreateOriginalImageByteArray(Android.Graphics.Bitmap, string)
  createSendMessageCommand(Ljava/lang/String;Ljava/lang/String;)V = CreateSendMessageCommand(string, string)
  getFileByteArray()[B = GetFileByteArray()
  processOriginalImage(IZ)Landroid/graphics/Bitmap; = ProcessOriginalImage(int, bool)
  processThumbnailImage(IZ)Landroid/graphics/Bitmap; = ProcessThumbnailImage(int, bool)
  saveOriginalImage(Landroid/graphics/Bitmap;)Ljava/lang/String; = SaveOriginalImage(Android.Graphics.Bitmap)
  saveThumbnailImage(Landroid/graphics/Bitmap;)Ljava/lang/String; = SaveThumbnailImage(Android.Graphics.Bitmap)
com/liveperson/messaging/commands/BasicQueryMessagesCommand = Com.Liveperson.Messaging.Commands.BasicQueryMessagesCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  brandID = BrandID
  controller = Controller
  conversationServerId = ConversationServerId
  mResponseCallBack = MResponseCallBack
  targetId = TargetId
  updateUI = UpdateUI
  setResponseCallBack(Lcom/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback;)V = SetResponseCallBack(Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback)
com/liveperson/messaging/commands/ChangeChatStateCommand = Com.Liveperson.Messaging.Commands.ChangeChatStateCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  execute()V = Execute()
com/liveperson/messaging/commands/ChangeConversationTTRCommand = Com.Liveperson.Messaging.Commands.ChangeConversationTTRCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string, Com.Liveperson.Api.Response.Types.TTRType)
  execute()V = Execute()
com/liveperson/messaging/commands/DeliveryStatusUpdateCommand = Com.Liveperson.Messaging.Commands.DeliveryStatusUpdateCommand
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(string, string, string, int)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;)V = .ctor(string, string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = .ctor(string, string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus, Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, System.Collections.Generic.IList<Java.Lang.Integer>)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/GetUnreadMessagesCountCommand = Com.Liveperson.Messaging.Commands.GetUnreadMessagesCountCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/InitAmsSessionCommand = Com.Liveperson.Messaging.Commands.InitAmsSessionCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Infra.ICallback)
  mBrandId = MBrandId
  mCallback = MCallback
  mController = MController
  mTasks = MTasks
  execute()V = Execute()
  initTasks()V = InitTasks()
com/liveperson/messaging/commands/QueryMessagesUMSCommand = Com.Liveperson.Messaging.Commands.QueryMessagesUMSCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, int, bool)
  execute()V = Execute()
com/liveperson/messaging/commands/RegisterPusherCommand = Com.Liveperson.Messaging.Commands.RegisterPusherCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/commands/ReSendImageCommand = Com.Liveperson.Messaging.Commands.ReSendImageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;JJ)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, long, long)
com/liveperson/messaging/commands/ResendMessageCommand = Com.Liveperson.Messaging.Commands.ResendMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/ResendURLMessageCommand = Com.Liveperson.Messaging.Commands.ResendURLMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/ReSendVoiceCommand = Com.Liveperson.Messaging.Commands.ReSendVoiceCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;JJLjava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, long, long, string, string)
  TAG = Tag
com/liveperson/messaging/commands/ResolveConversationCommand = Com.Liveperson.Messaging.Commands.ResolveConversationCommand
  <init>(Lcom/liveperson/messaging/model/AmsConversations;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Model.AmsConversations, string, string)
  execute()V = Execute()
  setOfflineMode(Z)V = SetOfflineMode(bool)
com/liveperson/messaging/commands/SendCsatCommand = Com.Liveperson.Messaging.Commands.SendCsatCommand
  <init>(Ljava/lang/String;Ljava/lang/String;II)V = .ctor(string, string, int, int)
  execute()V = Execute()
com/liveperson/messaging/commands/SendFileCommand = Com.Liveperson.Messaging.Commands.SendFileCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  mCallback = MCallback
  mCaption = MCaption
  mMessageRowId = MMessageRowId
  mPreview = MPreview
  getMessageTime()J = MessageTime
  addMessageToDB()V = AddMessageToDB()
  failMessage()V = FailMessage()
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
  setCallback(Lcom/liveperson/messaging/commands/SendFileCommand$SendFileCommandListener;)V = SetCallback(Com.Liveperson.Messaging.Commands.SendFileCommand.ISendFileCommandListener)
  setFileDetails(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetFileDetails(string, string, string)
  setSendViaRest(ZLcom/liveperson/messaging/network/http/RestRequestParams;)V = SetSendViaRest(bool, Com.Liveperson.Messaging.Network.Http.RestRequestParams)
  updateMessageConversationID()V = UpdateMessageConversationID()
com/liveperson/messaging/commands/SendFormSubmissionMessageCommand = Com.Liveperson.Messaging.Commands.SendFormSubmissionMessageCommand
  <init>(Lcom/liveperson/messaging/model/Form;Lcom/liveperson/infra/utils/MaskedMessage;Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Model.Form, Com.Liveperson.Infra.Utils.MaskedMessage, Com.Liveperson.Messaging.Messaging)
com/liveperson/messaging/commands/SendGenerateUploadTokenCommand = Com.Liveperson.Messaging.Commands.SendGenerateUploadTokenCommand
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, string, string, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/commands/SendImageCommand = Com.Liveperson.Messaging.Commands.SendImageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
com/liveperson/messaging/commands/SendMessageCommand = Com.Liveperson.Messaging.Commands.SendMessageCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.Utils.MaskedMessage)
  mBrandId = MBrandId
  mConsumerId = MConsumerId
  mController = MController
  mEventId = MEventId
  mMessage = MMessage
  mTargetId = MTargetId
  getEventId()Ljava/lang/String; = EventId
  addMessageToDBAndSend(Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)V = AddMessageToDBAndSend(string, Com.Liveperson.Infra.Utils.MaskedMessage)
  createMessageRequest(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = CreateMessageRequest(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  createNewChatMessage(Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage; = CreateNewChatMessage(string, Com.Liveperson.Infra.Utils.MaskedMessage)
  createPendingConversation(Ljava/lang/String;)Lcom/liveperson/api/request/BaseAMSSocketRequest; = CreatePendingConversation(string)
  createTempConversationId()Ljava/lang/String; = CreateTempConversationId()
  execute()V = Execute()
  sendMessage(Ljava/lang/String;Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = SendMessage(string, Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
  sendMessage(Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string)
  sendMessageIfConversationOpen()V = SendMessageIfConversationOpen()
com/liveperson/messaging/commands/SendMessageWithURLCommand = Com.Liveperson.Messaging.Commands.SendMessageWithURLCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, string, string, string, string, string)
com/liveperson/messaging/commands/SendSetUserProfileCommand = Com.Liveperson.Messaging.Commands.SendSetUserProfileCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/SendVoiceCommand = Com.Liveperson.Messaging.Commands.SendVoiceCommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/MaskedMessage;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, Com.Liveperson.Infra.Utils.MaskedMessage, string)
  getMessageType(Lcom/liveperson/infra/utils/MaskedMessage;)Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType(Com.Liveperson.Infra.Utils.MaskedMessage)
  setDurationAsCaption(J)V = SetDurationAsCaption(long)
com/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionCallback = Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsAccountConnectionCallback
  onTaskError(Lcom/liveperson/messaging/TaskType;Ljava/lang/Throwable;)V = OnTaskError(Com.Liveperson.Messaging.TaskType, Java.Lang.Object)
  onTaskSuccess()V = OnTaskSuccess()
  setSecondaryTask(Z)V = SetSecondaryTask(bool)
com/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask
  <init>()V = .ctor()
  mCallback = MCallback
  getName()Ljava/lang/String; = Name
  requireSDKinForeground()Z = RequireSDKinForeground()
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setIsSecondaryTask(Z)V = SetIsSecondaryTask(bool)
com/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback = Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback
  onTaskError(Lcom/liveperson/messaging/SocketTaskType;Ljava/lang/Throwable;)V = OnTaskError(Com.Liveperson.Messaging.SocketTaskType, Java.Lang.Object)
  onTaskSuccess()V = OnTaskSuccess()
com/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.BaseAmsSocketConnectionTask
  <init>()V = .ctor()
  mCallback = MCallback
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
com/liveperson/messaging/commands/tasks/BaseConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.BaseConnectionTask
  mBrandId = MBrandId
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
com/liveperson/messaging/commands/tasks/CloseConnectionTask = Com.Liveperson.Messaging.Commands.Tasks.CloseConnectionTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/CollectSDKConfigurationDataTask = Com.Liveperson.Messaging.Commands.Tasks.CollectSDKConfigurationDataTask
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  TAG = Tag
  isShouldExecute()Z = IsShouldExecute
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/ConfigurationFetcherTask = Com.Liveperson.Messaging.Commands.Tasks.ConfigurationFetcherTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/CsdsTask = Com.Liveperson.Messaging.Commands.Tasks.CsdsTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/DataBaseTask = Com.Liveperson.Messaging.Commands.Tasks.DataBaseTask
  <init>(Lcom/liveperson/messaging/model/AmsUsers;Lcom/liveperson/messaging/model/AmsConversations;Lcom/liveperson/messaging/model/AmsMessages;)V = .ctor(Com.Liveperson.Messaging.Model.AmsUsers, Com.Liveperson.Messaging.Model.AmsConversations, Com.Liveperson.Messaging.Model.AmsMessages)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/FetchConversationManager = Com.Liveperson.Messaging.Commands.Tasks.FetchConversationManager
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  mConversationUtils = MConversationUtils
  numConversationToUpdateUI = NumConversationToUpdateUI
  usersUpdating = UsersUpdating
  fetchConversation(Lcom/liveperson/messaging/model/Conversation;)V = FetchConversation(Com.Liveperson.Messaging.Model.Conversation)
  fetchConversationsFirstTime(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = FetchConversationsFirstTime(string, System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>, System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>)
  init()V = Init()
  refreshConversation(Lcom/liveperson/messaging/model/Conversation;)V = RefreshConversation(Com.Liveperson.Messaging.Model.Conversation)
com/liveperson/messaging/commands/tasks/GetAgentUserTask = Com.Liveperson.Messaging.Commands.Tasks.GetAgentUserTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/GetClockTask = Com.Liveperson.Messaging.Commands.Tasks.GetClockTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/GetConsumerUserTask = Com.Liveperson.Messaging.Commands.Tasks.GetConsumerUserTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/HandlePendingMessagesTask = Com.Liveperson.Messaging.Commands.Tasks.HandlePendingMessagesTask
  <init>(Lcom/liveperson/messaging/model/AmsMessages;Lcom/liveperson/messaging/model/AmsConversations;Lcom/liveperson/messaging/controller/ConnectionsController;)V = .ctor(Com.Liveperson.Messaging.Model.AmsMessages, Com.Liveperson.Messaging.Model.AmsConversations, Com.Liveperson.Messaging.Controller.ConnectionsController)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/IdpTask = Com.Liveperson.Messaging.Commands.Tasks.IdpTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Model.AmsUsers, string)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/JWTExpirationTask = Com.Liveperson.Messaging.Commands.Tasks.JWTExpirationTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/LptagTask = Com.Liveperson.Messaging.Commands.Tasks.LptagTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/MessagingEventSubscriptionManager = Com.Liveperson.Messaging.Commands.Tasks.MessagingEventSubscriptionManager
  <init>()V = .ctor()
  getERROR_MESSAGE()Ljava/lang/String; = ERROR_MESSAGE
  getMESSAGE_EVENT_COMPLETED()Ljava/lang/String; = MESSAGE_EVENT_COMPLETED
  getSUCCESS()Ljava/lang/String; = SUCCESS
  addSubscription(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;IZ)V = AddSubscription(Com.Liveperson.Messaging.Messaging, string, string, int, bool)
  clearAllSubscriptions()V = ClearAllSubscriptions()
  onReceivedEvent(Ljava/lang/String;)Z = OnReceivedEvent(string)
  shouldUpdateUI(Ljava/lang/String;)Z = ShouldUpdateUI(string)
com/liveperson/messaging/commands/tasks/OpenSocketTask = Com.Liveperson.Messaging.Commands.Tasks.OpenSocketTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/controller/ConnectionsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Controller.ConnectionsController)
  AUTHORIZATION = Authorization
  CLIENT_PROPERTIES = ClientProperties
  JWT = Jwt
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/RefreshNotUpdatedConversationsTask = Com.Liveperson.Messaging.Commands.Tasks.RefreshNotUpdatedConversationsTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/RemoveOlderImagesTask = Com.Liveperson.Messaging.Commands.Tasks.RemoveOlderImagesTask
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/SiteSettingsFetcherTask = Com.Liveperson.Messaging.Commands.Tasks.SiteSettingsFetcherTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  SITE_SETTINGS_AUDIO_SHARING_ID_VALUE = SiteSettingsAudioSharingIdValue
  SITE_SETTINGS_MIN_VERSION_ID_VALUE = SiteSettingsMinVersionIdValue
  SITE_SETTINGS_PHOTO_SHARING_ID_VALUE = SiteSettingsPhotoSharingIdValue
  SITE_SETTINGS_PROPERTY_NAME_ID = SiteSettingsPropertyNameId
  SITE_SETTINGS_PROPERTY_NAME_PROPERTY_VALUE = SiteSettingsPropertyNamePropertyValue
  SITE_SETTINGS_PROPERTY_NAME_VALUE = SiteSettingsPropertyNameValue
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/SubscribeExConversationsTask = Com.Liveperson.Messaging.Commands.Tasks.SubscribeExConversationsTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  execute()V = Execute()
  getSubscribeExConversationsRequest(Ljava/lang/String;JJ)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = GetSubscribeExConversationsRequest(string, long, long)
com/liveperson/messaging/commands/tasks/UnAuthGetEngagementTask = Com.Liveperson.Messaging.Commands.Tasks.UnAuthGetEngagementTask
  <init>(Lcom/liveperson/messaging/controller/AccountsController;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController)
  TAG = Tag
  getName()Ljava/lang/String; = Name
  execute()V = Execute()
com/liveperson/messaging/commands/tasks/UnsubscribeExConversationTask = Com.Liveperson.Messaging.Commands.Tasks.UnsubscribeExConversationTask
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/commands/UnregisterPusherCommand = Com.Liveperson.Messaging.Commands.UnregisterPusherCommand
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, Com.Liveperson.Messaging.Model.AmsUsers, string, string, Com.Liveperson.Infra.ICallback, bool)
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/controller/AccountsController = Com.Liveperson.Messaging.Controller.AccountsController
  <init>(Lcom/liveperson/messaging/controller/ClientProperties;)V = .ctor(Com.Liveperson.Messaging.Controller.ClientProperties)
  ALPHA_CSDS_DOMAIN = AlphaCsdsDomain
  DOMAIN_VERSION_QUERY = DomainVersionQuery
  DOMAIN_VERSION_VALUE = DomainVersionValue
  KEY_TOKEN = KeyToken
  mAccounts = MAccounts
  QA_CSDS_DOMAIN = QaCsdsDomain
  SOCKET_URL = SocketUrl
  getClientProperties()Lcom/liveperson/messaging/controller/ClientProperties; = ClientProperties
  addNewAccount(Ljava/lang/String;)V = AddNewAccount(string)
  clear()V = Clear()
  getAccount(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsAccount; = GetAccount(string)
  getCertificatePinningKeys(Ljava/lang/String;)Ljava/util/List; = GetCertificatePinningKeys(string)
  getConnectionParamsCache(Ljava/lang/String;)Lcom/liveperson/messaging/controller/connection/IConnectionParamsCache; = GetConnectionParamsCache(string)
  getConnectionUrl(Ljava/lang/String;)Ljava/lang/String; = GetConnectionUrl(string)
  getConnectionUrlForLogs(Ljava/lang/String;)Ljava/lang/String; = GetConnectionUrlForLogs(string)
  getDomain(Ljava/lang/String;)Ljava/lang/String; = GetDomain(string)
  getLPAuthenticationParams(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = GetLPAuthenticationParams(string)
  getServiceUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetServiceUrl(string, string)
  getToken(Ljava/lang/String;)Ljava/lang/String; = GetToken(string)
  getTokenizerUrl(Ljava/lang/String;)Ljava/lang/String; = GetTokenizerUrl(string)
  isAutoMessagesEnabled(Ljava/lang/String;)Z = IsAutoMessagesEnabled(string)
  isCsdsDataMissing(Ljava/lang/String;)Z = IsCsdsDataMissing(string)
  isTokenExpired(Ljava/lang/String;)Z = IsTokenExpired(string)
  setAppId(Ljava/lang/String;Ljava/lang/String;)V = SetAppId(string, string)
  setCSDSMap(Ljava/lang/String;Ljava/util/HashMap;)Z = SetCSDSMap(string, System.Collections.Generic.IDictionary<string, string>)
  setLPAuthenticationParams(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = SetLPAuthenticationParams(string, Com.Liveperson.Infra.LPAuthenticationParams)
  setToken(Ljava/lang/String;Ljava/lang/String;)V = SetToken(string, string)
com/liveperson/messaging/controller/AmsReadController = Com.Liveperson.Messaging.Controller.AmsReadController
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  TAG = Tag
  registerForegroundConnectionReceiver(Ljava/lang/String;)V = RegisterForegroundConnectionReceiver(string)
  shutDown()V = ShutDown()
com/liveperson/messaging/controller/ClientProperties = Com.Liveperson.Messaging.Controller.ClientProperties
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getJsonString()Ljava/lang/String; = JsonString
  addToUriBuilder(Landroid/net/Uri$Builder;)V = AddToUriBuilder(Android.Net.Uri.Builder)
  clear()V = Clear()
  saveAppId(Ljava/lang/String;)V = SaveAppId(string)
  saveSDKVersion(Ljava/lang/String;)V = SaveSDKVersion(string)
com/liveperson/messaging/controller/connection/BaseConnectionState = Com.Liveperson.Messaging.Controller.Connection.BaseConnectionState
  <init>(Lcom/liveperson/messaging/controller/connection/BaseConnectionState;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.Connection.BaseConnectionState, string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  name = Name
  TAG = Tag
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/BackgroundEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/BackgroundTimeOutEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundTimeOutEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ConnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ConnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/DisconnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.DisconnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ForegroundEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ForegroundEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/NetworkAvailableEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkAvailableEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/NetworkLostEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkLostEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/RunTaskEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.RunTaskEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SecondaryConnectEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryConnectEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SecondaryTaskSuccessEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryTaskSuccessEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SendStateEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SendStateEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ServiceOffEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOffEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ServiceOnEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOnEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/ShutDownEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ShutDownEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/SocketProblemEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SocketProblemEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskFailedEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskFailedEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskSuccessEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskSuccessEvent)
  visit(Lcom/liveperson/messaging/controller/connection/connectionevents/TaskTimeOutEvent;)V = Visit(Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskTimeOutEvent)
com/liveperson/messaging/controller/connection/connectionevents/BackgroundEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/BackgroundTimeOutEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.BackgroundTimeOutEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ConnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ConnectEvent
  <init>()V = .ctor()
  <init>(Z)V = .ctor(bool)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  connectInBG()Z = ConnectInBG()
com/liveperson/messaging/controller/connection/connectionevents/DisconnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.DisconnectEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ForegroundEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ForegroundEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/NetworkAvailableEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkAvailableEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/NetworkLostEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.NetworkLostEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/RunTaskEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.RunTaskEvent
  <init>()V = .ctor()
  <init>(II)V = .ctor(int, int)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SecondaryConnectEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryConnectEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SecondaryTaskSuccessEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SecondaryTaskSuccessEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SendStateEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SendStateEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ServiceOffEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOffEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ServiceOnEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ServiceOnEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/ShutDownEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.ShutDownEvent
  <init>(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = .ctor(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  getListener()Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener; = Listener
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/SocketProblemEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.SocketProblemEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskFailedEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskFailedEvent
  <init>(Ljava/lang/String;Lcom/liveperson/messaging/TaskType;Ljava/lang/Exception;)V = .ctor(string, Com.Liveperson.Messaging.TaskType, Java.Lang.Exception)
  getException()Ljava/lang/Exception; = Exception
  getTaskName()Ljava/lang/String; = TaskName
  getType()Lcom/liveperson/messaging/TaskType; = Type
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskSuccessEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskSuccessEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/messaging/controller/connection/connectionevents/TaskTimeOutEvent = Com.Liveperson.Messaging.Controller.Connection.Connectionevents.TaskTimeOutEvent
  <init>(Lcom/liveperson/messaging/commands/tasks/BaseAmsAccountConnectionTask;)V = .ctor(Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask)
  getTaskName()Ljava/lang/String; = TaskName
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  failTask()V = FailTask()
com/liveperson/messaging/controller/connection/ConnectionParamsCache = Com.Liveperson.Messaging.Controller.Connection.ConnectionParamsCache
  <init>(Ljava/lang/String;)V = .ctor(string)
  AC_CDN_VERSION_KEY = AcCdnVersionKey
  AUTO_MESSAGES_ENABLED_KEY = AutoMessagesEnabledKey
  CSDS_AC_CDN_DOMAIN_KEY = CsdsAcCdnDomainKey
  CSDS_AMS_TOKENIZER_DOMAIN_KEY = CsdsAmsTokenizerDomainKey
  CSDS_IDP_DOMAIN_KEY = CsdsIdpDomainKey
  CSDS_INCA_KEY = CsdsIncaKey
  CSDS_LE_CDN_DOMAIN_KEY = CsdsLeCdnDomainKey
  CSDS_LOGGOS_DOMAIN_KEY = CsdsLoggosDomainKey
  CSDS_PUSHER_DOMAIN_KEY = CsdsPusherDomainKey
  CSDS_SWIFT_DOMAIN_KEY = CsdsSwiftDomainKey
  CSDS_UMS_DOMAIN_KEY = CsdsUmsDomainKey
  FULL_CONNECTION_FLOW_REQUIRED_KEY = FullConnectionFlowRequiredKey
  LE_CDN_VERSION_KEY = LeCdnVersionKey
  TAG = Tag
  getAcCdnSdkMinVersion()Ljava/lang/String; = AcCdnSdkMinVersion
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  isFullConnectionFlowRequired()Z = FullConnectionFlowRequired
  setFullConnectionFlowRequired(Z)V = FullConnectionFlowRequired
  isCsdsFilled()Z = IsCsdsFilled
  isVersionsCompatible()Z = IsVersionsCompatible
  getLeCdnSdkMinVersion()Ljava/lang/String; = LeCdnSdkMinVersion
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateAcCdnVersion(Ljava/lang/String;)Z = UpdateAcCdnVersion(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
  updateLeCdnVersion(Ljava/lang/String;)Z = UpdateLeCdnVersion(string)
com/liveperson/messaging/controller/connection/ConnectionStateMachine = Com.Liveperson.Messaging.Controller.Connection.ConnectionStateMachine
  <init>(Lcom/liveperson/messaging/controller/connection/MessagingStateMachineInterface;Lcom/liveperson/messaging/controller/connection/InternetInformationProvider;Lcom/liveperson/infra/ForegroundServiceInterface;Ljava/lang/String;Lcom/liveperson/messaging/controller/connection/IConnectionListener;)V = .ctor(Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface, Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider, Com.Liveperson.Infra.IForegroundServiceInterface, string, Com.Liveperson.Messaging.Controller.Connection.IConnectionListener)
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  moveToBackground(J)V = MoveToBackground(long)
  moveToForeground()V = MoveToForeground()
  networkAvailable()V = NetworkAvailable()
  networkLost()V = NetworkLost()
  onSocketProblem()V = OnSocketProblem()
  serviceStarted()V = ServiceStarted()
  serviceStopped()V = ServiceStopped()
  setConnectingTasks(Ljava/util/List;)V = SetConnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  setDisconnectingTasks(Ljava/util/List;)V = SetDisconnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting(Z)V = StartConnecting(bool)
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/controller/connection/ConnectionStateMachineOld = Com.Liveperson.Messaging.Controller.Connection.ConnectionStateMachineOld
  <init>(Lcom/liveperson/messaging/Messaging;Lcom/liveperson/messaging/controller/connection/InternetInformationProvider;Ljava/lang/String;Lcom/liveperson/messaging/controller/connection/IConnectionListener;)V = .ctor(Com.Liveperson.Messaging.Messaging, Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider, string, Com.Liveperson.Messaging.Controller.Connection.IConnectionListener)
  mConnectingTasks = MConnectingTasks
  mController = MController
  mDisconnectingTasks = MDisconnectingTasks
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setConnectingTasks(Ljava/util/List;)V = SetConnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  setDisconnectingTasks(Ljava/util/List;)V = SetDisconnectingTasks(System.Collections.Generic.IList<Com.Liveperson.Messaging.Commands.Tasks.BaseAmsAccountConnectionTask>)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting()V = StartConnecting()
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/controller/connection/ConnectionTasksHolder = Com.Liveperson.Messaging.Controller.Connection.ConnectionTasksHolder
  <init>(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;Lcom/liveperson/messaging/controller/connection/MessagingStateMachineInterface;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine, Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface, string)
  constructPrimaryFullConnectionTasks()Ljava/util/List; = ConstructPrimaryFullConnectionTasks()
  constructPrimaryShortConnectionTasks()Ljava/util/List; = ConstructPrimaryShortConnectionTasks()
  constructSecondaryConnectionTasks()Ljava/util/List; = ConstructSecondaryConnectionTasks()
  getDisconnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetDisconnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getPrimaryFullConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetPrimaryFullConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getPrimaryShortConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetPrimaryShortConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  getSecondaryConnectionTasks(Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)Ljava/util/List; = GetSecondaryConnectionTasks(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
com/liveperson/messaging/controller/connection/IConnectionListener = Com.Liveperson.Messaging.Controller.Connection.IConnectionListener
  notifyConnected()V = NotifyConnected()
  notifyDisconnected()V = NotifyDisconnected()
  notifyError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = NotifyError(Com.Liveperson.Messaging.TaskType, string)
  notifyStartConnecting()V = NotifyStartConnecting()
  notifyStartDisconnecting()V = NotifyStartDisconnecting()
  notifyTokenExpired()V = NotifyTokenExpired()
  notifyUserExpired()V = NotifyUserExpired()
com/liveperson/messaging/controller/connection/IConnectionParamsCache = Com.Liveperson.Messaging.Controller.Connection.IConnectionParamsCache
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  isFullConnectionFlowRequired()Z = FullConnectionFlowRequired
  setFullConnectionFlowRequired(Z)V = FullConnectionFlowRequired
  isCsdsFilled()Z = IsCsdsFilled
  isVersionsCompatible()Z = IsVersionsCompatible
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateAcCdnVersion(Ljava/lang/String;)Z = UpdateAcCdnVersion(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
  updateLeCdnVersion(Ljava/lang/String;)Z = UpdateLeCdnVersion(string)
com/liveperson/messaging/controller/connection/InternetInformationProvider = Com.Liveperson.Messaging.Controller.Connection.IInternetInformationProvider
  isNetworkAvailable()Z = IsNetworkAvailable
  registerToNetworkChanges()V = RegisterToNetworkChanges()
  unregisterToNetworkChanges()V = UnregisterToNetworkChanges()
com/liveperson/messaging/controller/connection/MessagingStateMachineInterface = Com.Liveperson.Messaging.Controller.Connection.IMessagingStateMachineInterface
  getAccountsController()Lcom/liveperson/messaging/controller/AccountsController; = AccountsController
  getAmsConversations()Lcom/liveperson/messaging/model/AmsConversations; = AmsConversations
  getAmsMessages()Lcom/liveperson/messaging/model/AmsMessages; = AmsMessages
  getAmsUsers()Lcom/liveperson/messaging/model/AmsUsers; = AmsUsers
  getConnectionController()Lcom/liveperson/messaging/controller/ConnectionsController; = ConnectionController
  getMessagingController()Lcom/liveperson/messaging/IMessaging; = MessagingController
com/liveperson/messaging/controller/ConnectionsController = Com.Liveperson.Messaging.Controller.ConnectionsController
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  KEY_PREF_LAST_UPDATE_TIME = KeyPrefLastUpdateTime
  mBrandConnection = MBrandConnection
  mConnectionReceiver = MConnectionReceiver
  mController = MController
  mSubscriptionBrand = MSubscriptionBrand
  addNewConnection(Ljava/lang/String;)V = AddNewConnection(string)
  clear()V = Clear()
  connect(Ljava/lang/String;)V = Connect(string)
  connect(Ljava/lang/String;Z)V = Connect(string, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  getBrandIDForSubscription(Ljava/lang/String;)Ljava/lang/String; = GetBrandIDForSubscription(string)
  getClockDiff(Ljava/lang/String;)J = GetClockDiff(string)
  getConnection(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsConnection; = GetConnection(string)
  getLastUpdateTime(Ljava/lang/String;)J = GetLastUpdateTime(string)
  getSubscriptionId(Ljava/lang/String;)Ljava/lang/String; = GetSubscriptionId(string)
  initConnectionReceiver()V = InitConnectionReceiver()
  isConnecting(Ljava/lang/String;)Z = IsConnecting(string)
  isFirstNotificationAfterSubscribe(Ljava/lang/String;)Z = IsFirstNotificationAfterSubscribe(string)
  isLastUpdateTimeExists(Ljava/lang/String;)Z = IsLastUpdateTimeExists(string)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  isSocketReady(Ljava/lang/String;)Z = IsSocketReady(string)
  isUpdated(Ljava/lang/String;)Z = IsUpdated(string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;)V = MoveToForeground(string)
  networkAvailable(Ljava/lang/String;)V = NetworkAvailable(string)
  networkLost(Ljava/lang/String;)V = NetworkLost(string)
  onResumeConnection()V = OnResumeConnection()
  registerSocket(Ljava/lang/String;)Lcom/liveperson/messaging/model/AmsConnection$AmsSocketState; = RegisterSocket(string)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setClockDiff(Ljava/lang/String;J)V = SetClockDiff(string, long)
  setFirstNotificationAfterSubscribe(Ljava/lang/String;Z)V = SetFirstNotificationAfterSubscribe(string, bool)
  setLastUpdateTime(Ljava/lang/String;J)V = SetLastUpdateTime(string, long)
  setSubscription(Ljava/lang/String;Ljava/lang/String;)V = SetSubscription(string, string)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  unregisterConnectionReceiver()V = UnregisterConnectionReceiver()
com/liveperson/messaging/ConversationActionFailedReason = Com.Liveperson.Messaging.ConversationActionFailedReason
  CONVERSATION_NOT_ACTIVE = ConversationNotActive
  NO_NETWORK = NoNetwork
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ValueOf(string)
  values()[Lcom/liveperson/messaging/ConversationActionFailedReason; = Values()
com/liveperson/messaging/exception/FileSharingException = Com.Liveperson.Messaging.Exception.FileSharingException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/liveperson/messaging/GeneralMessagingResponseHandler = Com.Liveperson.Messaging.GeneralMessagingResponseHandler
  createInstance(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = CreateInstance(string)
com/liveperson/messaging/IMessaging = Com.Liveperson.Messaging.IMessaging
  isInitialized()Z = IsInitialized
  changeChatState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ChangeChatState(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  checkActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckActiveConversation(string, Com.Liveperson.Infra.ICallback)
  checkAgentID(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckAgentID(string, Com.Liveperson.Infra.ICallback)
  checkConversationIsMarkedAsUrgent(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckConversationIsMarkedAsUrgent(string, Com.Liveperson.Infra.ICallback)
  clearHistory(Ljava/lang/String;)Z = ClearHistory(string)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;Z)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long)
  generateUploadToken(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = GenerateUploadToken(string, string, string)
  getMaskedMessage(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = GetMaskedMessage(string, string)
  getUnreadMessagesCount(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetUnreadMessagesCount(string, string, Com.Liveperson.Infra.ICallback)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  markConversationAsNormal(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsNormal(string, string)
  markConversationAsUrgent(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsUrgent(string, string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = MoveToForeground(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  reconnect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = Reconnect(string, Com.Liveperson.Infra.LPAuthenticationParams)
  registerPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = RegisterPusher(string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  removeCallback()V = RemoveCallback()
  removeMultipleOlderImages(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = RemoveMultipleOlderImages(Android.Content.Context, string, string)
  resendMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resendMessage(Ljava/lang/String;Ljava/lang/String;JLcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resolveConversation(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ResolveConversation(string, string)
  sendCSAT(Ljava/lang/String;Ljava/lang/String;II)V = SendCSAT(string, string, int, int)
  sendFileMessage(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = SendFileMessage(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool)
  sendFormSubmissionMessageCommand(Ljava/lang/String;)V = SendFormSubmissionMessageCommand(string)
  sendMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string, string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string, string, string)
  sendUserProfile(Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = SendUserProfile(string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterPusher(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = UnregisterPusher(string, string, Com.Liveperson.Infra.ICallback, bool)
  updateMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
com/liveperson/messaging/LivePersonEventsProxy = Com.Liveperson.Messaging.LivePersonEventsProxy
  onAgentAvatarTapped(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentAvatarTapped(Com.Liveperson.Messaging.Model.AgentData)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/AgentData;)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.AgentData)
  onAgentTyping(Z)V = OnAgentTyping(bool)
  onConnectionChanged(Z)V = OnConnectionChanged(bool)
  onConversationMarkedAsNormal()V = OnConversationMarkedAsNormal()
  onConversationMarkedAsUrgent()V = OnConversationMarkedAsUrgent()
  onConversationResolved()V = OnConversationResolved()
  onConversationResolved(Lcom/liveperson/api/response/types/CloseReason;)V = OnConversationResolved(Com.Liveperson.Api.Response.Types.CloseReason)
  onConversationResolved(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationResolved(Com.Liveperson.Api.Sdk.LPConversationData)
  onConversationStarted()V = OnConversationStarted()
  onConversationStarted(Lcom/liveperson/api/sdk/LPConversationData;)V = OnConversationStarted(Com.Liveperson.Api.Sdk.LPConversationData)
  onCsatDismissed()V = OnCsatDismissed()
  onCsatLaunched()V = OnCsatLaunched()
  onCsatSkipped()V = OnCsatSkipped()
  onCsatSubmitted(Ljava/lang/String;)V = OnCsatSubmitted(string)
  onError(Lcom/liveperson/messaging/TaskType;Ljava/lang/String;)V = OnError(Com.Liveperson.Messaging.TaskType, string)
  onOfflineHoursChanges(Z)V = OnOfflineHoursChanges(bool)
  onStructuredContentLinkClicked(Ljava/lang/String;)V = OnStructuredContentLinkClicked(string)
  onTokenExpired()V = OnTokenExpired()
  onUnauthenticatedUserExpired()V = OnUnauthenticatedUserExpired()
  onUserActionOnPreventedPermission(Lcom/liveperson/api/sdk/PermissionType;)V = OnUserActionOnPreventedPermission(Com.Liveperson.Api.Sdk.PermissionType)
  onUserDeniedPermission(Lcom/liveperson/api/sdk/PermissionType;Z)V = OnUserDeniedPermission(Com.Liveperson.Api.Sdk.PermissionType, bool)
  removeCallback()V = RemoveCallback()
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
com/liveperson/messaging/Messaging = Com.Liveperson.Messaging.Messaging
  <init>()V = .ctor()
  amsConversations = AmsConversations
  amsFiles = AmsFiles
  amsMessages = AmsMessages
  amsReadController = AmsReadController
  amsUsers = AmsUsers
  FORM_TITLE = FormTitle
  INVITATION_ID = InvitationId
  mAccountsController = MAccountsController
  mConnectionController = MConnectionController
  mEventsProxy = MEventsProxy
  NO_FILE_ROW_ID = NoFileRowId
  SUBMISSION_ID = SubmissionId
  getAudioUtils()Lcom/liveperson/infra/utils/LPAudioUtils; = AudioUtils
  getConversationViewParams()Lcom/liveperson/infra/ConversationViewParams; = ConversationViewParams
  setConversationViewParams(Lcom/liveperson/infra/ConversationViewParams;)V = ConversationViewParams
  getFileSharingManager()Lcom/liveperson/messaging/background/FileSharingManager; = FileSharingManager
  getImageForegroundServiceDownloadNotificationBuilder()Landroid/app/Notification$Builder; = ImageForegroundServiceDownloadNotificationBuilder
  setImageForegroundServiceDownloadNotificationBuilder(Landroid/app/Notification$Builder;)V = ImageForegroundServiceDownloadNotificationBuilder
  getImageForegroundServiceUploadNotificationBuilder()Landroid/app/Notification$Builder; = ImageForegroundServiceUploadNotificationBuilder
  setImageForegroundServiceUploadNotificationBuilder(Landroid/app/Notification$Builder;)V = ImageForegroundServiceUploadNotificationBuilder
  getImageServicePendingIntent()Landroid/app/PendingIntent; = ImageServicePendingIntent
  setImageServicePendingIntent(Landroid/app/PendingIntent;)V = ImageServicePendingIntent
  getInProgressUploadMessageRowIdsString()Ljava/lang/String; = InProgressUploadMessageRowIdsString
  isEnableStructuredContent()Z = IsEnableStructuredContent
  isInitialized()Z = IsInitialized
  getMessagingEventSubscriptionManager()Lcom/liveperson/messaging/commands/tasks/MessagingEventSubscriptionManager; = MessagingEventSubscriptionManager
  bootstrapRegistration()V = BootstrapRegistration()
  changeChatState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ChangeChatState(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  checkActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckActiveConversation(string, Com.Liveperson.Infra.ICallback)
  checkAgentID(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckAgentID(string, Com.Liveperson.Infra.ICallback)
  checkConversationIsMarkedAsUrgent(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = CheckConversationIsMarkedAsUrgent(string, Com.Liveperson.Infra.ICallback)
  clear()V = Clear()
  clearHistory(Ljava/lang/String;)Z = ClearHistory(string)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  connect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;Z)V = Connect(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams, bool)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  downloadFile(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = DownloadFile(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, long, long)
  generateUploadToken(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = GenerateUploadToken(string, string, string)
  getActiveConversation(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetActiveConversation(string, Com.Liveperson.Infra.ICallback)
  getMaskedMessage(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = GetMaskedMessage(string, string)
  getOriginatorId(Ljava/lang/String;)Ljava/lang/String; = GetOriginatorId(string)
  getUnreadMessagesCount(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetUnreadMessagesCount(string, string, Com.Liveperson.Infra.ICallback)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  initBrand(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = InitBrand(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  isConversationClosed(Ljava/lang/String;)Z = IsConversationClosed(string)
  isSocketOpen(Ljava/lang/String;)Z = IsSocketOpen(string)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  markConversationAsNormal(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsNormal(string, string)
  markConversationAsUrgent(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = MarkConversationAsUrgent(string, string)
  moveToBackground(Ljava/lang/String;J)V = MoveToBackground(string, long)
  moveToForeground(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)V = MoveToForeground(string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  onAgentDetailsChanged(Lcom/liveperson/messaging/model/MessagingUserProfile;Z)V = OnAgentDetailsChanged(Com.Liveperson.Messaging.Model.MessagingUserProfile, bool)
  onMessageTimeout(Ljava/lang/String;)V = OnMessageTimeout(string)
  reconnect(Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;)V = Reconnect(string, Com.Liveperson.Infra.LPAuthenticationParams)
  registerPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = RegisterPusher(string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  removeCallback()V = RemoveCallback()
  removeMultipleOlderImages(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = RemoveMultipleOlderImages(Android.Content.Context, string, string)
  resendMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resendMessage(Ljava/lang/String;Ljava/lang/String;JLcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)I = ResendMessage(string, string, long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  resolveConversation(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/ConversationActionFailedReason; = ResolveConversation(string, string)
  sendCSAT(Ljava/lang/String;Ljava/lang/String;II)V = SendCSAT(string, string, int, int)
  sendDeliveryStatusUpdateCommand(Ljava/lang/String;Ljava/lang/String;ILcom/liveperson/api/response/types/DeliveryStatus;Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = SendDeliveryStatusUpdateCommand(string, string, int, Com.Liveperson.Api.Response.Types.DeliveryStatus, Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
  sendFileMessage(Lcom/liveperson/messaging/background/filesharing/FileSharingType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = SendFileMessage(Com.Liveperson.Messaging.Background.Filesharing.FileSharingType, string, string, string, string, bool)
  sendFormSubmissionMessageCommand(Ljava/lang/String;)V = SendFormSubmissionMessageCommand(string)
  sendMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessage(string, string, string)
  sendMessageWithURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendMessageWithURL(string, string, string, string, string, string, string, string)
  sendUserProfile(Ljava/lang/String;Lcom/liveperson/messaging/model/UserProfileBundle;)V = SendUserProfile(string, Com.Liveperson.Messaging.Model.UserProfileBundle)
  serviceStarted(Ljava/lang/String;)V = ServiceStarted(string)
  serviceStopped(Ljava/lang/String;)V = ServiceStopped(string)
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterPusher(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/ICallback;Z)V = UnregisterPusher(string, string, Com.Liveperson.Infra.ICallback, bool)
  updateMessage(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessage(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
com/liveperson/messaging/MessagingFactory = Com.Liveperson.Messaging.MessagingFactory
  <init>()V = .ctor()
  instance = Instance
  messagingController = MessagingController
  getController()Lcom/liveperson/messaging/Messaging; = Controller
  getInstance()Lcom/liveperson/messaging/MessagingFactory; = Instance
  isInitialized()Z = IsInitialized
  bootstrapRegistration()V = BootstrapRegistration()
  init(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  logout(Landroid/content/Context;Lcom/liveperson/messaging/MessagingInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Messaging.MessagingInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
com/liveperson/messaging/MessagingInitData = Com.Liveperson.Messaging.MessagingInitData
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  getAppId()Ljava/lang/String; = AppId
  getBrandId()Ljava/lang/String; = BrandId
com/liveperson/messaging/model/AcUserData = Com.Liveperson.Messaging.Model.AcUserData
  <init>(Ljava/lang/String;)V = .ctor(string)
  getEmail()Ljava/lang/String; = Email
  getEmployeeId()Ljava/lang/String; = EmployeeId
  getFirstName()Ljava/lang/String; = FirstName
  getFullName()Ljava/lang/String; = FullName
  getLastName()Ljava/lang/String; = LastName
  getNickName()Ljava/lang/String; = NickName
  getPictureUrl()Ljava/lang/String; = PictureUrl
com/liveperson/messaging/model/AgentData = Com.Liveperson.Messaging.Model.AgentData
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  mAvatarURL = MAvatarURL
  mEmployeeId = MEmployeeId
  mFirstName = MFirstName
  mLastName = MLastName
  mNickName = MNickName
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/messaging/model/AmsAccount = Com.Liveperson.Messaging.Model.AmsAccount
  <init>(Ljava/lang/String;)V = .ctor(string)
  BROADCAST_KEY_AUTH_COMPLETED_ACTION = BroadcastKeyAuthCompletedAction
  KEY_ACCOUNT_NON_AUTH_ENC = KeyAccountNonAuthEnc
  KEY_ACCOUNT_TOKEN = KeyAccountToken
  KEY_ACCOUNT_TOKEN_ENC = KeyAccountTokenEnc
  KEY_CONNECTOR_ID_ENC = KeyConnectorIdEnc
  KEY_CONSUMER_ID_ENC = KeyConsumerIdEnc
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getConnectionParamsCache()Lcom/liveperson/messaging/controller/connection/IConnectionParamsCache; = ConnectionParamsCache
  getConnectorId()Ljava/lang/String; = ConnectorId
  setConnectorId(Ljava/lang/String;)V = ConnectorId
  getDomain()Ljava/lang/String; = Domain
  isAuthenticated()Z = IsAuthenticated
  isAuthenticatedCompleted()Z = IsAuthenticatedCompleted
  isAutoMessagesEnabled()Z = IsAutoMessagesEnabled
  isCsdsDataMissing()Z = IsCsdsDataMissing
  isHostAppJWTExpired()Z = IsHostAppJWTExpired
  isTokenExpired()Z = IsTokenExpired
  getLPAuthenticationParams()Lcom/liveperson/infra/LPAuthenticationParams; = LPAuthenticationParams
  setLPAuthenticationParams(Lcom/liveperson/infra/LPAuthenticationParams;)V = LPAuthenticationParams
  getNonAuthCode()Ljava/lang/String; = NonAuthCode
  setNonAuthCode(Ljava/lang/String;)V = NonAuthCode
  getOriginalConsumerId()Ljava/lang/String; = OriginalConsumerId
  setOriginalConsumerId(Ljava/lang/String;)V = OriginalConsumerId
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
  getServiceUrl(Ljava/lang/String;)Ljava/lang/String; = GetServiceUrl(string)
  sendAuthenticationCompletedStatus()V = SendAuthenticationCompletedStatus()
  setCSDSMap(Ljava/util/HashMap;)Z = SetCSDSMap(System.Collections.Generic.IDictionary<string, string>)
com/liveperson/messaging/model/AmsConnection = Com.Liveperson.Messaging.Model.AmsConnection
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string)
  BROADCAST_AMS_CONNECTION_UPDATE_ACTION = BroadcastAmsConnectionUpdateAction
  BROADCAST_AMS_CONNECTION_UPDATE_EXTRA = BroadcastAmsConnectionUpdateExtra
  BROADCAST_CONNECTING_TO_SERVER_ERROR = BroadcastConnectingToServerError
  BROADCAST_KEY_BRAND_ID = BroadcastKeyBrandId
  BROADCAST_KEY_SOCKET_READY_ACTION = BroadcastKeySocketReadyAction
  BROADCAST_KEY_SOCKET_READY_EXTRA = BroadcastKeySocketReadyExtra
  BROADCAST_SOCKET_OPEN_ACTION = BroadcastSocketOpenAction
  BROADCAST_START_CONNECTING = BroadcastStartConnecting
  LOGIN_FLOW_TAG = LoginFlowTag
  mBrandId = MBrandId
  mClockDiff = MClockDiff
  mController = MController
  mLastUpdateTime = MLastUpdateTime
  mPreferenceManager = MPreferenceManager
  mSocketState = MSocketState
  mStateMachine = MStateMachine
  TAG = Tag
  isAgentDetailsUpdated()Z = AgentDetailsUpdated
  setAgentDetailsUpdated(Z)V = AgentDetailsUpdated
  getClockDiff()J = ClockDiff
  isFirstNotificationAfterSubscribe()Z = FirstNotificationAfterSubscribe
  setFirstNotificationAfterSubscribe(Z)V = FirstNotificationAfterSubscribe
  isConnecting()Z = IsConnecting
  isLastUpdateTimeExists()Z = IsLastUpdateTimeExists
  isSocketOpen()Z = IsSocketOpen
  isUpdated()Z = IsUpdated
  setIsUpdated(Z)V = IsUpdated
  getLastUpdateTime()J = LastUpdateTime
  isSocketReady()Z = SocketReady
  setSocketReady(Z)V = SocketReady
  getUpdates()V = GetUpdates()
  init()V = Init()
  moveToBackground(J)V = MoveToBackground(long)
  moveToForeground()V = MoveToForeground()
  networkAvailable()V = NetworkAvailable()
  networkLost()V = NetworkLost()
  onSocketProblem()V = OnSocketProblem()
  registerSocket()Lcom/liveperson/messaging/model/AmsConnection$AmsSocketState; = RegisterSocket()
  serviceStarted()V = ServiceStarted()
  serviceStopped()V = ServiceStopped()
  setClock(J)V = SetClock(long)
  setLastUpdateTime(J)Z = SetLastUpdateTime(long)
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
  startConnecting(Z)V = StartConnecting(bool)
  startDisconnecting()V = StartDisconnecting()
  unregisterSocketListener()V = UnregisterSocketListener()
com/liveperson/messaging/model/AmsConnectionAnalytics = Com.Liveperson.Messaging.Model.AmsConnectionAnalytics
  <init>()V = .ctor()
  TAG = Tag
  closeConnectionTaskEnd()V = CloseConnectionTaskEnd()
  closeConnectionTaskStart()V = CloseConnectionTaskStart()
  collectSDKConfigurationDataTaskEnd()V = CollectSDKConfigurationDataTaskEnd()
  collectSDKConfigurationDataTaskStart()V = CollectSDKConfigurationDataTaskStart()
  configurationFetcherTaskEnd()V = ConfigurationFetcherTaskEnd()
  configurationFetcherTaskStart()V = ConfigurationFetcherTaskStart()
  connected()V = Connected()
  csdsTaskEnd()V = CsdsTaskEnd()
  csdsTaskStart()V = CsdsTaskStart()
  databaseTaskEnd()V = DatabaseTaskEnd()
  databaseTaskStart()V = DatabaseTaskStart()
  idpTaskEnd()V = IdpTaskEnd()
  idpTaskStart()V = IdpTaskStart()
  lptagTaskEnd()V = LptagTaskEnd()
  lptagTaskStart()V = LptagTaskStart()
  openSocketTaskEnd()V = OpenSocketTaskEnd()
  openSocketTaskStart()V = OpenSocketTaskStart()
  removeOlderImagesTaskEnd()V = RemoveOlderImagesTaskEnd()
  removeOlderImagesTaskStart()V = RemoveOlderImagesTaskStart()
  siteSettingsFetcherTaskEnd()V = SiteSettingsFetcherTaskEnd()
  siteSettingsFetcherTaskStart()V = SiteSettingsFetcherTaskStart()
  socketReady()V = SocketReady()
  startConnecting()V = StartConnecting()
  startDisconnecting()V = StartDisconnecting()
com/liveperson/messaging/model/AmsConversations = Com.Liveperson.Messaging.Model.AmsConversations
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  acceptedSequenceEvents = AcceptedSequenceEvents
  BROADCAST_UPDATE_CONVERSATION = BroadcastUpdateConversation
  BROADCAST_UPDATE_CONVERSATION_CLOSED = BroadcastUpdateConversationClosed
  BROADCAST_UPDATE_CONVERSATION_OFF_HOURS = BroadcastUpdateConversationOffHours
  BROADCAST_UPDATE_CONVERSATIONS_LIST = BroadcastUpdateConversationsList
  BROADCAST_UPDATE_CONVERSATION_TTR = BroadcastUpdateConversationTtr
  BROADCAST_UPDATE_CSAT_CONVERSATION = BroadcastUpdateCsatConversation
  BROADCAST_UPDATE_FORM_URL = BroadcastUpdateFormUrl
  BROADCAST_UPDATE_NEW_CONVERSATION_MSG = BroadcastUpdateNewConversationMsg
  BROADCAST_UPDATE_UNREAD_MSG = BroadcastUpdateUnreadMsg
  DELAY_TILL_WHEN = DelayTillWhen
  DELAY_TILL_WHEN_CHANGED = DelayTillWhenChanged
  KEY_CONVERSATION_ASSIGNED_AGENT = KeyConversationAssignedAgent
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_CONVERSATION_SHOWED_CSAT = KeyConversationShowedCsat
  KEY_CONVERSATION_STATE = KeyConversationState
  KEY_CONVERSATION_TARGET_ID = KeyConversationTargetId
  KEY_CONVERSATION_TTR_TIME = KeyConversationTtrTime
  KEY_WELCOME_CONVERSATION_ID = KeyWelcomeConversationId
  mController = MController
  mConversationsByAccountId = MConversationsByAccountId
  mConversationsByServerId = MConversationsByServerId
  getFetchConversationManager()Lcom/liveperson/messaging/commands/tasks/FetchConversationManager; = FetchConversationManager
  addConversationToMaps(Ljava/lang/String;Lcom/liveperson/messaging/model/Conversation;)V = AddConversationToMaps(string, Com.Liveperson.Messaging.Model.Conversation)
  addUpdateRequestInProgress(Ljava/lang/String;)V = AddUpdateRequestInProgress(string)
  calculateEffectiveTTR(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJJ)J = CalculateEffectiveTTR(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long, long)
  clear()V = Clear()
  clearConversations(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = ClearConversations(string)
  createDummyConversationForFirstMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V = CreateDummyConversationForFirstMessage(string, string, string, long, long)
  createIdleConversation(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = CreateIdleConversation(string, string, string, long)
  createNewCurrentConversation(Lcom/liveperson/messaging/model/ConversationData;)Lcom/liveperson/messaging/model/Conversation; = CreateNewCurrentConversation(Com.Liveperson.Messaging.Model.ConversationData)
  createPendingConversation(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = CreatePendingConversation(string, string, string, long)
  deleteTempConversationServerID(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = DeleteTempConversationServerID(string)
  fetchPreviousConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = FetchPreviousConversation(string)
  getActiveConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetActiveConversation(string)
  getConversation(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversation(string)
  getConversationById(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConversationById(string, string)
  getConversationByServerIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConversationByServerIDFromDB(string)
  getConversationFromBrandIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromBrandIdMap(string)
  getConversationFromServerIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromServerIdMap(string)
  getConversationFromTargetIdMap(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetConversationFromTargetIdMap(string)
  getNewestClosedConversation(Ljava/lang/String;)Lcom/liveperson/messaging/model/Conversation; = GetNewestClosedConversation(string)
  getNotUpdatedConversations(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetNotUpdatedConversations(string)
  isConversationActive(Ljava/lang/String;)Z = IsConversationActive(string)
  isMoreConversationAvailableToLoad(Ljava/lang/String;)Z = IsMoreConversationAvailableToLoad(string)
  loadConversationForBrand(Ljava/lang/String;)V = LoadConversationForBrand(string)
  markAllPendingConversationsAsFailed(Ljava/lang/String;)V = MarkAllPendingConversationsAsFailed(string)
  notifyClosedConversationFromDB(Ljava/lang/String;)V = NotifyClosedConversationFromDB(string)
  notifyOffHoursStatus(Ljava/lang/String;)V = NotifyOffHoursStatus(string)
  removeUpdateRequestInProgress(Ljava/lang/String;)V = RemoveUpdateRequestInProgress(string)
  resetEffectiveTTR(Ljava/lang/String;)V = ResetEffectiveTTR(string)
  saveMessagesResult(Ljava/lang/String;Ljava/util/ArrayList;ZZLcom/liveperson/infra/ICallback;)V = SaveMessagesResult(string, System.Collections.Generic.IList<Com.Liveperson.Api.Response.Events.ContentEventNotification>, bool, bool, Com.Liveperson.Infra.ICallback)
  sendConversationClosedIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendConversationClosedIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateCSATConversationIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateCSATConversationIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateNewConversationIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateNewConversationIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateStateIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateStateIntent(Com.Liveperson.Messaging.Model.Conversation)
  sendUpdateUnreadMsgIntent(Lcom/liveperson/messaging/model/Conversation;)V = SendUpdateUnreadMsgIntent(Com.Liveperson.Messaging.Model.Conversation)
  setUpdateRequestInProgress(Ljava/lang/String;I)V = SetUpdateRequestInProgress(string, int)
  showTTR(Ljava/lang/String;)V = ShowTTR(string)
  shutDown()V = ShutDown()
  updateClosedConversation(Lcom/liveperson/messaging/model/ConversationData;Z)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateClosedConversation(Com.Liveperson.Messaging.Model.ConversationData, bool)
  updateConversationState(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/ConversationState;)V = UpdateConversationState(string, string, Com.Liveperson.Api.Response.Types.ConversationState)
  updateCSAT(Ljava/lang/String;Ljava/lang/String;)V = UpdateCSAT(string, string)
  updateCurrentConversation(Lcom/liveperson/messaging/model/ConversationData;)V = UpdateCurrentConversation(Com.Liveperson.Messaging.Model.ConversationData)
  updateCurrentConversationServerID(Ljava/lang/String;Lcom/liveperson/messaging/model/ConversationData;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateCurrentConversationServerID(string, Com.Liveperson.Messaging.Model.ConversationData)
  updateLastServerSequenceByBrandId(Ljava/lang/String;I)V = UpdateLastServerSequenceByBrandId(string, int)
  updateLastServerSequenceByConvId(Ljava/lang/String;I)V = UpdateLastServerSequenceByConvId(string, int)
  updateLastServerSequenceByConvId(Ljava/lang/String;IIZ)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateLastServerSequenceByConvId(string, int, int, bool)
  updateTTRType(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJ)V = UpdateTTRType(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long)
com/liveperson/messaging/model/AmsFiles = Com.Liveperson.Messaging.Model.AmsFiles
  <init>()V = .ctor()
  addFile(JLcom/liveperson/messaging/model/FileMessage;)Lcom/liveperson/infra/database/DataBaseCommand; = AddFile(long, Com.Liveperson.Messaging.Model.FileMessage)
  getFileByFileRowId(J)Lcom/liveperson/infra/database/DataBaseCommand; = GetFileByFileRowId(long)
  getFileByFileRowIdOnDbThread(J)Lcom/liveperson/messaging/model/FileMessage; = GetFileByFileRowIdOnDbThread(long)
  getFileByMessageRowId(J)Lcom/liveperson/messaging/model/FileMessage; = GetFileByMessageRowId(long)
  getMultipleOldestLocalPathFromDB(Ljava/lang/String;ILjava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetMultipleOldestLocalPathFromDB(string, int, string)
  getNumOfLocalPathFromDB(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetNumOfLocalPathFromDB(string, string)
  removeLocalPathFromDB(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = RemoveLocalPathFromDB(string, string)
  updateLocalPath(JLjava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateLocalPath(long, string)
  updateRelativePath(Ljava/lang/Long;Ljava/lang/String;)V = UpdateRelativePath(Java.Lang.Long, string)
  updateStatus(JLcom/liveperson/infra/database/tables/FilesTable$LoadStatus;)V = UpdateStatus(long, Com.Liveperson.Infra.Database.Tables.filesTable.LoadStatus)
com/liveperson/messaging/model/AmsMessages = Com.Liveperson.Messaging.Model.AmsMessages
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  MASKED_CC_MSG_SEQUENCE_NUMBER = MaskedCcMsgSequenceNumber
  mFormsManager = MFormsManager
  mMessageTimeoutQueue = MMessageTimeoutQueue
  PENDING_MSG_SEQUENCE_NUMBER = PendingMsgSequenceNumber
  RESOLVE_MSG_SEQUENCE_NUMBER = ResolveMsgSequenceNumber
  STRUCTURED_CONTENT_PREFIX = StructuredContentPrefix
  WELCOME_MSG_SEQUENCE_NUMBER = WelcomeMsgSequenceNumber
  hasListener()Z = HasListener
  getMessages()Landroid/database/Cursor; = Messages
  getTimeOfFirstMessage()Lcom/liveperson/infra/database/DataBaseCommand; = TimeOfFirstMessage
  addFileFromPublishMessageToDB(JLjava/lang/String;Lcom/liveperson/api/request/message/FilePublishMessage;Ljava/lang/String;Z)V = AddFileFromPublishMessageToDB(long, string, Com.Liveperson.Api.Request.Message.FilePublishMessage, string, bool)
  addMessage(Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage;Z)Lcom/liveperson/infra/database/DataBaseCommand; = AddMessage(string, Com.Liveperson.Messaging.Model.MessagingChatMessage, bool)
  addMultipleMessages(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JZZ)Lcom/liveperson/infra/database/DataBaseCommand; = AddMultipleMessages(System.Collections.Generic.IList<Com.Liveperson.Api.Response.Events.ContentEventNotification>, string, string, string, string, long, bool, bool)
  addOnUpdateListener(Lcom/liveperson/messaging/model/AmsMessages$MessagesListener;Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;)V = AddOnUpdateListener(Com.Liveperson.Messaging.Model.AmsMessages.IMessagesListener, Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string)
  clear()V = Clear()
  clearAllClosedConversationMessages(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = ClearAllClosedConversationMessages(string)
  getMessageByEventId(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetMessageByEventId(string)
  getMyUserId(Ljava/lang/String;)Ljava/lang/String; = GetMyUserId(string)
  getQuickRepliesMessageHolder(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = GetQuickRepliesMessageHolder(string)
  getRowIdByEventId(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetRowIdByEventId(string)
  getSequencesForConversation(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetSequencesForConversation(string)
  isFirstMessageExists()Lcom/liveperson/infra/database/DataBaseCommand; = IsFirstMessageExists()
  loadMessages(Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;IJJ)Lcom/liveperson/infra/database/DataBaseCommand; = LoadMessages(Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string, int, long, long)
  loadMessagingUserProfile(Ljava/lang/String;)Lcom/liveperson/messaging/model/MessagingUserProfile; = LoadMessagingUserProfile(string)
  refreshCursor(Ljava/lang/String;)V = RefreshCursor(string)
  removeOnUpdateListener()V = RemoveOnUpdateListener()
  resendAllPendingMessages(Ljava/lang/String;)V = ResendAllPendingMessages(string)
  resetQuickRepliesMessageHolder()V = ResetQuickRepliesMessageHolder()
  searchMessages(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = SearchMessages(string)
  sendReadAckOnMessages(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SendReadAckOnMessages(string, string, string)
  setDeliveryStatusUpdateCommand(Lcom/liveperson/messaging/model/Form;Lcom/liveperson/api/response/types/DeliveryStatus;)V = SetDeliveryStatusUpdateCommand(Com.Liveperson.Messaging.Model.Form, Com.Liveperson.Api.Response.Types.DeliveryStatus)
  shutDown()V = ShutDown()
  updateAgentDetailsUpdated(Ljava/lang/String;Ljava/lang/String;)V = UpdateAgentDetailsUpdated(string, string)
  updateAllMessagesStateByConversationID(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateAllMessagesStateByConversationID(string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateFetchHistoryEnded(Ljava/lang/String;)V = UpdateFetchHistoryEnded(string)
  updateFetchHistoryEnded(Ljava/lang/String;Z)V = UpdateFetchHistoryEnded(string, bool)
  updateFileMessageByRowId(JJ)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateFileMessageByRowId(long, long)
  updateHandledExConversation(Ljava/lang/String;Z)V = UpdateHandledExConversation(string, bool)
  updateMessageConversationServerIdAndTime(JLjava/lang/String;J)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessageConversationServerIdAndTime(long, string, long)
  updateMessageFileChanged(Ljava/lang/String;J)V = UpdateMessageFileChanged(string, long)
  updateMessageOnRetry(Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessageOnRetry(string, Com.Liveperson.Messaging.Model.MessagingChatMessage)
  updateMessageReceivedState(Ljava/lang/String;Ljava/lang/String;[ILcom/liveperson/api/response/types/DeliveryStatus;)V = UpdateMessageReceivedState(string, string, int[], Com.Liveperson.Api.Response.Types.DeliveryStatus)
  updateMessagesConversationServerID(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateMessagesConversationServerID(string, string)
  updateMessagesState(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessagesState(System.Collections.Generic.IList<string>, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateMessageState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessageState(string, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateMessageState(JLcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = UpdateMessageState(long, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  updateOnCommand(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = UpdateOnCommand(string, string)
  updateOnMessageAck(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = UpdateOnMessageAck(string, string, string, long)
com/liveperson/messaging/model/AmsMessagesLoaderProvider = Com.Liveperson.Messaging.Model.IAmsMessagesLoaderProvider
  hasListener()Z = HasListener
  addOnUpdateListener(Lcom/liveperson/messaging/model/AmsMessages$MessagesListener;Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;)V = AddOnUpdateListener(Com.Liveperson.Messaging.Model.AmsMessages.IMessagesListener, Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string)
  getMyUserId(Ljava/lang/String;)Ljava/lang/String; = GetMyUserId(string)
  getQuickRepliesMessageHolder(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = GetQuickRepliesMessageHolder(string)
  loadMessages(Lcom/liveperson/messaging/model/AmsMessages$MessagesSortedBy;Ljava/lang/String;IJJ)Lcom/liveperson/infra/database/DataBaseCommand; = LoadMessages(Com.Liveperson.Messaging.Model.AmsMessages.MessagesSortedBy, string, int, long, long)
  loadMessagingUserProfile(Ljava/lang/String;)Lcom/liveperson/messaging/model/MessagingUserProfile; = LoadMessagingUserProfile(string)
  removeOnUpdateListener()V = RemoveOnUpdateListener()
  resetQuickRepliesMessageHolder()V = ResetQuickRepliesMessageHolder()
com/liveperson/messaging/model/AmsUsers = Com.Liveperson.Messaging.Model.AmsUsers
  <init>()V = .ctor()
  BRAND_ID_EXTRA = BrandIdExtra
  BROADCAST_AGENT_CHANGED = BroadcastAgentChanged
  BROADCAST_CONSUMER_CHANGED = BroadcastConsumerChanged
  BROADCAST_CONSUMER_ID_ACTION = BroadcastConsumerIdAction
  EXTRA_KEY_AGENT_FULL_NAME = ExtraKeyAgentFullName
  EXTRA_KEY_AGENT_NICKNAME = ExtraKeyAgentNickname
  EXTRA_KEY_AGENT_SERVER_ID = ExtraKeyAgentServerId
  EXTRA_KEY_FULL_NAME = ExtraKeyFullName
  EXTRA_KEY_ID = ExtraKeyId
  clear()V = Clear()
  clearConsumerFromDB(Ljava/lang/String;)V = ClearConsumerFromDB(string)
  getConsumerByBrandIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetConsumerByBrandIDFromDB(string)
  getConsumerId(Ljava/lang/String;)Ljava/lang/String; = GetConsumerId(string)
  getProfileFromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/MessagingUserProfile; = GetProfileFromCursor(Android.Database.ICursor)
  getProjection()[Ljava/lang/String; = GetProjection()
  getUserByBrandIDFromDB(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetUserByBrandIDFromDB(string)
  getUserById(Ljava/lang/String;)Lcom/liveperson/infra/database/DataBaseCommand; = GetUserById(string)
  loadConsumerForBrand(Ljava/lang/String;)V = LoadConsumerForBrand(string)
  loadProfile(Ljava/lang/String;)V = LoadProfile(string)
  updateConsumerId(Ljava/lang/String;Ljava/lang/String;)V = UpdateConsumerId(string, string)
  updateUserProfile(Lcom/liveperson/messaging/model/MessagingUserProfile;)V = UpdateUserProfile(Com.Liveperson.Messaging.Model.MessagingUserProfile)
com/liveperson/messaging/model/Conversation = Com.Liveperson.Messaging.Model.Conversation
  <init>(Landroid/database/Cursor;)V = .ctor(Android.Database.ICursor)
  <init>(Lcom/liveperson/messaging/model/ConversationData;)V = .ctor(Com.Liveperson.Messaging.Model.ConversationData)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getAssignedAgentServerId()Ljava/lang/String; = AssignedAgentServerId
  getBrandId()Ljava/lang/String; = BrandId
  getCloseReason()Lcom/liveperson/api/response/types/CloseReason; = CloseReason
  setCloseReason(Lcom/liveperson/api/response/types/CloseReason;)V = CloseReason
  getCloseTime()J = CloseTime
  setCloseTime(J)V = CloseTime
  getConversationServerId()Ljava/lang/String; = ConversationServerId
  getConversationTTRType()Lcom/liveperson/api/response/types/TTRType; = ConversationTTRType
  isConversationOpen()Z = IsConversationOpen
  getLastServerSequence()I = LastServerSequence
  getPendingData()Lcom/liveperson/messaging/model/PendingConversationData; = PendingData
  getRequestId()J = RequestId
  getStartTs()J = StartTs
  setStartTs(J)V = StartTs
  getState()Lcom/liveperson/api/response/types/ConversationState; = State
  getTargetId()Ljava/lang/String; = TargetId
  getTTRManager()Lcom/liveperson/messaging/model/TTRManager; = TTRManager
  getUnreadMessages()I = UnreadMessages
  setUnreadMessages(I)V = UnreadMessages
  getUpdateInProgress()I = UpdateInProgress
  setUpdateInProgress(I)V = UpdateInProgress
  isShowedCSAT()Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS; = IsShowedCSAT()
  setAssignedAgentServerId(Ljava/lang/String;)V = SetAssignedAgentServerId(string)
  setBrandId(Ljava/lang/String;)V = SetBrandId(string)
  setConversationTTRType(Lcom/liveperson/api/response/types/TTRType;)V = SetConversationTTRType(Com.Liveperson.Api.Response.Types.TTRType)
  setLastServerSequence(I)V = SetLastServerSequence(int)
  setRequestId(J)V = SetRequestId(long)
  setServerId(Ljava/lang/String;)V = SetServerId(string)
  setShowedCSAT(Lcom/liveperson/api/response/types/CSAT$CSAT_SHOW_STATUS;)V = SetShowedCSAT(Com.Liveperson.Api.Response.Types.CSAT.CSAT_SHOW_STATUS)
  setState(Lcom/liveperson/api/response/types/ConversationState;)V = SetState(Com.Liveperson.Api.Response.Types.ConversationState)
com/liveperson/messaging/model/ConversationData = Com.Liveperson.Messaging.Model.ConversationData
  <init>()V = .ctor()
  <init>(Lcom/liveperson/api/response/model/ConversationINCADetails;Ljava/lang/String;)V = .ctor(Com.Liveperson.Api.Response.Model.ConversationINCADetails, string)
  <init>(Lcom/liveperson/api/response/types/ConversationState;Lcom/liveperson/api/response/model/Result;Ljava/lang/String;)V = .ctor(Com.Liveperson.Api.Response.Types.ConversationState, Com.Liveperson.Api.Response.Model.Result, string)
  <init>(Ljava/lang/String;Lcom/liveperson/messaging/model/Conversation;)V = .ctor(string, Com.Liveperson.Messaging.Model.Conversation)
  allAgents = AllAgents
  assignedAgentServerId = AssignedAgentServerId
  brandId = BrandId
  closeReason = CloseReason
  consumerId = ConsumerId
  conversationId = ConversationId
  conversationTTRType = ConversationTTRType
  csat = Csat
  delayTillWhen = DelayTillWhen
  delayType = DelayType
  endTs = EndTs
  manualTTR = ManualTTR
  participants = Participants
  requestId = RequestId
  source = Source
  startTs = StartTs
  state = State
  targetId = TargetId
  ttrValue = TtrValue
  unreadMessages = UnreadMessages
  compareTo(Ljava/lang/Object;)I = CompareTo(Java.Lang.Object)
  getAllAgentParticipants(Lcom/liveperson/api/response/model/Participants;)[Ljava/lang/String; = GetAllAgentParticipants(Com.Liveperson.Api.Response.Model.Participants)
  getAssignedAgentId(Lcom/liveperson/api/response/model/Participants;)Ljava/lang/String; = GetAssignedAgentId(Com.Liveperson.Api.Response.Model.Participants)
com/liveperson/messaging/model/ConversationUtils = Com.Liveperson.Messaging.Model.ConversationUtils
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  addFirstMessage(Ljava/lang/String;Ljava/lang/String;)V = AddFirstMessage(string, string)
  addResolvedMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/CloseReason;JZLcom/liveperson/infra/ICallback;)V = AddResolvedMessage(string, string, string, Com.Liveperson.Api.Response.Types.CloseReason, long, bool, Com.Liveperson.Infra.ICallback)
  calculateEffectiveTTR(Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;JJJ)J = CalculateEffectiveTTR(string, Com.Liveperson.Api.Response.Types.TTRType, long, long, long)
  getResolveTextMessage(Ljava/lang/String;JLjava/lang/String;)Ljava/lang/String; = GetResolveTextMessage(string, long, string)
  showTTR(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;)V = ShowTTR(Com.Liveperson.Messaging.Messaging, string)
  updateParticipants(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;Ljava/lang/String;ZZ)V = UpdateParticipants(string, string, string[], Com.Liveperson.Api.Response.Model.UserProfile.UserType, string, bool, bool)
  updateParticipants(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;Ljava/lang/String;ZZLcom/liveperson/infra/ICallback;)V = UpdateParticipants(string, string, string[], Com.Liveperson.Api.Response.Model.UserProfile.UserType, string, bool, bool, Com.Liveperson.Infra.ICallback)
  updateTTR(Lcom/liveperson/api/response/types/TTRType;JJLjava/lang/String;)V = UpdateTTR(Com.Liveperson.Api.Response.Types.TTRType, long, long, string)
com/liveperson/messaging/model/FileMessage = Com.Liveperson.Messaging.Model.FileMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V = .ctor(string, string, string, string, long)
  EXTRA_FILE_ROW_ID = ExtraFileRowId
  EXTRA_FULL_IMAGE_EXISTS = ExtraFullImageExists
  EXTRA_LOAD_STATUS = ExtraLoadStatus
  EXTRA_LOCAL_URL = ExtraLocalUrl
  EXTRA_PREVIEW = ExtraPreview
  EXTRA_PREVIEW_IMAGE_EXISTS = ExtraPreviewImageExists
  getAllFileChanges()Landroid/os/Bundle; = AllFileChanges
  getFileRowId()J = FileRowId
  getFileType()Ljava/lang/String; = FileType
  getLoadStatus()Lcom/liveperson/infra/database/tables/FilesTable$LoadStatus; = LoadStatus
  getLocalUrl()Ljava/lang/String; = LocalUrl
  getPreview()Ljava/lang/String; = Preview
  getRelatedMessageRowID()J = RelatedMessageRowID
  getSwiftPath()Ljava/lang/String; = SwiftPath
  fromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/FileMessage; = FromCursor(Android.Database.ICursor)
  update(Lcom/liveperson/messaging/model/FileMessage;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.FileMessage)
com/liveperson/messaging/model/Form = Com.Liveperson.Messaging.Model.Form
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = .ctor(string, string, string, string, string, string, int, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string, string, string, string, string, string)
  getConversationId()Ljava/lang/String; = ConversationId
  getEventId()Ljava/lang/String; = EventId
  getFormId()Ljava/lang/String; = FormId
  getFormTitle()Ljava/lang/String; = FormTitle
  getInvitationId()Ljava/lang/String; = InvitationId
  getLanguage()Ljava/lang/String; = Language
  getOpenFormURL()Ljava/lang/String; = OpenFormURL
  getReadOTK()Ljava/lang/String; = ReadOTK
  setReadOTK(Ljava/lang/String;)V = ReadOTK
  getSeqId()I = SeqId
  getSiteId()Ljava/lang/String; = SiteId
  getSubmissionId()Ljava/lang/String; = SubmissionId
  setSubmissionId(Ljava/lang/String;)V = SubmissionId
  getWriteOTK()Ljava/lang/String; = WriteOTK
  setWriteOTK(Ljava/lang/String;)V = WriteOTK
  getFormStatus()Lcom/liveperson/messaging/model/Form$FormStatus; = GetFormStatus()
  setFormStatus(Lcom/liveperson/messaging/model/Form$FormStatus;)V = SetFormStatus(Com.Liveperson.Messaging.Model.Form.FormStatus)
com/liveperson/messaging/model/FormsManager = Com.Liveperson.Messaging.Model.FormsManager
  <init>()V = .ctor()
  FORM_ID = FormId
  INVITATION_ID = InvitationId
  TITLE = Title
  addForm(Ljava/lang/String;Lcom/liveperson/messaging/model/Form;)V = AddForm(string, Com.Liveperson.Messaging.Model.Form)
  getForm(Ljava/lang/String;)Lcom/liveperson/messaging/model/Form; = GetForm(string)
  removeForm(Ljava/lang/String;)V = RemoveForm(string)
  updateForm(Ljava/lang/String;Ljava/lang/String;)V = UpdateForm(string, string)
  updateForm(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = UpdateForm(string, string, string)
com/liveperson/messaging/model/FullMessageRow = Com.Liveperson.Messaging.Model.FullMessageRow
  <init>(Landroid/database/Cursor;)V = .ctor(Android.Database.ICursor)
  <init>(Lcom/liveperson/messaging/model/MessagingChatMessage;Ljava/lang/String;Lcom/liveperson/messaging/model/FileMessage;)V = .ctor(Com.Liveperson.Messaging.Model.MessagingChatMessage, string, Com.Liveperson.Messaging.Model.FileMessage)
  EXTRA_AGENT_AVATAR = ExtraAgentAvatar
  TAG = Tag
  getAgentAvatar()Ljava/lang/String; = AgentAvatar
  getFileMessage()Lcom/liveperson/messaging/model/FileMessage; = FileMessage
  getMessagingChatMessage()Lcom/liveperson/messaging/model/MessagingChatMessage; = MessagingChatMessage
  getRootElement()Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement; = RootElement
  setRootElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;)V = RootElement
  generateAgentQuickReplyMessage(Ljava/lang/String;J)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateAgentQuickReplyMessage(string, long)
  generateAgentTypingIndicatorMessage(Ljava/lang/String;)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateAgentTypingIndicatorMessage(string)
  generateUnreadIndicatorMessage(Landroid/content/Context;IJ)Lcom/liveperson/messaging/model/FullMessageRow; = GenerateUnreadIndicatorMessage(Android.Content.Context, int, long)
  getDummyMessage(Landroid/content/Context;J)Lcom/liveperson/messaging/model/FullMessageRow; = GetDummyMessage(Android.Content.Context, long)
  getLoadingHistoryIndicatorMessage(Landroid/content/Context;J)Lcom/liveperson/messaging/model/FullMessageRow; = GetLoadingHistoryIndicatorMessage(Android.Content.Context, long)
  getLoadingIndicatorMessage(Landroid/content/Context;JZ)Lcom/liveperson/messaging/model/FullMessageRow; = GetLoadingIndicatorMessage(Android.Content.Context, long, bool)
  getLoadingIndicatorMessageDiff(Landroid/content/Context;)Landroid/os/Bundle; = GetLoadingIndicatorMessageDiff(Android.Content.Context)
  getMessageDetails(Lcom/liveperson/messaging/model/FullMessageRow;)Landroid/os/Bundle; = GetMessageDetails(Com.Liveperson.Messaging.Model.FullMessageRow)
  newerThan(Lcom/liveperson/messaging/model/FullMessageRow;)I = NewerThan(Com.Liveperson.Messaging.Model.FullMessageRow)
  update(Lcom/liveperson/messaging/model/FullMessageRow;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.FullMessageRow)
com/liveperson/messaging/model/IncaGetConversationsListResponse = Com.Liveperson.Messaging.Model.IncaGetConversationsListResponse
  <init>(Ljava/lang/String;)V = .ctor(string)
  mNextUrl = MNextUrl
  getListOfConversations()Ljava/util/ArrayList; = ListOfConversations
  getNumOfResults()I = NumOfResults
  getUrlRef()Ljava/lang/String; = UrlRef
com/liveperson/messaging/model/MessagesByBrandIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByBrandIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  URI = Uri
com/liveperson/messaging/model/MessagesByConversationIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByConversationIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  URI = Uri
com/liveperson/messaging/model/MessagesByUserIDCursorLoader = Com.Liveperson.Messaging.Model.MessagesByUserIDCursorLoader
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  URI = Uri
com/liveperson/messaging/model/MessagingChatMessage = Com.Liveperson.Messaging.Model.MessagingChatMessage
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;ILjava/lang/String;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState, int, string, Com.Liveperson.Infra.Utils.EncryptionVersion)
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState, Com.Liveperson.Infra.Utils.EncryptionVersion)
  EXTRA_CONVERSATION_ID = ExtraConversationId
  EXTRA_MESSAGE_STATE = ExtraMessageState
  EXTRA_SERVER_SEQUENCE = ExtraServerSequence
  TAG = Tag
  getAccessibilityMessage()Ljava/lang/String; = AccessibilityMessage
  getFormalMessage()Ljava/lang/String; = FormalMessage
  getMessageState()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState; = GetMessageState()
  getMessageType()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = GetMessageType()
  isSystemMessageFromAgent(Ljava/lang/String;)Z = IsSystemMessageFromAgent(string)
  setMessageState(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageState;)V = SetMessageState(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageState)
  setMessageType(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = SetMessageType(Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  update(Lcom/liveperson/messaging/model/MessagingChatMessage;)Landroid/os/Bundle; = Update(Com.Liveperson.Messaging.Model.MessagingChatMessage)
com/liveperson/messaging/model/MessagingSearchedMessage = Com.Liveperson.Messaging.Model.MessagingSearchedMessage
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = .ctor(string, string, string, Com.Liveperson.Messaging.Model.MessagingChatMessage.MessageType)
  getBrandId()Ljava/lang/String; = BrandId
  setBrandId(Ljava/lang/String;)V = BrandId
  getFirstName()Ljava/lang/String; = FirstName
  setFirstName(Ljava/lang/String;)V = FirstName
  getMessage()Ljava/lang/String; = Message
  setMessage(Ljava/lang/String;)V = Message
  getMessageType()Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType; = MessageType
  setMessageType(Lcom/liveperson/messaging/model/MessagingChatMessage$MessageType;)V = MessageType
  fromCursor(Landroid/database/Cursor;)Lcom/liveperson/messaging/model/MessagingSearchedMessage; = FromCursor(Android.Database.ICursor)
com/liveperson/messaging/model/MessagingUserProfile = Com.Liveperson.Messaging.Model.MessagingUserProfile
  <init>(Lcom/liveperson/api/response/model/UserProfile;)V = .ctor(Com.Liveperson.Api.Response.Model.UserProfile)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  getBrandId()Ljava/lang/String; = BrandId
  isEmptyUser()Z = IsEmptyUser
  getUserEncryptionVersion()Lcom/liveperson/infra/utils/EncryptionVersion; = UserEncryptionVersion
  setUserEncryptionVersion(Lcom/liveperson/infra/utils/EncryptionVersion;)V = UserEncryptionVersion
  setBrandID(Ljava/lang/String;)V = SetBrandID(string)
com/liveperson/messaging/model/NullMessagesListener = Com.Liveperson.Messaging.Model.NullMessagesListener
  <init>()V = .ctor()
  initMessages(Ljava/util/ArrayList;)V = InitMessages(System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.FullMessageRow>)
  onExConversationHandled(Z)V = OnExConversationHandled(bool)
  onHistoryFetched()V = OnHistoryFetched()
  onHistoryFetchedFailed()V = OnHistoryFetchedFailed()
  onNewMessage(Lcom/liveperson/messaging/model/FullMessageRow;)V = OnNewMessage(Com.Liveperson.Messaging.Model.FullMessageRow)
  onQueryMessagesResult(JJ)V = OnQueryMessagesResult(long, long)
  onUpdateMessage(Lcom/liveperson/messaging/model/FullMessageRow;)V = OnUpdateMessage(Com.Liveperson.Messaging.Model.FullMessageRow)
  onUpdateMessages(JJ)V = OnUpdateMessages(long, long)
  removeAll(Ljava/lang/String;)V = RemoveAll(string)
com/liveperson/messaging/model/PendingConversationData = Com.Liveperson.Messaging.Model.PendingConversationData
  <init>()V = .ctor()
  getPendingMessages()Ljava/util/ArrayList; = PendingMessages
  addToPendingRequests(Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = AddToPendingRequests(Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
com/liveperson/messaging/model/QuickRepliesMessageHolder = Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;IZ)V = .ctor(string, string, long, string, int, bool)
  TAG = Tag
  isValid()Z = IsValid
  getJsonString()Ljava/lang/String; = JsonString
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getQuickRepliesString()Ljava/lang/String; = QuickRepliesString
  getSequence()I = Sequence
  isShow()Z = Show
  setShow(Z)V = Show
  getTimestamp()J = Timestamp
  deleteFromSharedPreferences()V = DeleteFromSharedPreferences()
  fromContentEventNotification(Ljava/lang/String;Lcom/liveperson/api/response/events/ContentEventNotification;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = FromContentEventNotification(string, Com.Liveperson.Api.Response.Events.ContentEventNotification)
  fromJsonString(Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = FromJsonString(string, string)
  loadFromSharedPreferences(Ljava/lang/String;)Lcom/liveperson/messaging/model/QuickRepliesMessageHolder; = LoadFromSharedPreferences(string)
  newerOrEqualThan(Lcom/liveperson/messaging/model/QuickRepliesMessageHolder;)Z = NewerOrEqualThan(Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder)
  newerThan(Lcom/liveperson/messaging/model/QuickRepliesMessageHolder;)Z = NewerThan(Com.Liveperson.Messaging.Model.QuickRepliesMessageHolder)
  writeToSharedPreferences()V = WriteToSharedPreferences()
com/liveperson/messaging/model/SynchronizedAmsConnectionCallback = Com.Liveperson.Messaging.Model.SynchronizedAmsConnectionCallback
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/Runnable;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, Java.Lang.IRunnable)
  execute()V = Execute()
com/liveperson/messaging/model/SynchronizedAmsConnectionUpdateCallback = Com.Liveperson.Messaging.Model.SynchronizedAmsConnectionUpdateCallback
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/Runnable;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, Java.Lang.IRunnable)
  execute()V = Execute()
com/liveperson/messaging/model/SynchronizedAuthenticationCompletedCallback = Com.Liveperson.Messaging.Model.SynchronizedAuthenticationCompletedCallback
  <init>(Lcom/liveperson/messaging/controller/AccountsController;Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Controller.AccountsController, string, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
  executeWithReturnValue()Z = ExecuteWithReturnValue()
com/liveperson/messaging/model/SynchronizedInternetConnectionCallback = Com.Liveperson.Messaging.Model.SynchronizedInternetConnectionCallback
  <init>(Ljava/lang/Runnable;)V = .ctor(Java.Lang.IRunnable)
  handled = Handled
  mCallback = MCallback
  mLocalBroadcastReceiver = MLocalBroadcastReceiver
  TAG = Tag
  execute()V = Execute()
com/liveperson/messaging/model/TimeBundle = Com.Liveperson.Messaging.Model.TimeBundle
  <init>(J)V = .ctor(long)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  diffDays = DiffDays
  diffHours = DiffHours
  diffMinutes = DiffMinutes
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/messaging/model/TTRManager = Com.Liveperson.Messaging.Model.TTRManager
  <init>(Ljava/lang/String;)V = .ctor(string)
  calculateEffectiveTTR(Ljava/lang/String;JJJJ)J = CalculateEffectiveTTR(string, long, long, long, long)
  cancelAll()V = CancelAll()
  clear()V = Clear()
  resetEffectiveTTR()V = ResetEffectiveTTR()
  showTTR(Ljava/lang/String;)V = ShowTTR(string)
  shutDown()V = ShutDown()
  updateIfOffHours(Ljava/lang/String;)V = UpdateIfOffHours(string)
  updateTTR(Ljava/lang/String;JJJ)V = UpdateTTR(string, long, long, long)
com/liveperson/messaging/model/UserProfileBundle = Com.Liveperson.Messaging.Model.UserProfileBundle
  getAvatarUrl()Ljava/lang/String; = AvatarUrl
  getFirstName()Ljava/lang/String; = FirstName
  getLastName()Ljava/lang/String; = LastName
  getNickname()Ljava/lang/String; = Nickname
  getPhoneNumber()Ljava/lang/String; = PhoneNumber
com/liveperson/messaging/network/http/AgentProfileRequest = Com.Liveperson.Messaging.Network.Http.AgentProfileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  mController = MController
  getCallback()Lcom/liveperson/infra/ICallback; = Callback
  execute()V = Execute()
  setCallback(Lcom/liveperson/infra/ICallback;)Lcom/liveperson/messaging/network/http/AgentProfileRequest; = SetCallback(Com.Liveperson.Infra.ICallback)
com/liveperson/messaging/network/http/DownloadFileRequest = Com.Liveperson.Messaging.Network.Http.DownloadFileRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/QueryParams;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.QueryParams, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/messaging/network/http/IdpRequest = Com.Liveperson.Messaging.Network.Http.IdpRequest
  <init>(Lcom/liveperson/messaging/model/AmsAccount;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Ljava/lang/String;Lcom/liveperson/messaging/commands/tasks/IdpTask$IDPExceptionICallback;Ljava/util/List;)V = .ctor(Com.Liveperson.Messaging.Model.AmsAccount, string, string, Com.Liveperson.Infra.LPAuthenticationParams, string, Com.Liveperson.Messaging.Commands.Tasks.IdpTask.IDPExceptionICallback, System.Collections.Generic.IList<string>)
  AUTHENTICATE = Authenticate
  DEFAULT_REDIRECT_URI = DefaultRedirectUri
  IDP_REQUEST_TIMEOUT = IdpRequestTimeout
  mAccount = MAccount
  mBrandId = MBrandId
  mCallback = MCallback
  mCertificates = MCertificates
  mHostVersion = MHostVersion
  mIdpDomain = MIdpDomain
  mLPAuthenticationParams = MLPAuthenticationParams
  SIGNUP = Signup
  TAG = Tag
  USER_EXPIRED_ERROR = UserExpiredError
  addHeaders(Lcom/liveperson/infra/network/http/request/HttpPostRequest;)V = AddHeaders(Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest)
  execute()V = Execute()
  getBodyForIDPJwtFlow(Ljava/lang/String;)Lorg/json/JSONObject; = GetBodyForIDPJwtFlow(string)
  sendErrorCallback(Ljava/lang/Exception;)V = SendErrorCallback(Java.Lang.Exception)
  sendGeneralRequest(Lcom/liveperson/infra/network/http/request/HttpPostRequest;)V = SendGeneralRequest(Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest)
com/liveperson/messaging/network/http/IncaGetConversationsListRequest = Com.Liveperson.Messaging.Network.Http.IncaGetConversationsListRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;JJJLcom/liveperson/infra/ICallback;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, long, long, long, Com.Liveperson.Infra.ICallback)
  MAX_LIMIT = MaxLimit
  MAX_TIME_LIMIT = MaxTimeLimit
  mController = MController
  getOffset()J = Offset
  setOffset(J)V = Offset
  execute()V = Execute()
  setOffset(I)V = SetOffset(int)
com/liveperson/messaging/network/http/MessageTimeoutListener = Com.Liveperson.Messaging.Network.Http.IMessageTimeoutListener
  onMessageTimeout(Ljava/lang/String;)V = OnMessageTimeout(string)
  onPublishMessageTimeout(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = OnPublishMessageTimeout(string, string, string)
com/liveperson/messaging/network/http/QueryMessagesINCACommand = Com.Liveperson.Messaging.Network.Http.QueryMessagesINCACommand
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, bool)
  execute()V = Execute()
com/liveperson/messaging/network/http/RestRequestParams = Com.Liveperson.Messaging.Network.Http.RestRequestParams
  <init>()V = .ctor()
  mCertificates = MCertificates
  isNotValid()Z = IsNotValid
  setParams(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = SetParams(string, string, string, System.Collections.Generic.IList<string>)
com/liveperson/messaging/network/http/SendFileRequestRest = Com.Liveperson.Messaging.Network.Http.SendFileRequestRest
  <init>(Lcom/liveperson/messaging/network/http/RestRequestParams;Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest;)V = .ctor(Com.Liveperson.Messaging.Network.Http.RestRequestParams, Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest)
  execute()V = Execute()
com/liveperson/messaging/network/http/UnAuthRequest = Com.Liveperson.Messaging.Network.Http.UnAuthRequest
  <init>(Lcom/liveperson/messaging/model/AmsAccount;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Ljava/lang/String;Lcom/liveperson/messaging/commands/tasks/IdpTask$IDPExceptionICallback;Ljava/util/List;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Model.AmsAccount, string, string, Com.Liveperson.Infra.LPAuthenticationParams, string, Com.Liveperson.Messaging.Commands.Tasks.IdpTask.IDPExceptionICallback, System.Collections.Generic.IList<string>, string)
  IDP_ANONYMOUS_URL = IdpAnonymousUrl
  mConnectorId = MConnectorId
  TAG = Tag
  getHttpPostRequestForIDPV3(Ljava/lang/String;)Lcom/liveperson/infra/network/http/request/HttpPostRequest; = GetHttpPostRequestForIDPV3(string)
  sendUnAuthRequest()V = SendUnAuthRequest()
com/liveperson/messaging/network/http/UploadFileRequest = Com.Liveperson.Messaging.Network.Http.UploadFileRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/QueryParams;Ljava/util/List;Lcom/liveperson/infra/ICallback;[BLjava/lang/Integer;)V = .ctor(string, string, Com.Liveperson.Api.Response.Model.QueryParams, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback, byte[], Java.Lang.Integer)
  execute()V = Execute()
com/liveperson/messaging/network/MessageTimeoutQueue = Com.Liveperson.Messaging.Network.MessageTimeoutQueue
  <init>(Lcom/liveperson/messaging/network/http/MessageTimeoutListener;)V = .ctor(Com.Liveperson.Messaging.Network.Http.IMessageTimeoutListener)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;I)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, int)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string)
  add(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = Add(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string, int)
  handleMsgImmediately(Lcom/liveperson/messaging/network/MessageTimeoutQueue$MessageType;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = HandleMsgImmediately(Com.Liveperson.Messaging.Network.MessageTimeoutQueue.MessageType, int, string, string, string)
  onHandleMessage(Landroid/os/Message;)V = OnHandleMessage(Android.OS.Message)
  remove(I)Z = Remove(int)
  removeAll()V = RemoveAll()
com/liveperson/messaging/network/socket/ExConversationChangeNotificationResponseHandler = Com.Liveperson.Messaging.Network.Socket.ExConversationChangeNotificationResponseHandler
  <init>(Lcom/liveperson/messaging/Messaging;)V = .ctor(Com.Liveperson.Messaging.Messaging)
  mController = MController
  mConversationUtils = MConversationUtils
  getAPIResponseType()Ljava/lang/String; = APIResponseType
  getFetchConversationManager()Lcom/liveperson/messaging/commands/tasks/FetchConversationManager; = FetchConversationManager
  createNewConversation(Lcom/liveperson/messaging/model/ConversationData;)V = CreateNewConversation(Com.Liveperson.Messaging.Model.ConversationData)
  handle(Ljava/util/List;)Z = Handle(System.Collections.Generic.IList<Com.Liveperson.Messaging.Model.ConversationData>)
  init()V = Init()
  isValidResponse(Lcom/liveperson/api/response/model/Result;)Z = IsValidResponse(Com.Liveperson.Api.Response.Model.Result)
  parse(Lorg/json/JSONObject;)Ljava/util/List; = Parse(Org.Json.JSONObject)
  queryMessages(Lcom/liveperson/messaging/model/Conversation;Lcom/liveperson/messaging/commands/tasks/FetchConversationManager$DATA_SOURCE;)V = QueryMessages(Com.Liveperson.Messaging.Model.Conversation, Com.Liveperson.Messaging.Commands.Tasks.FetchConversationManager.DATA_SOURCE)
  updateClosedConversation(Lcom/liveperson/messaging/model/ConversationData;Z)V = UpdateClosedConversation(Com.Liveperson.Messaging.Model.ConversationData, bool)
  updateConversation(Lcom/liveperson/messaging/model/ConversationData;)V = UpdateConversation(Com.Liveperson.Messaging.Model.ConversationData)
com/liveperson/messaging/network/socket/general_requests/ClockRequest = Com.Liveperson.Messaging.Network.Socket.General_requests.ClockRequest
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/BaseGetUrlRequest = Com.Liveperson.Messaging.Network.Socket.Requests.BaseGetUrlRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/ChangeConversationTTRRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ChangeConversationTTRRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/TTRType;I)V = .ctor(string, string, Com.Liveperson.Api.Response.Types.TTRType, int)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/ChatStateChangeRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ChatStateChangeRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/model/types/ChatState;)V = .ctor(string, string, Com.Liveperson.Infra.Model.Types.ChatState)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/CsatRequest = Com.Liveperson.Messaging.Network.Socket.Requests.CsatRequest
  <init>(Ljava/lang/String;Ljava/lang/String;II)V = .ctor(string, string, int, int)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/DeliveryStatusUpdateRequest = Com.Liveperson.Messaging.Network.Socket.Requests.DeliveryStatusUpdateRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/types/DeliveryStatus;Ljava/util/List;)V = .ctor(string, string, Com.Liveperson.Api.Response.Types.DeliveryStatus, System.Collections.Generic.IList<Java.Lang.Integer>)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setInfo(Lcom/liveperson/api/response/model/DeliveryStatusUpdateInfo;)V = SetInfo(Com.Liveperson.Api.Response.Model.DeliveryStatusUpdateInfo)
com/liveperson/messaging/network/socket/requests/GetUrlForDownloadRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUrlForDownloadRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getData()Ljava/lang/String; = Data
com/liveperson/messaging/network/socket/requests/GetUrlForUploadRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUrlForUploadRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;ILjava/lang/String;Lcom/liveperson/api/response/IOnUrlReady;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, int, string, Com.Liveperson.Api.Response.IOnUrlReady)
  getData()Ljava/lang/String; = Data
com/liveperson/messaging/network/socket/requests/GetUserProfileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.GetUserProfileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/UserProfile$UserType;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, Com.Liveperson.Api.Response.Model.UserProfile.UserType)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setServerConversationId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetServerConversationId(string)
  setShouldUpdateUI(Z)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetShouldUpdateUI(bool)
  setUserId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/GetUserProfileRequest; = SetUserId(string)
com/liveperson/messaging/network/socket/requests/NewConversationRequest = Com.Liveperson.Messaging.Network.Socket.Requests.NewConversationRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setAppId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetAppId(string)
  setSkill(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetSkill(string)
  setTtrType(Lcom/liveperson/api/response/types/TTRType;)Lcom/liveperson/messaging/network/socket/requests/NewConversationRequest; = SetTtrType(Com.Liveperson.Api.Response.Types.TTRType)
com/liveperson/messaging/network/socket/requests/QueryMessagesRequest = Com.Liveperson.Messaging.Network.Socket.Requests.QueryMessagesRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, int)
  getConversationId()Ljava/lang/String; = ConversationId
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setMaxSize(I)Lcom/liveperson/messaging/network/socket/requests/QueryMessagesRequest; = SetMaxSize(int)
  setOlderThanSequenceId(I)Lcom/liveperson/messaging/network/socket/requests/QueryMessagesRequest; = SetOlderThanSequenceId(int)
  setResponseCallBack(Lcom/liveperson/messaging/commands/tasks/BaseAmsSocketConnectionCallback;)V = SetResponseCallBack(Com.Liveperson.Messaging.Commands.Tasks.IBaseAmsSocketConnectionCallback)
  setShouldUpdateUI(Z)V = SetShouldUpdateUI(bool)
com/liveperson/messaging/network/socket/requests/ResolveConversationRequest = Com.Liveperson.Messaging.Network.Socket.Requests.ResolveConversationRequest
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/SendFileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendFileRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  setFileContent(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetFileContent(string, string, string, string)
com/liveperson/messaging/network/socket/requests/SendFormSubmissionMessageRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendFormSubmissionMessageRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, string, string)
  mMessage = MMessage
com/liveperson/messaging/network/socket/requests/SendMessageRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SendMessageRequest
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string)
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string)
  <init>(Lcom/liveperson/messaging/Messaging;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/api/response/model/ContentType;)V = .ctor(Com.Liveperson.Messaging.Messaging, string, string, string, string, string, Com.Liveperson.Api.Response.Model.ContentType)
  mMessage = MMessage
  getData()Ljava/lang/String; = Data
  getEventId()Ljava/lang/String; = EventId
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setContentType(Lcom/liveperson/api/response/model/ContentType;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = SetContentType(Com.Liveperson.Api.Response.Model.ContentType)
  setConversationId(Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SendMessageRequest; = SetConversationId(string)
  setMessageContent(Ljava/lang/String;)V = SetMessageContent(string)
com/liveperson/messaging/network/socket/requests/SetUsersProfileRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SetUsersProfileRequest
  <init>(Lcom/liveperson/messaging/model/AmsUsers;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/model/MessagingUserProfile;)V = .ctor(Com.Liveperson.Messaging.Model.AmsUsers, string, string, Com.Liveperson.Messaging.Model.MessagingUserProfile)
  TAG = Tag
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest = Com.Liveperson.Messaging.Network.Socket.Requests.SubscribeExConversationsRequest
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;JLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, long, string, string, string[])
  <init>(Lcom/liveperson/messaging/controller/ConnectionsController;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Messaging.Controller.ConnectionsController, long, string, string, string)
  TAG = Tag
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
  setAgentIds([Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetAgentIds(string[])
  setConvState([Ljava/lang/String;)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetConvState(string[])
  setMaxETTR(I)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetMaxETTR(int)
  setMaxLastUpdatedTime(J)Lcom/liveperson/messaging/network/socket/requests/SubscribeExConversationsRequest; = SetMaxLastUpdatedTime(long)
com/liveperson/messaging/network/socket/requests/UnSubscribeExConversationsRequest = Com.Liveperson.Messaging.Network.Socket.Requests.UnSubscribeExConversationsRequest
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getData()Ljava/lang/String; = Data
  getRequestName()Ljava/lang/String; = RequestName
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = ResponseHandler
com/liveperson/messaging/sdk/api/callbacks/LogoutLivePersonCallback = Com.Liveperson.Messaging.Sdk.Api.Callbacks.ILogoutLivePersonCallback
  onLogoutFailed()V = OnLogoutFailed()
  onLogoutSucceed()V = OnLogoutSucceed()
com/liveperson/messaging/sdk/api/callbacks/ShutDownLivePersonCallback = Com.Liveperson.Messaging.Sdk.Api.Callbacks.IShutDownLivePersonCallback
  onShutdownFailed()V = OnShutdownFailed()
  onShutdownSucceed()V = OnShutdownSucceed()
com/liveperson/messaging/sdk/api/LivePerson = Com.Liveperson.Messaging.Sdk.Api.LivePerson
  ACTION_LP_UPDATE_NUM_UNREAD_MESSAGES_ACTION = ActionLpUpdateNumUnreadMessagesAction
  ACTION_LP_UPDATE_NUM_UNREAD_MESSAGES_EXTRA = ActionLpUpdateNumUnreadMessagesExtra
  getConversationFragment()Landroid/support/v4/app/Fragment; = ConversationFragment
  getSDKVersion()Ljava/lang/String; = SDKVersion
  checkActiveConversation(Lcom/liveperson/infra/ICallback;)V = CheckActiveConversation(Com.Liveperson.Infra.ICallback)
  checkAgentID(Lcom/liveperson/infra/ICallback;)V = CheckAgentID(Com.Liveperson.Infra.ICallback)
  checkConversationIsMarkedAsUrgent(Lcom/liveperson/infra/ICallback;)V = CheckConversationIsMarkedAsUrgent(Com.Liveperson.Infra.ICallback)
  clearHistory()Z = ClearHistory()
  getConversationFragment(Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Landroid/support/v4/app/Fragment; = GetConversationFragment(Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  getConversationFragment(Ljava/lang/String;)Landroid/support/v4/app/Fragment; = GetConversationFragment(string)
  getNumUnreadMessages(Ljava/lang/String;)I = GetNumUnreadMessages(string)
  getNumUnreadMessages(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetNumUnreadMessages(string, Com.Liveperson.Infra.ICallback)
  handlePush(Landroid/content/Context;Landroid/os/Bundle;Ljava/lang/String;Z)V = HandlePush(Android.Content.Context, Android.OS.Bundle, string, bool)
  handlePushMessage(Landroid/content/Context;Ljava/util/Map;Ljava/lang/String;Z)Lcom/liveperson/infra/model/PushMessage; = HandlePushMessage(Android.Content.Context, System.Collections.Generic.IDictionary<string, string>, string, bool)
  hideConversation(Landroid/app/Activity;)V = HideConversation(Android.App.Activity)
  initialize(Landroid/content/Context;Lcom/liveperson/infra/InitLivePersonProperties;)V = Initialize(Android.Content.Context, Com.Liveperson.Infra.InitLivePersonProperties)
  initialize(Landroid/content/Context;Ljava/lang/String;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = Initialize(Android.Content.Context, string, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  logOut(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/messaging/sdk/api/callbacks/LogoutLivePersonCallback;)V = LogOut(Android.Content.Context, string, string, Com.Liveperson.Messaging.Sdk.Api.Callbacks.ILogoutLivePersonCallback)
  markConversationAsNormal()V = MarkConversationAsNormal()
  markConversationAsUrgent()V = MarkConversationAsUrgent()
  reconnect(Lcom/liveperson/infra/LPAuthenticationParams;)V = Reconnect(Com.Liveperson.Infra.LPAuthenticationParams)
  reconnect(Ljava/lang/String;)V = Reconnect(string)
  registerLPPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = RegisterLPPusher(string, string, string)
  registerLPPusher(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ICallback;)V = RegisterLPPusher(string, string, string, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ICallback)
  removeCallBack()V = RemoveCallBack()
  resolveConversation()V = ResolveConversation()
  setCallback(Lcom/liveperson/api/LivePersonCallback;)V = SetCallback(Com.Liveperson.Api.ILivePersonCallback)
  setImageServiceDownloadNotificationBuilder(Landroid/app/Notification$Builder;)V = SetImageServiceDownloadNotificationBuilder(Android.App.Notification.Builder)
  setImageServicePendingIntent(Landroid/app/PendingIntent;)V = SetImageServicePendingIntent(Android.App.PendingIntent)
  setImageServiceUploadNotificationBuilder(Landroid/app/Notification$Builder;)V = SetImageServiceUploadNotificationBuilder(Android.App.Notification.Builder)
  setUserProfile(Lcom/liveperson/messaging/sdk/api/model/ConsumerProfile;)V = SetUserProfile(Com.Liveperson.Messaging.Sdk.Api.Model.ConsumerProfile)
  setUserProfile(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetUserProfile(string, string, string, string)
  showConversation(Landroid/app/Activity;)Z = ShowConversation(Android.App.Activity)
  showConversation(Landroid/app/Activity;Lcom/liveperson/infra/LPAuthenticationParams;Lcom/liveperson/infra/ConversationViewParams;)Z = ShowConversation(Android.App.Activity, Com.Liveperson.Infra.LPAuthenticationParams, Com.Liveperson.Infra.ConversationViewParams)
  showConversation(Landroid/app/Activity;Ljava/lang/String;)Z = ShowConversation(Android.App.Activity, string)
  shutDown()V = ShutDown()
  shutDown(Lcom/liveperson/messaging/sdk/api/callbacks/ShutDownLivePersonCallback;)V = ShutDown(Com.Liveperson.Messaging.Sdk.Api.Callbacks.IShutDownLivePersonCallback)
  unregisterLPPusher(Ljava/lang/String;Ljava/lang/String;)V = UnregisterLPPusher(string, string)
com/liveperson/messaging/sdk/api/model/ConsumerProfile = Com.Liveperson.Messaging.Sdk.Api.Model.ConsumerProfile
  getAvatarUrl()Ljava/lang/String; = AvatarUrl
  getFirstName()Ljava/lang/String; = FirstName
  getLastName()Ljava/lang/String; = LastName
  getNickname()Ljava/lang/String; = Nickname
  getPhoneNumber()Ljava/lang/String; = PhoneNumber
com/liveperson/messaging/sdk/BuildConfig = Com.Liveperson.Messaging.Sdk.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/messaging/SocketTaskType = Com.Liveperson.Messaging.SocketTaskType
  GET_CLOCK = GetClock
  GET_USER = GetUser
  QUERY_MESSAGES = QueryMessages
  SUBSCRIBE = Subscribe
  UN_SUBSCRIBE = UnSubscribe
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/SocketTaskType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/SocketTaskType; = Values()
com/liveperson/messaging/structuredcontent/model/actions/BaseAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.BaseAction
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mName = MName
  getName()Ljava/lang/String; = Name
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
com/liveperson/messaging/structuredcontent/model/actions/LinkAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.LinkAction
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getUri()Ljava/lang/String; = Uri
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/actions/NavigateAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.NavigateAction
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getLatitude()Ljava/lang/String; = Latitude
  getLongitude()Ljava/lang/String; = Longitude
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.IOnActionClickListener
  onClick()V = OnClick()
com/liveperson/messaging/structuredcontent/model/actions/PublishTextAction = Com.Liveperson.Messaging.Structuredcontent.Model.Actions.PublishTextAction
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  getOnClickListener(Landroid/content/Context;Ljava/lang/String;)Lcom/liveperson/messaging/structuredcontent/model/actions/OnActionClickListener; = GetOnClickListener(Android.Content.Context, string)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/ActionableElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.ActionableElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mActionList = MActionList
  mMetadata = MMetadata
  TAG = Tag
  getActions()Ljava/util/List; = Actions
  getMetadata()Lorg/json/JSONArray; = Metadata
  parseActions(Lorg/json/JSONObject;)V = ParseActions(Org.Json.JSONObject)
  parseClick(Lorg/json/JSONObject;)V = ParseClick(Org.Json.JSONObject)
com/liveperson/messaging/structuredcontent/model/elements/BaseElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.BaseElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mType = MType
  getType()Ljava/lang/String; = Type
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  TAG = Tag
  getStyle()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle; = Style
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ElementStyle
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getBackgroundColor()I = BackgroundColor
  getBorderColor()Ljava/lang/Integer; = BorderColor
  getBorderRadius()Ljava/lang/Integer; = BorderRadius
  isBold()Z = IsBold
  isItalic()Z = IsItalic
  getSize()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle$ElementSize; = Size
  getTextColor()Ljava/lang/Integer; = TextColor
  setDefaultValues()V = SetDefaultValues()
com/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getCaption()Ljava/lang/String; = Caption
  getUrl()Ljava/lang/String; = Url
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  getUri()Ljava/lang/String; = Uri
  setUri(Ljava/lang/String;)V = Uri
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/MapElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getLatitude()F = Latitude
  getLongitude()F = Longitude
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/TextElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getStyle()Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ElementStyle; = Style
  getText()Ljava/lang/String; = Text
  setText(Ljava/lang/String;)V = Text
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement
  <init>()V = .ctor()
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getUrl()Ljava/lang/String; = Url
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getPadding()I = Padding
  setPadding(I)V = Padding
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/ComplexElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.ComplexElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  <init>(Lorg/json/JSONObject;Ljava/lang/String;)V = .ctor(Org.Json.JSONObject, string)
  mElementList = MElementList
  getElementList()Ljava/util/List; = ElementList
  addElement(Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement;)V = AddElement(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement)
com/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement
  <init>(Ljava/lang/String;Z)V = .ctor(string, bool)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  isVerticalOrientation()Z = IsVerticalOrientation
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  getItemsPerRow()I = ItemsPerRow
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
  toString()Ljava/lang/String; = ToString()
com/liveperson/messaging/structuredcontent/model/elements/SimpleElement = Com.Liveperson.Messaging.Structuredcontent.Model.Elements.SimpleElement
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  mRtl = MRtl
  mTooltip = MTooltip
  isRtl()Z = Rtl
  setRtl(Z)V = Rtl
  getTooltip()Ljava/lang/String; = Tooltip
  setTooltip(Ljava/lang/String;)V = Tooltip
com/liveperson/messaging/structuredcontent/parsers/ActionParser = Com.Liveperson.Messaging.Structuredcontent.Parsers.ActionParser
  <init>()V = .ctor()
  TAG = Tag
  parse(Lorg/json/JSONArray;)Ljava/util/List; = Parse(Org.Json.JSONArray)
com/liveperson/messaging/structuredcontent/parsers/ElementParser = Com.Liveperson.Messaging.Structuredcontent.Parsers.ElementParser
  <init>()V = .ctor()
  TAG = Tag
  parse(Lorg/json/JSONObject;)Lcom/liveperson/messaging/structuredcontent/model/elements/SimpleElement; = Parse(Org.Json.JSONObject)
com/liveperson/messaging/structuredcontent/parsers/ElementType = Com.Liveperson.Messaging.Structuredcontent.Parsers.ElementType
  <init>()V = .ctor()
  ACTIONS = Actions
  ANDROID = Android
  BACKGROUND_COLOR = BackgroundColor
  BOLD = Bold
  BORDER_COLOR = BorderColor
  BORDER_RADIUS = BorderRadius
  BUTTON = Button
  CAPTION = Caption
  CAROUSEL = Carousel
  CLICK = Click
  COLOR = Color
  ELEMENTS = Elements
  HORIZONTAL = Horizontal
  ID = Id
  IMAGE = Image
  ITALIC = Italic
  ITEMS_PER_ROW = ItemsPerRow
  LA = La
  LAYOUT = Layout
  LINK = Link
  LO = Lo
  MAP = Map
  METADATA = Metadata
  NAME = Name
  NAVIGATE = Navigate
  PADDING = Padding
  PUBLISH_TEXT = PublishText
  QUICK_REPLY = QuickReply
  REPLIES = Replies
  RTL = Rtl
  SIZE = Size
  STYLE = Style
  TEXT = Text
  TITLE = Title
  TOOLTIP = Tooltip
  TYPE = Type
  URI = Uri
  URL = Url
  VERTICAL = Vertical
  WEBVIEW = Webview
com/liveperson/messaging/structuredcontent/visitor/ElementVisitor = Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ButtonElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ButtonElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/ImageElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.ImageElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/LinkElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.LinkElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/MapElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.MapElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/TextElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.TextElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/basic/WebViewElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Basic.WebViewElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/CarouselElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.CarouselElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/LayoutElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.LayoutElement)
  visit(Lcom/liveperson/messaging/structuredcontent/model/elements/complex/QuickRepliesElement;)V = Visit(Com.Liveperson.Messaging.Structuredcontent.Model.Elements.Complex.QuickRepliesElement)
com/liveperson/messaging/structuredcontent/visitor/Visitable = Com.Liveperson.Messaging.Structuredcontent.Visitor.IVisitable
  accept(Lcom/liveperson/messaging/structuredcontent/visitor/ElementVisitor;)V = Accept(Com.Liveperson.Messaging.Structuredcontent.Visitor.IElementVisitor)
com/liveperson/messaging/TaskType = Com.Liveperson.Messaging.TaskType
  CSDS = Csds
  IDP = Idp
  INVALID_CERTIFICATE = InvalidCertificate
  OPEN_SOCKET = OpenSocket
  USER_EXPIRED = UserExpired
  VERSION = Version
  valueOf(Ljava/lang/String;)Lcom/liveperson/messaging/TaskType; = ValueOf(string)
  values()[Lcom/liveperson/messaging/TaskType; = Values()
com/liveperson/messaging/Utils/TokenUtils = Com.Liveperson.Messaging.Utils.TokenUtils
  <init>()V = .ctor()
  TAG = Tag
  getConsumerUserId(Ljava/lang/String;)Ljava/lang/String; = GetConsumerUserId(string)
  getOriginalConsumerIdFromJWT(Ljava/lang/String;)Ljava/lang/String; = GetOriginalConsumerIdFromJWT(string)
  isJwtExpired(Ljava/lang/String;)Z = IsJwtExpired(string)
com/liveperson/monitoring/cache/MonitoringParamsCache = Com.Liveperson.Monitoring.Cache.MonitoringParamsCache
  <init>(Ljava/lang/String;)V = .ctor(string)
  getAPP_INSTALL_ID_KEY()Ljava/lang/String; = APP_INSTALL_ID_KEY
  getAppInstallId()Ljava/lang/String; = AppInstallId
  setAppInstallId(Ljava/lang/String;)V = AppInstallId
  getBrandId()Ljava/lang/String; = BrandId
  getCSDS_IDP_DOMAIN_KEY()Ljava/lang/String; = CSDS_IDP_DOMAIN_KEY
  getCSDS_LOGGOS_DOMAIN_KEY()Ljava/lang/String; = CSDS_LOGGOS_DOMAIN_KEY
  getCSDS_SHARK_DOMAIN_KEY()Ljava/lang/String; = CSDS_SHARK_DOMAIN_KEY
  getCsdsMainDomain()Ljava/lang/String; = CsdsMainDomain
  setCsdsMainDomain(Ljava/lang/String;)V = CsdsMainDomain
  getIdpDomain()Ljava/lang/String; = IdpDomain
  setIdpDomain(Ljava/lang/String;)V = IdpDomain
  isCsdsFilled()Z = IsCsdsFilled
  getLAST_CSDS_UPDATE_TIMESTAMP_KEY()Ljava/lang/String; = LAST_CSDS_UPDATE_TIMESTAMP_KEY
  getLastCsdsUpdateTimestamp()J = LastCsdsUpdateTimestamp
  setLastCsdsUpdateTimestamp(J)V = LastCsdsUpdateTimestamp
  getLoggosDomain()Ljava/lang/String; = LoggosDomain
  setLoggosDomain(Ljava/lang/String;)V = LoggosDomain
  getSDK_INFO_SEND_KEY()Ljava/lang/String; = SDK_INFO_SEND_KEY
  getSdkInfoSent()Z = SdkInfoSent
  setSdkInfoSent(Z)V = SdkInfoSent
  getSESSION_ID_KEY()Ljava/lang/String; = SESSION_ID_KEY
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getSharkDomain()Ljava/lang/String; = SharkDomain
  setSharkDomain(Ljava/lang/String;)V = SharkDomain
  getVISITOR_ID_KEY()Ljava/lang/String; = VISITOR_ID_KEY
  getVisitorId()Ljava/lang/String; = VisitorId
  setVisitorId(Ljava/lang/String;)V = VisitorId
  clear()V = Clear()
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
com/liveperson/monitoring/cache/ParamsCache = Com.Liveperson.Monitoring.Cache.IParamsCache
  isCsdsFilled()Z = IsCsdsFilled
  getServiceDomain(Ljava/lang/String;)Ljava/lang/String; = GetServiceDomain(string)
  updateCsdsDomains(Ljava/util/HashMap;)Z = UpdateCsdsDomains(System.Collections.Generic.IDictionary<string, string>)
com/liveperson/monitoring/Command = Com.Liveperson.Monitoring.ICommand
  execute()V = Execute()
com/liveperson/monitoring/managers/MonitoringRequestManager = Com.Liveperson.Monitoring.Managers.MonitoringRequestManager
  <init>(Ljava/lang/String;Lcom/liveperson/monitoring/cache/MonitoringParamsCache;)V = .ctor(string, Com.Liveperson.Monitoring.Cache.MonitoringParamsCache)
  getBrandId()Ljava/lang/String; = BrandId
  getParamsCache()Lcom/liveperson/monitoring/cache/MonitoringParamsCache; = ParamsCache
  getTwentyFourHoursInMillis()I = TwentyFourHoursInMillis
com/liveperson/monitoring/model/EngagementWithSession = Com.Liveperson.Monitoring.Model.EngagementWithSession
  getPageId()Ljava/lang/String; = PageId
  getSessionId()Ljava/lang/String; = SessionId
  getVisitorId()Ljava/lang/String; = VisitorId
com/liveperson/monitoring/model/ModelKeyNames = Com.Liveperson.Monitoring.Model.ModelKeyNames
  <init>()V = .ctor()
  CAMPAIGN_ID = CampaignId
  CONNECTOR_ID = ConnectorId
  CONTEXT_ID = ContextId
  CONVERSATION_ID = ConversationId
  ENGAGEMENT_DETAILS = EngagementDetails
  ENGAGEMENT_ID = EngagementId
  ENGAGEMENT_REVISION = EngagementRevision
  PAGE_ID = PageId
  SESSION_ID = SessionId
  STATUS = Status
  VISITOR_ID = VisitorId
com/liveperson/monitoring/Monitoring = Com.Liveperson.Monitoring.Monitoring
  <init>()V = .ctor()
  getApplicationContext()Landroid/content/Context; = ApplicationContext
  setApplicationContext(Landroid/content/Context;)V = ApplicationContext
  getBrandId()Ljava/lang/String; = BrandId
  setBrandId(Ljava/lang/String;)V = BrandId
  getInitialized()Z = Initialized
  setInitialized(Z)V = Initialized
  isInitialized()Z = IsInitialized
  getParamsCache()Lcom/liveperson/monitoring/cache/MonitoringParamsCache; = ParamsCache
  setParamsCache(Lcom/liveperson/monitoring/cache/MonitoringParamsCache;)V = ParamsCache
  init(Lcom/liveperson/sdk/MonitoringInternalInitParams;)Z = Init(Com.Liveperson.Sdk.MonitoringInternalInitParams)
  logout(Landroid/content/Context;)Z = Logout(Android.Content.Context)
  postOnMainThread(Ljava/lang/Runnable;)V = PostOnMainThread(Java.Lang.IRunnable)
com/liveperson/monitoring/MonitoringFactory = Com.Liveperson.Monitoring.MonitoringFactory
  INSTANCE = Instance
  isInitialized()Z = IsInitialized
  getMonitoring()Lcom/liveperson/monitoring/Monitoring; = Monitoring
  initMonitoring(Lcom/liveperson/sdk/MonitoringInternalInitParams;)Z = InitMonitoring(Com.Liveperson.Sdk.MonitoringInternalInitParams)
  logout(Landroid/content/Context;)Z = Logout(Android.Content.Context)
com/liveperson/monitoring/requests/BaseMonitoringRequest = Com.Liveperson.Monitoring.Requests.BaseMonitoringRequest
  getACR()Ljava/lang/String; = ACR
  getContext()Landroid/content/Context; = Context
  getDEFAULT_AUTH_ACR()Ljava/lang/String; = DEFAULT_AUTH_ACR
  getDEFAULT_UNAUTH_ACR()Ljava/lang/String; = DEFAULT_UNAUTH_ACR
  getISSUER()Ljava/lang/String; = ISSUER
  getKEY_CONSUMER_ID_ENC()Ljava/lang/String; = KEY_CONSUMER_ID_ENC
  getNUM_OF_RETRIES()I = NUM_OF_RETRIES
  getParamsCache()Lcom/liveperson/monitoring/cache/MonitoringParamsCache; = ParamsCache
  getRequest()Lcom/liveperson/infra/network/http/request/HttpRequest; = Request
  getRequestUrl()Ljava/lang/String; = RequestUrl
  getRetryCounter()I = RetryCounter
  setRetryCounter(I)V = RetryCounter
  getSUB()Ljava/lang/String; = SUB
  buildRequestUrl()Ljava/lang/String; = BuildRequestUrl()
  callErrorCallback(Ljava/lang/Exception;)V = CallErrorCallback(Java.Lang.Exception)
  execute()V = Execute()
  handleError(Ljava/lang/Exception;Lcom/liveperson/infra/network/http/request/HttpRequest;)V = HandleError(Java.Lang.Exception, Com.Liveperson.Infra.Network.Http.Request.HttpRequest)
  handleResponse(Ljava/lang/String;)V = HandleResponse(string)
com/liveperson/monitoring/requests/CSDSRequest = Com.Liveperson.Monitoring.Requests.CSDSRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/monitoring/sdk/callbacks/IMonitoringCallback;)V = .ctor(string, string, Com.Liveperson.Monitoring.Sdk.Callbacks.IMonitoringCallback)
  execute()V = Execute()
com/liveperson/monitoring/requests/SendSdeRequest = Com.Liveperson.Monitoring.Requests.SendSdeRequest
  getRequest()Lcom/liveperson/infra/network/http/request/HttpRequest; = Request
  getRequestUrl()Ljava/lang/String; = RequestUrl
  callErrorCallback(Ljava/lang/Exception;)V = CallErrorCallback(Java.Lang.Exception)
  handleResponse(Ljava/lang/String;)V = HandleResponse(string)
com/liveperson/monitoring/sdk/api/LivepersonMonitoring = Com.Liveperson.Monitoring.Sdk.Api.LivepersonMonitoring
  TAG = Tag
  getSDKVersion()Ljava/lang/String; = SDKVersion
com/liveperson/monitoring/sdk/callbacks/IMonitoringCallback = Com.Liveperson.Monitoring.Sdk.Callbacks.IMonitoringCallback
  onError(Lcom/liveperson/monitoring/sdk/callbacks/MonitoringErrorType;Ljava/lang/Throwable;)V = OnError(Com.Liveperson.Monitoring.Sdk.Callbacks.MonitoringErrorType, Java.Lang.Object)
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
com/liveperson/monitoring/sdk/callbacks/MonitoringErrorType = Com.Liveperson.Monitoring.Sdk.Callbacks.MonitoringErrorType
  <init>()V = .ctor()
  CSDS_ERROR = CsdsError
  INITIALIZATION_ERROR = InitializationError
  LOGOUT_ERROR = LogoutError
  NO_NETWORK = NoNetwork
  NOT_INITIALIZED = NotInitialized
  PARAMETER_MISSING = ParameterMissing
  REQUEST_ERROR = RequestError
  valueOf(Ljava/lang/String;)Lcom/liveperson/monitoring/sdk/callbacks/MonitoringErrorType; = ValueOf(string)
  values()[Lcom/liveperson/monitoring/sdk/callbacks/MonitoringErrorType; = Values()
com/liveperson/monitoring/utils/Clearable = Com.Liveperson.Monitoring.Utils.IClearable
  clear()V = Clear()
com/liveperson/monitoring/utils/DomainBuilder = Com.Liveperson.Monitoring.Utils.DomainBuilder
  <init>()V = .ctor()
  TAG = Tag
  getCsdsDomain(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = GetCsdsDomain(Android.Content.Context, string)
com/liveperson/monitoring/utils/LocalBroadcast = Com.Liveperson.Monitoring.Utils.LocalBroadcast
  <init>()V = .ctor()
  sendBroadcast(Landroid/content/Context;Ljava/lang/String;)V = SendBroadcast(Android.Content.Context, string)
  sendBroadcast(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)V = SendBroadcast(Android.Content.Context, string, Android.OS.Bundle)
com/liveperson/monitoring/utils/ShutDown = Com.Liveperson.Monitoring.Utils.IShutDown
  shutDown(Landroid/content/Context;)V = ShutDown(Android.Content.Context)
com/liveperson/monitoring/utils/ThreadPoolExecutor = Com.Liveperson.Monitoring.Utils.ThreadPoolExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;)V = Execute(Java.Lang.IRunnable)
  executeDelayed(Ljava/lang/Runnable;J)V = ExecuteDelayed(Java.Lang.IRunnable, long)
  killAll()V = KillAll()
com/liveperson/network/http/requests/GetEngagementRequest = Com.Liveperson.Network.Http.Requests.GetEngagementRequest
  getRequest()Lcom/liveperson/infra/network/http/request/HttpRequest; = Request
  getRequestUrl()Ljava/lang/String; = RequestUrl
  callErrorCallback(Ljava/lang/Exception;)V = CallErrorCallback(Java.Lang.Exception)
  handleResponse(Ljava/lang/String;)V = HandleResponse(string)
com/liveperson/sdk/callbacks/MonitoringCallback = Com.Liveperson.Sdk.Callbacks.IMonitoringCallback
  onError(Lcom/liveperson/monitoring/sdk/callbacks/MonitoringErrorType;Ljava/lang/Exception;)V = OnError(Com.Liveperson.Monitoring.Sdk.Callbacks.MonitoringErrorType, Java.Lang.Exception)
  onSuccess()V = OnSuccess()
com/liveperson/sdk/MonitoringInternalInitParams = Com.Liveperson.Sdk.MonitoringInternalInitParams
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  getAccountId()Ljava/lang/String; = AccountId
  getAppInstallId()Ljava/lang/String; = AppInstallId
  getApplicationContext()Landroid/content/Context; = ApplicationContext
  component1()Landroid/content/Context; = Component1()
  component2()Ljava/lang/String; = Component2()
  component3()Ljava/lang/String; = Component3()
  copy(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Lcom/liveperson/sdk/MonitoringInternalInitParams; = Copy(Android.Content.Context, string, string)
