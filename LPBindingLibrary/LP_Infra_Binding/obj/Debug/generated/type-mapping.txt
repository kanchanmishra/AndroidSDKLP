com/liveperson/infra/BadArgumentException = Com.Liveperson.Infra.BadArgumentException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
com/liveperson/infra/BuildConfig = Com.Liveperson.Infra.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/liveperson/infra/callbacks/InitLivePersonCallBack = Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack
  onInitFailed(Ljava/lang/Exception;)V = OnInitFailed(Java.Lang.Exception)
  onInitSucceed()V = OnInitSucceed()
com/liveperson/infra/callbacks/LogoutLivePersonCallBack = Com.Liveperson.Infra.Callbacks.ILogoutLivePersonCallBack
  onLogoutFailed(Ljava/lang/Exception;)V = OnLogoutFailed(Java.Lang.Exception)
  onLogoutSucceed()V = OnLogoutSucceed()
com/liveperson/infra/callbacks/ShutDownLivePersonCallBack = Com.Liveperson.Infra.Callbacks.IShutDownLivePersonCallBack
  onShutDownFailed(Ljava/lang/Exception;)V = OnShutDownFailed(Java.Lang.Exception)
  onShutDownSucceed()V = OnShutDownSucceed()
com/liveperson/infra/CampaignInfo = Com.Liveperson.Infra.CampaignInfo
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Java.Lang.Long, Java.Lang.Long, string, string, string)
  CREATOR = Creator
  getCampaignId()Ljava/lang/Long; = CampaignId
  setCampaignId(Ljava/lang/Long;)V = CampaignId
  getContextId()Ljava/lang/String; = ContextId
  setContextId(Ljava/lang/String;)V = ContextId
  getEngagementId()Ljava/lang/Long; = EngagementId
  setEngagementId(Ljava/lang/Long;)V = EngagementId
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getVisitorId()Ljava/lang/String; = VisitorId
  setVisitorId(Ljava/lang/String;)V = VisitorId
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/Clearable = Com.Liveperson.Infra.IClearable
  clear()V = Clear()
com/liveperson/infra/Command = Com.Liveperson.Infra.ICommand
  execute()V = Execute()
com/liveperson/infra/configuration/ConfigurableResource = Com.Liveperson.Infra.Configuration.ConfigurableResource
  <init>(ILjava/lang/String;Lcom/liveperson/infra/configuration/ConfigurableResource$ResourceType;)V = .ctor(int, string, Com.Liveperson.Infra.Configuration.ConfigurableResource.ResourceType)
  getResourceId()I = ResourceId
  getResourceName()Ljava/lang/String; = ResourceName
  getResourceType()Lcom/liveperson/infra/configuration/ConfigurableResource$ResourceType; = GetResourceType()
com/liveperson/infra/configuration/Configuration = Com.Liveperson.Infra.Configuration.Configuration
  <init>()V = .ctor()
  getBoolean(I)Z = GetBoolean(int)
  getColor(I)I = GetColor(int)
  getDimension(I)F = GetDimension(int)
  getDrawable(I)Landroid/graphics/drawable/Drawable; = GetDrawable(int)
  getInteger(I)I = GetInteger(int)
  getString(I)Ljava/lang/String; = GetString(int)
  scanXmlIdsAndNames(Ljava/lang/Class;)Ljava/util/HashMap; = ScanXmlIdsAndNames(Java.Lang.Class)
  set(IZ)V = Set(int, bool)
  set(IF)V = Set(int, float)
  set(II)V = Set(int, int)
  set(ILjava/lang/String;)V = Set(int, string)
com/liveperson/infra/configuration/LptagEnvironment = Com.Liveperson.Infra.Configuration.LptagEnvironment
  <init>()V = .ctor()
  LPTAG_ALPHA_DOMAIN = LptagAlphaDomain
  LPTAG_PRODUCTION_DOMAIN = LptagProductionDomain
  LPTAG_QA_DOMAIN = LptagQaDomain
  getEnvironment()Lcom/liveperson/infra/configuration/LptagEnvironment$Env; = Environment
  setEnvironment(Lcom/liveperson/infra/configuration/LptagEnvironment$Env;)V = Environment
  getLptagDomain()Ljava/lang/String; = LptagDomain
com/liveperson/infra/controller/AudioPlayable = Com.Liveperson.Infra.Controller.IAudioPlayable
  playVoiceMessage(Ljava/lang/String;)V = PlayVoiceMessage(string)
  stopPlaying()V = StopPlaying()
com/liveperson/infra/controller/AudioRecordable = Com.Liveperson.Infra.Controller.IAudioRecordable
  cancelRecording()V = CancelRecording()
com/liveperson/infra/controller/DBEncryptionHelper = Com.Liveperson.Infra.Controller.DBEncryptionHelper
  <init>()V = .ctor()
  decrypt(Lcom/liveperson/infra/utils/EncryptionVersion;Ljava/lang/String;)Ljava/lang/String; = Decrypt(Com.Liveperson.Infra.Utils.EncryptionVersion, string)
  encrypt(Lcom/liveperson/infra/utils/EncryptionVersion;Ljava/lang/String;)Ljava/lang/String; = Encrypt(Com.Liveperson.Infra.Utils.EncryptionVersion, string)
com/liveperson/infra/controller/DBEncryptionKeyHelper = Com.Liveperson.Infra.Controller.DBEncryptionKeyHelper
  <init>(Ljava/lang/String;)V = .ctor(string)
  clear()V = Clear()
  getAppEncryptionVersion(Landroid/content/Context;)Lcom/liveperson/infra/utils/EncryptionVersion; = GetAppEncryptionVersion(Android.Content.Context)
com/liveperson/infra/controller/PlayingAudioManager = Com.Liveperson.Infra.Controller.PlayingAudioManager
  <init>()V = .ctor()
  getMCurrentlyPlayingList()Ljava/util/Set; = MCurrentlyPlayingList
  addPlayingAndStopOthers(Lcom/liveperson/infra/controller/AudioPlayable;)V = AddPlayingAndStopOthers(Com.Liveperson.Infra.Controller.IAudioPlayable)
  removePlaying(Lcom/liveperson/infra/controller/AudioPlayable;)V = RemovePlaying(Com.Liveperson.Infra.Controller.IAudioPlayable)
  stopAllCurrentlyPlaying()V = StopAllCurrentlyPlaying()
  stopPlaying(Lcom/liveperson/infra/controller/AudioPlayable;)V = StopPlaying(Com.Liveperson.Infra.Controller.IAudioPlayable)
com/liveperson/infra/ConversationViewParams = Com.Liveperson.Infra.ConversationViewParams
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Z)V = .ctor(bool)
  CREATOR = Creator
  getCampaignInfo()Lcom/liveperson/infra/CampaignInfo; = CampaignInfo
  getHistoryConversationMaxDaysType()Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = HistoryConversationMaxDaysType
  getHistoryConversationsMaxDays()I = HistoryConversationsMaxDays
  getHistoryConversationsStateToDisplay()Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = HistoryConversationsStateToDisplay
  isFilterOn()Z = IsFilterOn
  isViewOnlyMode()Z = IsViewOnlyMode
  clearCampaignInfo()V = ClearCampaignInfo()
  describeContents()I = DescribeContents()
  setCampaignInfo(Lcom/liveperson/infra/CampaignInfo;)Lcom/liveperson/infra/ConversationViewParams; = SetCampaignInfo(Com.Liveperson.Infra.CampaignInfo)
  setHistoryConversationMaxDaysType(Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType;)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationMaxDaysType(Com.Liveperson.Infra.LPConversationHistoryMaxDaysDateType)
  setHistoryConversationsMaxDays(I)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationsMaxDays(int)
  setHistoryConversationsStateToDisplay(Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay;)Lcom/liveperson/infra/ConversationViewParams; = SetHistoryConversationsStateToDisplay(Com.Liveperson.Infra.LPConversationsHistoryStateToDisplay)
  setReadOnlyMode(Z)Lcom/liveperson/infra/ConversationViewParams; = SetReadOnlyMode(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/database/BaseDBRepository = Com.Liveperson.Infra.Database.BaseDBRepository
  <init>(Ljava/lang/String;)V = .ctor(string)
  getDB()Lcom/liveperson/infra/database/DBUtilities; = DB
com/liveperson/infra/database/DataBaseCommand = Com.Liveperson.Infra.Database.DataBaseCommand
  <init>(Lcom/liveperson/infra/database/DataBaseCommand$QueryCommand;)V = .ctor(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCommand)
  mPostQueryOnBackground = MPostQueryOnBackground
  mPostQueryOnUI = MPostQueryOnUI
  mPreQueryOnBackground = MPreQueryOnBackground
  create(Lcom/liveperson/infra/database/DataBaseCommand$QueryCommand;)Lcom/liveperson/infra/database/DataBaseCommand; = Create(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCommand)
  execute()V = Execute()
  executeSynchronously()Ljava/lang/Object; = ExecuteSynchronously()
  setPostQueryOnBackground(Lcom/liveperson/infra/database/DataBaseCommand$QueryCallback;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPostQueryOnBackground(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCallback)
  setPostQueryOnUI(Lcom/liveperson/infra/database/DataBaseCommand$QueryCallback;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPostQueryOnUI(Com.Liveperson.Infra.Database.DataBaseCommand.IQueryCallback)
  setPreQueryOnBackground(Ljava/lang/Runnable;)Lcom/liveperson/infra/database/DataBaseCommand; = SetPreQueryOnBackground(Java.Lang.IRunnable)
com/liveperson/infra/database/DataBaseExecutor = Com.Liveperson.Infra.Database.DataBaseExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;)V = Execute(Java.Lang.IRunnable)
  killAll(Lcom/liveperson/infra/ICallback;)V = KillAll(Com.Liveperson.Infra.ICallback)
com/liveperson/infra/database/DatabaseManager = Com.Liveperson.Infra.Database.DatabaseManager
  getBrandStructure()Lcom/liveperson/infra/database/tables/BrandProfileTable; = BrandStructure
  getConversationsTable()Lcom/liveperson/infra/database/tables/ConversationsTable; = ConversationsTable
  getInstance()Lcom/liveperson/infra/database/DatabaseManager; = Instance
  getMessagesTable()Lcom/liveperson/infra/database/tables/MessagesTable; = MessagesTable
  getUsersStructure()Lcom/liveperson/infra/database/tables/UsersTable; = UsersStructure
  clear()V = Clear()
  registerTable(Lcom/liveperson/infra/database/tables/BaseTable;)V = RegisterTable(Com.Liveperson.Infra.Database.Tables.IBaseTable)
  shutDown()V = ShutDown()
com/liveperson/infra/database/DBUtilities = Com.Liveperson.Infra.Database.DBUtilities
  ROW_UPDATED = RowUpdated
  insert(Landroid/content/ContentValues;)J = Insert(Android.Content.ContentValues)
  insertOrUpdate(Landroid/content/ContentValues;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)J = InsertOrUpdate(Android.Content.ContentValues, Android.Content.ContentValues, string, string[])
  insertWithOnConflict(Landroid/content/ContentValues;)J = InsertWithOnConflict(Android.Content.ContentValues)
  query([Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(string[], string, string[], string, string, string)
  query([Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(string[], string, string[], string, string, string, string)
  rawQuery(Ljava/lang/String;[Ljava/lang/Object;)Landroid/database/Cursor; = RawQuery(string, params Java.Lang.Object[])
  removeAll(Ljava/lang/String;[Ljava/lang/String;)I = RemoveAll(string, string[])
  replace(Landroid/content/ContentValues;)J = Replace(Android.Content.ContentValues)
  runTransaction(Ljava/util/List;)V = RunTransaction(System.Collections.Generic.IList<Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand>)
  update(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I = Update(Android.Content.ContentValues, string, string[])
com/liveperson/infra/database/tables/BaseTable = Com.Liveperson.Infra.Database.Tables.IBaseTable
  KEY_ID = KeyId
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/BrandProfileTable = Com.Liveperson.Infra.Database.Tables.BrandProfileTable
  <init>()V = .ctor()
  BRAND_TABLE = BrandTable
  KEY_BIO = KeyBio
  KEY_BRAND_ID = KeyBrandId
  KEY_COVER_IMAGE = KeyCoverImage
  KEY_IS_SAVED = KeyIsSaved
  KEY_LOGO_IMAGE = KeyLogoImage
  KEY_NAME = KeyName
  KEY_SKILL = KeySkill
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/ConversationsTable = Com.Liveperson.Infra.Database.Tables.ConversationsTable
  <init>()V = .ctor()
  CONVERSATION_TABLE = ConversationTable
  KEY_ASSIGNED_AGENT_ID = KeyAssignedAgentId
  KEY_BRAND_ID = KeyBrandId
  KEY_CLOSE_REASON = KeyCloseReason
  KEY_CLOSE_TIME = KeyCloseTime
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_LAST_SERVER_SEQUENCE = KeyLastServerSequence
  KEY_REQUEST_ID = KeyRequestId
  KEY_SHOWED_CSAT = KeyShowedCsat
  KEY_START_TIME = KeyStartTime
  KEY_STATE = KeyState
  KEY_TARGET_ID = KeyTargetId
  KEY_TTR_TYPE = KeyTtrType
  KEY_UNREAD_MESSAGES = KeyUnreadMessages
  KEY_UPDATE_IN_PROGRESS_SEMAPHORE = KeyUpdateInProgressSemaphore
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/FilesTable = Com.Liveperson.Infra.Database.Tables.filesTable
  <init>()V = .ctor()
  FILES_TABLE = FilesTable
  KEY_FILE_TYPE = KeyFileType
  KEY_ID_AS_VALUE = KeyIdAsValue
  KEY_LOAD_STATUS = KeyLoadStatus
  KEY_LOCAL_URL = KeyLocalUrl
  KEY_LOCAL_URL_UPDATE_TIMESTAMP = KeyLocalUrlUpdateTimestamp
  KEY_PREVIEW = KeyPreview
  KEY_RELATED_MESSAGE_ROW_ID = KeyRelatedMessageRowId
  KEY_SWIFT_PATH = KeySwiftPath
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/MessagesTable = Com.Liveperson.Infra.Database.Tables.messagesTable
  <init>()V = .ctor()
  ENCRYPTION_VERSION_CURSOR_AS_VALUE = EncryptionVersionCursorAsValue
  KEY_CONTENT_TYPE = KeyContentType
  KEY_CONVERSATION_ID = KeyConversationId
  KEY_ENCRYPTION_VERSION = KeyEncryptionVersion
  KEY_EVENT_ID = KeyEventId
  KEY_MESSAGE_TYPE = KeyMessageType
  KEY_ORIGINATOR_ID = KeyOriginatorId
  KEY_SERVER_SEQUENCE = KeyServerSequence
  KEY_STATUS = KeyStatus
  KEY_TEXT = KeyText
  KEY_TIMESTAMP = KeyTimestamp
  MESSAGES_TABLE = MessagesTable
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/tables/UsersTable = Com.Liveperson.Infra.Database.Tables.usersTable
  <init>()V = .ctor()
  ENCRYPTION_VERSION_CURSOR_AS_VALUE = EncryptionVersionCursorAsValue
  KEY_BRAND_ID = KeyBrandId
  KEY_COVER_IMAGE = KeyCoverImage
  KEY_DESCRIPTION = KeyDescription
  KEY_EMAIL = KeyEmail
  KEY_ENCRYPTION_VERSION = KeyEncryptionVersion
  KEY_FIRST_NAME = KeyFirstName
  KEY_LAST_NAME = KeyLastName
  KEY_NICKNAME = KeyNickname
  KEY_ORIGINATOR_ID = KeyOriginatorId
  KEY_PHONE_NUMBER = KeyPhoneNumber
  KEY_PROFILE_IMAGE = KeyProfileImage
  KEY_REQUEST_ID = KeyRequestId
  KEY_USER_TYPE = KeyUserType
  USERS_TABLE = UsersTable
  getCreateSQL()Ljava/lang/String; = CreateSQL
  getName()Ljava/lang/String; = Name
  getProjection()[Ljava/lang/String; = GetProjection()
  onTableUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnTableUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/liveperson/infra/database/transaction_helper/InsertOrUpdateSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.InsertOrUpdateSQLCommand
  <init>(Landroid/content/ContentValues;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Android.Content.ContentValues, Android.Content.ContentValues, string, string[])
  getContentValuesForInsert()Landroid/content/ContentValues; = ContentValuesForInsert
  getContentValuesForUpdate()Landroid/content/ContentValues; = ContentValuesForUpdate
com/liveperson/infra/database/transaction_helper/InsertSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.InsertSQLCommand
  <init>(Landroid/content/ContentValues;)V = .ctor(Android.Content.ContentValues)
  getType()I = Type
com/liveperson/infra/database/transaction_helper/SQLiteCommand = Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand
  <init>(Landroid/content/ContentValues;)V = .ctor(Android.Content.ContentValues)
  mListener = MListener
  getContentValues()Landroid/content/ContentValues; = ContentValues
  getType()I = Type
  onInserted(J)V = OnInserted(long)
  setListener(Lcom/liveperson/infra/database/transaction_helper/SQLiteCommand$SQLiteCommandListener;)V = SetListener(Com.Liveperson.Infra.Database.Transaction_helper.SQLiteCommand.ISQLiteCommandListener)
com/liveperson/infra/database/transaction_helper/UpdateSQLCommand = Com.Liveperson.Infra.Database.Transaction_helper.UpdateSQLCommand
  <init>(Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)V = .ctor(Android.Content.ContentValues, string, string[])
  getType()I = Type
  getUpdateWhereClause()Ljava/lang/String; = UpdateWhereClause
  getUpdateWhereArgs()[Ljava/lang/String; = GetUpdateWhereArgs()
com/liveperson/infra/ForegroundService = Com.Liveperson.Infra.ForegroundService
  SCREEN_FOREGROUND_ACTION = ScreenForegroundAction
  SCREEN_FOREGROUND_EXTRA_BRAND_ID = ScreenForegroundExtraBrandId
  SCREEN_FOREGROUND_EXTRA_IS_FOREGROUND = ScreenForegroundExtraIsForeground
  SCREEN_FOREGROUND_EXTRA_TARGET_ID = ScreenForegroundExtraTargetId
  getForegroundBrandId()Ljava/util/HashSet; = ForegroundBrandId
  getInstance()Lcom/liveperson/infra/ForegroundService; = Instance
  isBrandForeground()Z = IsBrandForeground
  isBrandForeground(Ljava/lang/String;)Z = InvokeIsBrandForeground(string)
  isTargetForeground(Ljava/lang/String;)Z = IsTargetForeground(string)
  register(Ljava/lang/String;Ljava/lang/String;)V = Register(string, string)
  restart()V = Restart()
  shutDown()V = ShutDown()
  unregisterAll()V = UnregisterAll()
  unregisterBrand(Ljava/lang/String;)V = UnregisterBrand(string)
  unregisterTarget(Ljava/lang/String;)V = UnregisterTarget(string)
com/liveperson/infra/ForegroundServiceInterface = Com.Liveperson.Infra.IForegroundServiceInterface
  getForegroundBrandId()Ljava/util/HashSet; = ForegroundBrandId
  isBrandForeground()Z = IsBrandForeground
  isBrandForeground(Ljava/lang/String;)Z = InvokeIsBrandForeground(string)
  isTargetForeground(Ljava/lang/String;)Z = IsTargetForeground(string)
  register(Ljava/lang/String;Ljava/lang/String;)V = Register(string, string)
  unregisterAll()V = UnregisterAll()
  unregisterBrand(Ljava/lang/String;)V = UnregisterBrand(string)
  unregisterTarget(Ljava/lang/String;)V = UnregisterTarget(string)
com/liveperson/infra/handler/NotificationHandler = Com.Liveperson.Infra.Handler.NotificationHandler
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  <init>(Ljava/lang/String;Landroid/content/Context;Ljava/lang/Class;)V = .ctor(string, Android.Content.Context, Java.Lang.Class)
  <init>(Ljava/lang/String;Landroid/content/Context;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, Android.Content.Context, Java.Lang.Class, string, string)
  createForegroundServiceNotificationBuilder()Landroid/app/Notification$Builder; = CreateForegroundServiceNotificationBuilder()
  hideNotification(Landroid/content/Context;Ljava/lang/String;)V = HideNotification(Android.Content.Context, string)
  setAutoCancel(Z)Lcom/liveperson/infra/handler/NotificationHandler; = SetAutoCancel(bool)
  setIconResourceId(I)Lcom/liveperson/infra/handler/NotificationHandler; = SetIconResourceId(int)
  setNotificationDefaults(I)Lcom/liveperson/infra/handler/NotificationHandler; = SetNotificationDefaults(int)
  setPendingIntent(Landroid/app/PendingIntent;)Lcom/liveperson/infra/handler/NotificationHandler; = SetPendingIntent(Android.App.PendingIntent)
  showNotification()V = ShowNotification()
com/liveperson/infra/ICallback = Com.Liveperson.Infra.ICallback
  onError(Ljava/lang/Throwable;)V = OnError(Java.Lang.Object)
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
com/liveperson/infra/IConfiguration = Com.Liveperson.Infra.IConfigurationNew
  mFeaturesMap = MFeaturesMap
com/liveperson/infra/IDisposable = Com.Liveperson.Infra.IDisposable
  dispose()V = Dispose()
com/liveperson/infra/Infra = Com.Liveperson.Infra.Infra
  CLEAR_HISTORY_SHOW_CONFIRM_DIALOG = ClearHistoryShowConfirmDialog
  CONTEXTUAL_MENU_ON_TOOLBAR = ContextualMenuOnToolbar
  DISABLE_TTR_POPUP = DisableTtrPopup
  FEATURES_CONFIGURATION = FeaturesConfiguration
  instance = Instance
  KEY_AUTH_KEY = KeyAuthKey
  KEY_BRAND_ID = KeyBrandId
  KEY_READ_ONLY = KeyReadOnly
  KEY_TARGET_ID = KeyTargetId
  KEY_VIEW_PARAMS = KeyViewParams
  SDK_VERSION = SdkVersion
  SHOULD_USE_CONFIGURATION = ShouldUseConfiguration
  SHOW_AGENT_DETAILS_CSAT = ShowAgentDetailsCsat
  SHOW_CSAT_THANK_YOU = ShowCsatThankYou
  SHOW_FEEDBACK = ShowFeedback
  SHOW_TIMESTAMP_IN_TTR_NOTIFICATION = ShowTimestampInTtrNotification
  SHOW_YES_NO_QUESTION = ShowYesNoQuestion
  TTR_MESSAGE_OFF_HOURS_ENABLED = TtrMessageOffHoursEnabled
  getApplicationContext()Landroid/content/Context; = ApplicationContext
  getApplicationHandler()Landroid/os/Handler; = ApplicationHandler
  getDbEncryptionKeyHelper()Lcom/liveperson/infra/controller/DBEncryptionKeyHelper; = DbEncryptionKeyHelper
  getFileProviderAuthorityPrefix()Ljava/lang/String; = FileProviderAuthorityPrefix
  getHostVersion()Ljava/lang/String; = HostVersion
  isInitialized()Z = IsInitialized
  getLoggos()Lcom/liveperson/infra/log/logreporter/loggos/Loggos; = Loggos
  getLptagEnvironment()Lcom/liveperson/infra/configuration/LptagEnvironment; = LptagEnvironment
  clear()V = Clear()
  init(Landroid/content/Context;Lcom/liveperson/infra/sdkstatemachine/init/InfraInitData;Lcom/liveperson/infra/statemachine/InitProcess;)V = Init(Android.Content.Context, Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData, Com.Liveperson.Infra.Statemachine.InitProcess)
  logout(Landroid/content/Context;Lcom/liveperson/infra/sdkstatemachine/init/InfraInitData;Lcom/liveperson/infra/statemachine/LogoutProcess;)V = Logout(Android.Content.Context, Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData, Com.Liveperson.Infra.Statemachine.LogoutProcess)
  postOnMainThread(Ljava/lang/Runnable;)V = PostOnMainThread(Java.Lang.IRunnable)
  registerToNetworkChanges()V = RegisterToNetworkChanges()
  restart()V = Restart()
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  shutDown(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDown(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  unregisterToNetworkChanges()V = UnregisterToNetworkChanges()
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/Infra; = ValueOf(string)
  values()[Lcom/liveperson/infra/Infra; = Values()
com/liveperson/infra/InitLivePersonProperties = Com.Liveperson.Infra.InitLivePersonProperties
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/MonitoringInitParams;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, Com.Liveperson.Infra.MonitoringInitParams, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  getAppId()Ljava/lang/String; = AppId
  getBrandId()Ljava/lang/String; = BrandId
  getInitCallBack()Lcom/liveperson/infra/callbacks/InitLivePersonCallBack; = InitCallBack
  setInitCallBack(Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = InitCallBack
  isMonitoringParamsValid()Z = IsMonitoringParamsValid
  getMonitoringInitParams()Lcom/liveperson/infra/MonitoringInitParams; = MonitoringInitParams
  isValid(Lcom/liveperson/infra/InitLivePersonProperties;)Z = IsValid(Com.Liveperson.Infra.InitLivePersonProperties)
com/liveperson/infra/InternetConnectionService = Com.Liveperson.Infra.InternetConnectionService
  BROADCAST_INTERNET_CONNECTION_CONNECTED = BroadcastInternetConnectionConnected
  BROADCAST_INTERNET_CONNECTION_DISCONNECTED = BroadcastInternetConnectionDisconnected
  isNetworkAvailable()Z = IsNetworkAvailable
  registeredReceiver()V = RegisteredReceiver()
  shutDown()V = ShutDown()
  unRegisteredReceiver()V = UnRegisteredReceiver()
com/liveperson/infra/IPermissionCallback = Com.Liveperson.Infra.IPermissionCallback
  onPermissionsDenied()V = OnPermissionsDenied()
  onPermissionsGranted()V = OnPermissionsGranted()
com/liveperson/infra/LivePersonConfiguration = Com.Liveperson.Infra.LivePersonConfiguration
  <init>(Ljava/util/HashMap;)V = .ctor(System.Collections.Generic.IDictionary<string, Java.Lang.Boolean>)
com/liveperson/infra/LocalBroadcastReceiver = Com.Liveperson.Infra.LocalBroadcastReceiver
  register()V = Register()
  unregister()V = Unregister()
com/liveperson/infra/log/DefaultAndroidLogger = Com.Liveperson.Infra.Log.DefaultAndroidLogger
  <init>()V = .ctor()
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, string, Java.Lang.Throwable)
com/liveperson/infra/log/ILogger = Com.Liveperson.Infra.Log.ILogger
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, string, Java.Lang.Throwable)
com/liveperson/infra/log/logreporter/loggos/Loggos = Com.Liveperson.Infra.Log.Logreporter.Loggos.Loggos
  <init>()V = .ctor()
  CERTIFICATE_ERROR_ACTION = CertificateErrorAction
  PREFS_KEY_LOGGOS_DOMAIN = PrefsKeyLoggosDomain
  PREFS_KEY_LOGGOS_TARGETID = PrefsKeyLoggosTargetid
  TAG = Tag
  getDomain()Ljava/lang/String; = Domain
  setDomain(Ljava/lang/String;)V = Domain
  isShouldSendError()Z = IsShouldSendError
  getTargetId()Ljava/lang/String; = TargetId
  setTargetId(Ljava/lang/String;)V = TargetId
  addMessage(Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage;)V = AddMessage(Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage)
  init(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = Init(string, string, System.Collections.Generic.IList<string>)
  onError(Ljava/util/List;Ljava/lang/Exception;)V = OnError(System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, Java.Lang.Exception)
  onSuccess()V = OnSuccess()
  sendMessageImmediately(Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage;)V = SendMessageImmediately(Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage)
  shutdown()V = Shutdown()
com/liveperson/infra/log/logreporter/loggos/LoggosMessage = Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string, string)
  <init>(Lorg/json/JSONObject;)V = .ctor(Org.Json.JSONObject)
  ACCOUNT_ID = AccountId
  CONTEXT = Context
  DATE_FORMAT = DateFormat
  LOG_LEVEL = LogLevel
  MESSAGE = Message
  NAMESPACE = Namespace
  TAG = Tag
  TIME = Time
  URL = Url
  getAccountId()Ljava/lang/String; = AccountId
  getLevel()Ljava/lang/String; = Level
  getLogContext()Ljava/lang/String; = LogContext
  getMessage()Ljava/lang/String; = Message
  getNamespace()Ljava/lang/String; = Namespace
  getTime()Ljava/lang/String; = Time
  getUrl()Ljava/lang/String; = Url
  setAccountId(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetAccountId(string)
  setLevel(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetLevel(string)
  setLogContext(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetLogContext(string)
  setMessage(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetMessage(string)
  setNamespace(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetNamespace(string)
  setTime(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetTime(string)
  setTime(J)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetTime(long)
  setUrl(Ljava/lang/String;)Lcom/liveperson/infra/log/logreporter/loggos/LoggosMessage; = SetUrl(string)
  toJsonObject()Lorg/json/JSONObject; = ToJsonObject()
com/liveperson/infra/log/logreporter/loggos/logsender/HttpLogSender = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.HttpLogSender
  <init>()V = .ctor()
  TAG = Tag
  sendBulk(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = SendBulk(string, System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, System.Collections.Generic.IList<string>)
com/liveperson/infra/log/logreporter/loggos/logsender/LogSender = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.LogSender
  <init>()V = .ctor()
  mCallback = MCallback
  sendBulk(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V = SendBulk(string, System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, System.Collections.Generic.IList<string>)
  setCallback(Lcom/liveperson/infra/log/logreporter/loggos/logsender/LogSenderCallback;)V = SetCallback(Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.ILogSenderCallback)
com/liveperson/infra/log/logreporter/loggos/logsender/LogSenderCallback = Com.Liveperson.Infra.Log.Logreporter.Loggos.Logsender.ILogSenderCallback
  onError(Ljava/util/List;Ljava/lang/Throwable;)V = OnError(System.Collections.Generic.IList<Com.Liveperson.Infra.Log.Logreporter.Loggos.LoggosMessage>, Java.Lang.Object)
  onSuccess()V = OnSuccess()
com/liveperson/infra/log/LPMobileLog = Com.Liveperson.Infra.Log.LPMobileLog
  <init>()V = .ctor()
  ERROR = Error
  INFO = Info
  LOGGOS_CONTEXT = LoggosContext
  WARNING = Warning
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = D(string, string, string)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  setDebugMode(Z)V = SetDebugMode(bool)
  setLogger(Lcom/liveperson/infra/log/ILogger;)V = SetLogger(Com.Liveperson.Infra.Log.ILogger)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, Java.Lang.Throwable)
com/liveperson/infra/LPAuthenticationParams = Com.Liveperson.Infra.LPAuthenticationParams
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Lcom/liveperson/infra/LPAuthenticationParams$LPAuthenticationType;)V = .ctor(Com.Liveperson.Infra.LPAuthenticationParams.LPAuthenticationType)
  CREATOR = Creator
  getAuthKey()Ljava/lang/String; = AuthKey
  getAuthType()Lcom/liveperson/infra/LPAuthenticationParams$LPAuthenticationType; = AuthType
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getHostAppJWT()Ljava/lang/String; = HostAppJWT
  getHostAppRedirectUri()Ljava/lang/String; = HostAppRedirectUri
  isAuthenticated()Z = IsAuthenticated
  addCertificatePinningKey(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = AddCertificatePinningKey(string)
  describeContents()I = DescribeContents()
  setAuthKey(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetAuthKey(string)
  setHostAppJWT(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetHostAppJWT(string)
  setHostAppRedirectUri(Ljava/lang/String;)Lcom/liveperson/infra/LPAuthenticationParams; = SetHostAppRedirectUri(string)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/liveperson/infra/LPConversationHistoryMaxDaysDateType = Com.Liveperson.Infra.LPConversationHistoryMaxDaysDateType
  endConversationDate = EndConversationDate
  startConversationDate = StartConversationDate
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = ValueOf(string)
  values()[Lcom/liveperson/infra/LPConversationHistoryMaxDaysDateType; = Values()
com/liveperson/infra/LPConversationsHistoryStateToDisplay = Com.Liveperson.Infra.LPConversationsHistoryStateToDisplay
  ALL = All
  CLOSE = Close
  OPEN = Open
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = ValueOf(string)
  values()[Lcom/liveperson/infra/LPConversationsHistoryStateToDisplay; = Values()
com/liveperson/infra/managers/PreferenceManager = Com.Liveperson.Infra.Managers.PreferenceManager
  APP_LEVEL_PREFERENCES = AppLevelPreferences
  CONFIGURATION_DATA_PUBLISH_DATE_PREFERENCE_KEY = ConfigurationDataPublishDatePreferenceKey
  KILL_SWITCH_PHOTO_SHARING_ENABLED_PREFERENCE_KEY = KillSwitchPhotoSharingEnabledPreferenceKey
  SITE_SETTINGS_PHOTO_SHARING_ENABLED_PREFERENCE_KEY = SiteSettingsPhotoSharingEnabledPreferenceKey
  SITE_SETTINGS_VOICE_SHARING_ENABLED_PREFERENCE_KEY = SiteSettingsVoiceSharingEnabledPreferenceKey
  getInstance()Lcom/liveperson/infra/managers/PreferenceManager; = Instance
  clearAll()Z = ClearAll()
  contains(Ljava/lang/String;Ljava/lang/String;)Z = Contains(string, string)
  getBooleanValue(Ljava/lang/String;Ljava/lang/String;Z)Z = GetBooleanValue(string, string, bool)
  getIntValue(Ljava/lang/String;Ljava/lang/String;I)I = GetIntValue(string, string, int)
  getLongValue(Ljava/lang/String;Ljava/lang/String;Z)Z = GetLongValue(string, string, bool)
  getLongValue(Ljava/lang/String;Ljava/lang/String;J)J = GetLongValue(string, string, long)
  getStringSet(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)Ljava/util/Set; = GetStringSet(string, string, System.Collections.Generic.ICollection<string>)
  getStringValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetStringValue(string, string, string)
  remove(Ljava/lang/String;Ljava/lang/String;)V = Remove(string, string)
  setBooleanValue(Ljava/lang/String;Ljava/lang/String;Z)V = SetBooleanValue(string, string, bool)
  setIntValue(Ljava/lang/String;Ljava/lang/String;I)V = SetIntValue(string, string, int)
  setLongValue(Ljava/lang/String;Ljava/lang/String;J)V = SetLongValue(string, string, long)
  setStringsSet(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V = SetStringsSet(string, string, System.Collections.Generic.ICollection<string>)
  setStringValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetStringValue(string, string, string)
com/liveperson/infra/model/LptagData = Com.Liveperson.Infra.Model.LptagData
  <init>()V = .ctor()
  isAutoMessagesFeatureEnabled()Z = AutoMessagesFeatureEnabled
  setAutoMessagesFeatureEnabled(Z)V = AutoMessagesFeatureEnabled
  getMaxRetries()I = MaxRetries
  setMaxRetries(I)V = MaxRetries
  getRetryTimeout()I = RetryTimeout
  setRetryTimeout(I)V = RetryTimeout
com/liveperson/infra/model/Message = Com.Liveperson.Infra.Model.Message
  <init>(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/EncryptionVersion;)V = .ctor(string, string, long, string, string, Com.Liveperson.Infra.Utils.EncryptionVersion)
  EXTRA_MESSAGE_TEXT = ExtraMessageText
  getContentType()Ljava/lang/String; = ContentType
  setContentType(Ljava/lang/String;)V = ContentType
  getConversationId()Ljava/lang/String; = ConversationId
  setConversationId(Ljava/lang/String;)V = ConversationId
  getEventId()Ljava/lang/String; = EventId
  setEventId(Ljava/lang/String;)V = EventId
  getFullTimeString()Ljava/lang/String; = FullTimeString
  getLocalId()J = LocalId
  getOriginatorId()Ljava/lang/String; = OriginatorId
  getServerSequence()I = ServerSequence
  setServerSequence(I)V = ServerSequence
  getTimeStamp()J = TimeStamp
  getMessage()Ljava/lang/String; = GetMessage()
  setMessageId(J)V = SetMessageId(long)
com/liveperson/infra/model/PushMessage = Com.Liveperson.Infra.Model.PushMessage
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  getBackendService()Ljava/lang/String; = BackendService
  setBackendService(Ljava/lang/String;)V = BackendService
  getBrandId()Ljava/lang/String; = BrandId
  getCollapseKey()Ljava/lang/String; = CollapseKey
  setCollapseKey(Ljava/lang/String;)V = CollapseKey
  getConversationId()Ljava/lang/String; = ConversationId
  setConversationId(Ljava/lang/String;)V = ConversationId
  getCurrentUnreadMessgesCounter()I = CurrentUnreadMessgesCounter
  setCurrentUnreadMessgesCounter(I)V = CurrentUnreadMessgesCounter
  getFrom()Ljava/lang/String; = From
  getMessage()Ljava/lang/String; = Message
com/liveperson/infra/model/SocketConnectionParams = Com.Liveperson.Infra.Model.SocketConnectionParams
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  <init>(Ljava/lang/String;ILjava/util/List;)V = .ctor(string, int, System.Collections.Generic.IList<string>)
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  getHeaders()Ljava/util/HashMap; = Headers
  getTimeout()I = Timeout
  getUrl()Ljava/lang/String; = Url
  addHeader(Ljava/lang/String;Ljava/lang/String;)V = AddHeader(string, string)
com/liveperson/infra/model/types/ChatState = Com.Liveperson.Infra.Model.Types.ChatState
  ACTIVE = Active
  BACKGROUND = Background
  COMPOSING = Composing
  GONE = Gone
  INACTIVE = Inactive
  PAUSE = Pause
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/model/types/ChatState; = ValueOf(string)
  values()[Lcom/liveperson/infra/model/types/ChatState; = Values()
com/liveperson/infra/MonitoringInitParams = Com.Liveperson.Infra.MonitoringInitParams
  <init>(Ljava/lang/String;)V = .ctor(string)
  getAppInstallId()Ljava/lang/String; = AppInstallId
  setAppInstallId(Ljava/lang/String;)V = AppInstallId
com/liveperson/infra/network/BackOff = Com.Liveperson.Infra.Network.IBackOff
  STOP = Stop
  STOP_BACKOFF = StopBackoff
  ZERO = Zero
  ZERO_BACKOFF = ZeroBackoff
  getNextBackOffMillis()J = NextBackOffMillis
  getRetryNumber()I = RetryNumber
  calculateNextBackOffMillis()V = CalculateNextBackOffMillis()
  reset()V = Reset()
com/liveperson/infra/network/ExponentialBackOff = Com.Liveperson.Infra.Network.ExponentialBackOff
  DEFAULT_INITIAL_INTERVAL_MILLIS = DefaultInitialIntervalMillis
  DEFAULT_MAX_ELAPSED_TIME_MILLIS = DefaultMaxElapsedTimeMillis
  DEFAULT_MAX_INTERVAL_MILLIS = DefaultMaxIntervalMillis
  DEFAULT_MULTIPLIER = DefaultMultiplier
  DEFAULT_RANDOMIZATION_FACTOR = DefaultRandomizationFactor
  getNextBackOffMillis()J = NextBackOffMillis
  getRetryNumber()I = RetryNumber
  calculateNextBackOffMillis()V = CalculateNextBackOffMillis()
  reset()V = Reset()
com/liveperson/infra/network/http/body/HttpImageRequestBody = Com.Liveperson.Infra.Network.Http.Body.HttpImageRequestBody
  <init>()V = .ctor()
  isString()Z = IsString
com/liveperson/infra/network/http/body/HttpRequestBody = Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody
  getContentType()Ljava/lang/String; = ContentType
  isString()Z = IsString
  get()Ljava/lang/Object; = Get()
com/liveperson/infra/network/http/HttpHandler = Com.Liveperson.Infra.Network.Http.HttpHandler
  <init>()V = .ctor()
  execute(Lcom/liveperson/infra/network/http/request/HttpRequest;)V = Execute(Com.Liveperson.Infra.Network.Http.Request.HttpRequest)
  executeDelayed(Lcom/liveperson/infra/network/http/request/HttpRequest;J)V = ExecuteDelayed(Com.Liveperson.Infra.Network.Http.Request.HttpRequest, long)
com/liveperson/infra/network/http/request/HttpGetRequest = Com.Liveperson.Infra.Network.Http.Request.HttpGetRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpHeadRequest = Com.Liveperson.Infra.Network.Http.Request.HttpHeadRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpOpenStreamRequest = Com.Liveperson.Infra.Network.Http.Request.HttpOpenStreamRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  reportSuccess(Lokhttp3/Response;)V = ReportSuccess(Square.OkHttp3.Response)
com/liveperson/infra/network/http/request/HttpPostRequest = Com.Liveperson.Infra.Network.Http.Request.HttpPostRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpPutRequest = Com.Liveperson.Infra.Network.Http.Request.HttpPutRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  METHOD = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/request/HttpRequest = Com.Liveperson.Infra.Network.Http.Request.HttpRequest
  <init>(Ljava/lang/String;Lcom/liveperson/infra/network/http/request/HttpRequest$HttpMethod;)V = .ctor(string, Com.Liveperson.Infra.Network.Http.Request.HttpRequest.HttpMethod)
  mCallback = MCallback
  mRequestBody = MRequestBody
  getCallback()Lcom/liveperson/infra/ICallback; = Callback
  setCallback(Lcom/liveperson/infra/ICallback;)V = Callback
  getCertificatePinningKeys()Ljava/util/List; = CertificatePinningKeys
  setCertificatePinningKeys(Ljava/util/List;)V = CertificatePinningKeys
  getFollowRedirect()Z = FollowRedirect
  setFollowRedirect(Z)V = FollowRedirect
  getHeaders()Ljava/util/List; = Headers
  getMethod()Lcom/liveperson/infra/network/http/request/HttpRequest$HttpMethod; = Method
  getRequestBody()Lcom/liveperson/infra/network/http/body/HttpRequestBody; = RequestBody
  getTimeout()I = Timeout
  setTimeout(I)V = Timeout
  getUrl()Ljava/lang/String; = Url
  addHeader(Ljava/lang/String;Ljava/lang/String;)V = AddHeader(string, string)
  isResponseSuccessful(Lokhttp3/Response;)Z = IsResponseSuccessful(Square.OkHttp3.Response)
  processErrorResponse(Ljava/lang/Exception;)V = ProcessErrorResponse(Java.Lang.Exception)
  processResponse(Lokhttp3/Response;)V = ProcessResponse(Square.OkHttp3.Response)
  reportSuccess(Lokhttp3/Response;)V = ReportSuccess(Square.OkHttp3.Response)
  setBody(Lcom/liveperson/infra/network/http/body/HttpRequestBody;)V = SetBody(Com.Liveperson.Infra.Network.Http.Body.IHttpRequestBody)
com/liveperson/infra/network/http/requests/BadgeCounterRequest = Com.Liveperson.Infra.Network.Http.Requests.BadgeCounterRequest
  <init>(Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/infra/network/http/requests/ConfigurationRequest = Com.Liveperson.Infra.Network.Http.Requests.ConfigurationRequest
  <init>(Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/infra/network/http/requests/CSDSRequest = Com.Liveperson.Infra.Network.Http.Requests.CSDSRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  execute()V = Execute()
com/liveperson/infra/network/http/requests/LptagRequest = Com.Liveperson.Infra.Network.Http.Requests.LptagRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  JSON_KEY_FEATURES = JsonKeyFeatures
  JSON_KEY_MAX_RETRIES = JsonKeyMaxRetries
  JSON_KEY_MESSAGING_AUTO_MESSAGES = JsonKeyMessagingAutoMessages
  JSON_KEY_RETRY = JsonKeyRetry
  JSON_KEY_RETRY_TIMEOUT = JsonKeyRetryTimeout
  execute()V = Execute()
com/liveperson/infra/network/http/requests/PushRequest = Com.Liveperson.Infra.Network.Http.Requests.PushRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, string, string, System.Collections.Generic.IList<string>)
  KEY_APP_ID = KeyAppId
  KEY_DEVICE_ID = KeyDeviceId
  KEY_PLATFORM = KeyPlatform
  KEY_REGISTRATION_ID = KeyRegistrationId
  KEY_TOKEN_ID = KeyTokenId
  KEY_USER_ID = KeyUserId
  mAppId = MAppId
  mCallback = MCallback
  mCertificates = MCertificates
  mDeviceId = MDeviceId
  mGcmRegistrationId = MGcmRegistrationId
  mPlatform = MPlatform
  mPusherURL = MPusherURL
  mTokenId = MTokenId
  mUserId = MUserId
  TAG = Tag
  getBody()Lorg/json/JSONObject; = Body
  execute()V = Execute()
  handleError(Ljava/lang/Exception;)V = HandleError(Java.Lang.Exception)
  handleResponse(Ljava/lang/String;)V = HandleResponse(string)
  setAppId(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetAppId(string)
  setCallback(Lcom/liveperson/infra/ICallback;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetCallback(Com.Liveperson.Infra.ICallback)
  setDeviceId(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetDeviceId(string)
  setPlatform(Ljava/lang/String;)Lcom/liveperson/infra/network/http/requests/PushRequest; = SetPlatform(string)
com/liveperson/infra/network/http/requests/SiteSettingsRequest = Com.Liveperson.Infra.Network.Http.Requests.SiteSettingsRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lcom/liveperson/infra/ICallback;)V = .ctor(string, string, System.Collections.Generic.IList<string>, Com.Liveperson.Infra.ICallback)
  TAG = Tag
  execute()V = Execute()
com/liveperson/infra/network/http/requests/UnregisterPushRequest = Com.Liveperson.Infra.Network.Http.Requests.UnregisterPushRequest
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, string, System.Collections.Generic.IList<string>)
  TAG = Tag
com/liveperson/infra/network/socket/BaseResponseHandler = Com.Liveperson.Infra.Network.Socket.BaseResponseHandler
  <init>()V = .ctor()
  getAPIResponseType()Ljava/lang/String; = APIResponseType
  getRequest()Lcom/liveperson/infra/network/socket/BaseSocketRequest; = Request
  getResponseByExpectedType(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetResponseByExpectedType(string)
  getSupportedResponseHandler(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetSupportedResponseHandler(string)
  giveUp()V = GiveUp()
  handle(Ljava/lang/Object;)Z = Handle(Java.Lang.Object)
  onParsingError()V = OnParsingError()
  parse(Lorg/json/JSONObject;)Ljava/lang/Object; = Parse(Org.Json.JSONObject)
com/liveperson/infra/network/socket/BaseSocketRequest = Com.Liveperson.Infra.Network.Socket.BaseSocketRequest
  <init>()V = .ctor()
  <init>(J)V = .ctor(long)
  getData()Ljava/lang/String; = Data
  getResponseHandler()Lcom/liveperson/infra/network/socket/BaseResponseHandler; = RawResponseHandler
  getRequestId()J = RequestId
  getRequestName()Ljava/lang/String; = RequestName
  getSocketUrl()Ljava/lang/String; = SocketUrl
  addCallback(Lcom/liveperson/infra/network/socket/ResponseCallback;)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = AddCallback(Com.Liveperson.Infra.Network.Socket.IResponseCallback)
  createRequestId()J = CreateRequestId()
  removeCallback(Lcom/liveperson/infra/network/socket/ResponseCallback;)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = RemoveCallback(Com.Liveperson.Infra.Network.Socket.IResponseCallback)
  setRequestId(J)Lcom/liveperson/infra/network/socket/BaseSocketRequest; = SetRequestId(long)
com/liveperson/infra/network/socket/GeneralResponseHandler = Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler
  <init>()V = .ctor()
  createInstance(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = CreateInstance(string)
com/liveperson/infra/network/socket/IdleQueueHandler = Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler
  queueIdle()V = QueueIdle()
com/liveperson/infra/network/socket/ISocketCallbacks = Com.Liveperson.Infra.Network.Socket.ISocketCallbacks
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onMessage(Ljava/lang/String;)V = OnMessage(string)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/network/socket/ISocketWrapper = Com.Liveperson.Infra.Network.Socket.ISocketWrapper
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  disconnect()V = Disconnect()
  send(Ljava/lang/String;)V = Send(string)
com/liveperson/infra/network/socket/ResponseCallback = Com.Liveperson.Infra.Network.Socket.IResponseCallback
  onError()V = OnError()
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
com/liveperson/infra/network/socket/ResponseMap = Com.Liveperson.Infra.Network.Socket.ResponseMap
  <init>()V = .ctor()
  RESPONSE_TAG = ResponseTag
  getRequestIdHandler(Ljava/lang/String;J)Lcom/liveperson/infra/network/socket/BaseResponseHandler; = GetRequestIdHandler(string, long)
  onRequestHandled(J)V = OnRequestHandled(long)
  onSocketClosed()V = OnSocketClosed()
  putGeneralHandler(Lcom/liveperson/infra/network/socket/GeneralResponseHandler;)V = PutGeneralHandler(Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler)
  putGeneralHandler(Ljava/lang/String;Ljava/lang/Class;)V = PutGeneralHandler(string, Java.Lang.Class)
  putRequestIdHandler(JLcom/liveperson/infra/network/socket/BaseResponseHandler;)V = PutRequestIdHandler(long, Com.Liveperson.Infra.Network.Socket.BaseResponseHandler)
  shutDown()V = ShutDown()
com/liveperson/infra/network/socket/SocketErrorCallback = Com.Liveperson.Infra.Network.Socket.ISocketErrorCallback
  onFatalError()V = OnFatalError()
  onParsingError()V = OnParsingError()
com/liveperson/infra/network/socket/SocketHandler = Com.Liveperson.Infra.Network.Socket.SocketHandler
  <init>(Lcom/liveperson/infra/network/socket/ResponseMap;)V = .ctor(Com.Liveperson.Infra.Network.Socket.ResponseMap)
  CERTIFICATE_ERROR = CertificateError
  PERIODIC_PING_TIME = PeriodicPingTime
  dispose()V = Dispose()
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onMessage(Ljava/lang/String;)V = OnMessage(string)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
  send(Ljava/lang/String;)V = Send(string)
  sendDelayed(Ljava/lang/String;J)Ljava/lang/Runnable; = SendDelayed(string, long)
com/liveperson/infra/network/socket/SocketManager = Com.Liveperson.Infra.Network.Socket.SocketManager
  getInstance()Lcom/liveperson/infra/network/socket/SocketManager; = Instance
  cancelDelayedRequest(Lcom/liveperson/infra/network/socket/BaseSocketRequest;Ljava/lang/Runnable;)V = CancelDelayedRequest(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest, Java.Lang.IRunnable)
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  connect(Ljava/lang/String;I)V = Connect(string, int)
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  getSocketState(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/SocketState; = GetSocketState(string)
  killSocket(Ljava/lang/String;)V = KillSocket(string)
  putGeneralHandlerMap(Lcom/liveperson/infra/network/socket/GeneralResponseHandler;)V = PutGeneralHandlerMap(Com.Liveperson.Infra.Network.Socket.GeneralResponseHandler)
  registerToSocketState(Ljava/lang/String;Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = RegisterToSocketState(string, Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
  send(Lcom/liveperson/infra/network/socket/BaseSocketRequest;)V = Send(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest)
  send(Lcom/liveperson/infra/network/socket/BaseSocketRequest;J)Ljava/lang/Runnable; = Send(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest, long)
  shutDown()V = ShutDown()
  unregisterFromSocketState(Ljava/lang/String;Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = UnregisterFromSocketState(string, Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
com/liveperson/infra/network/socket/SocketState = Com.Liveperson.Infra.Network.Socket.SocketState
  CLOSED = Closed
  CLOSING = Closing
  CONNECTING = Connecting
  ERROR = Error
  INIT = Init
  OPEN = Open
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/network/socket/SocketState; = ValueOf(string)
  values()[Lcom/liveperson/infra/network/socket/SocketState; = Values()
com/liveperson/infra/network/socket/SocketStateManager = Com.Liveperson.Infra.Network.Socket.SocketStateManager
  <init>()V = .ctor()
  getState()Lcom/liveperson/infra/network/socket/SocketState; = State
  dispose()V = Dispose()
  register(Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = Register(Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
  unregister(Lcom/liveperson/infra/network/socket/state/SocketStateListener;)V = Unregister(Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener)
com/liveperson/infra/network/socket/SocketToRestCommand = Com.Liveperson.Infra.Network.Socket.SocketToRestCommand
  <init>()V = .ctor()
  getData(Lcom/liveperson/infra/network/socket/BaseSocketRequest;)Ljava/lang/String; = GetData(Com.Liveperson.Infra.Network.Socket.BaseSocketRequest)
com/liveperson/infra/network/socket/SocketWrapperOK = Com.Liveperson.Infra.Network.Socket.SocketWrapperOK
  <init>(Lcom/liveperson/infra/network/socket/ISocketCallbacks;)V = .ctor(Com.Liveperson.Infra.Network.Socket.ISocketCallbacks)
  connect(Lcom/liveperson/infra/model/SocketConnectionParams;)V = Connect(Com.Liveperson.Infra.Model.SocketConnectionParams)
  disconnect()V = Disconnect()
  send(Ljava/lang/String;)V = Send(string)
com/liveperson/infra/network/socket/state/SocketStateAdapter = Com.Liveperson.Infra.Network.Socket.State.SocketStateAdapter
  <init>()V = .ctor()
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/network/socket/state/SocketStateListener = Com.Liveperson.Infra.Network.Socket.State.ISocketStateListener
  onDisconnected(Ljava/lang/String;I)V = OnDisconnected(string, int)
  onStateChanged(Lcom/liveperson/infra/network/socket/SocketState;)V = OnStateChanged(Com.Liveperson.Infra.Network.Socket.SocketState)
com/liveperson/infra/sdkstatemachine/BaseInfraState = Com.Liveperson.Infra.Sdkstatemachine.BaseInfraState
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  name = Name
  TAG = Tag
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  visit(Lcom/liveperson/infra/sdkstatemachine/events/InitEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/LogoutEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.LogoutEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/PreLogoutCompletedEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.PreLogoutCompletedEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/ShutDownCompletedEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownCompletedEvent)
  visit(Lcom/liveperson/infra/sdkstatemachine/events/ShutDownEvent;)V = Visit(Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownEvent)
com/liveperson/infra/sdkstatemachine/events/InitEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent
  <init>(Lcom/liveperson/infra/statemachine/InitProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.InitProcess)
  getInitProcess()Lcom/liveperson/infra/statemachine/InitProcess; = InitProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/LogoutEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.LogoutEvent
  <init>(Lcom/liveperson/infra/statemachine/LogoutProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.LogoutProcess)
  getInitEvent()Lcom/liveperson/infra/sdkstatemachine/events/InitEvent; = InitEvent
  getLogoutProcess()Lcom/liveperson/infra/statemachine/LogoutProcess; = LogoutProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  setInitAfterLogout(Lcom/liveperson/infra/sdkstatemachine/events/InitEvent;)V = SetInitAfterLogout(Com.Liveperson.Infra.Sdkstatemachine.Events.InitEvent)
  setSkipInit(Z)V = SetSkipInit(bool)
  skipInit()Z = SkipInit()
com/liveperson/infra/sdkstatemachine/events/PreLogoutCompletedEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.PreLogoutCompletedEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/ShutDownCompletedEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownCompletedEvent
  <init>()V = .ctor()
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/events/ShutDownEvent = Com.Liveperson.Infra.Sdkstatemachine.Events.ShutDownEvent
  <init>(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = .ctor(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
  getInitProcess()Lcom/liveperson/infra/statemachine/ShutDownProcess; = InitProcess
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/sdkstatemachine/InfraStateMachine = Com.Liveperson.Infra.Sdkstatemachine.InfraStateMachine
  <init>()V = .ctor()
  isSDKInitialized()Z = IsSDKInitialized
  initSDK(Lcom/liveperson/infra/statemachine/InitProcess;)V = InitSDK(Com.Liveperson.Infra.Statemachine.InitProcess)
  logoutSDK(Lcom/liveperson/infra/statemachine/LogoutProcess;)V = LogoutSDK(Com.Liveperson.Infra.Statemachine.LogoutProcess)
  shutDownSDK(Lcom/liveperson/infra/statemachine/ShutDownProcess;)V = ShutDownSDK(Com.Liveperson.Infra.Statemachine.ShutDownProcess)
com/liveperson/infra/sdkstatemachine/init/InfraInitData = Com.Liveperson.Infra.Sdkstatemachine.Init.InfraInitData
  <init>(Ljava/lang/String;)V = .ctor(string)
  getSdkVersion()Ljava/lang/String; = SdkVersion
com/liveperson/infra/sdkstatemachine/init/InitData = Com.Liveperson.Infra.Sdkstatemachine.Init.InitData
  <init>(Lcom/liveperson/infra/InitLivePersonProperties;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.InitLivePersonProperties, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/callbacks/InitLivePersonCallBack;)V = .ctor(string, string, string, Com.Liveperson.Infra.Callbacks.IInitLivePersonCallBack)
  getSdkVersion()Ljava/lang/String; = SdkVersion
com/liveperson/infra/sdkstatemachine/logout/LogoutCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Logout.ILogoutCompletionListener
  logoutCompleted()V = LogoutCompleted()
com/liveperson/infra/sdkstatemachine/logout/PreLogoutCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Logout.IPreLogoutCompletionListener
  preLogoutCompleted()V = PreLogoutCompleted()
  preLogoutFailed(Ljava/lang/Exception;)V = PreLogoutFailed(Java.Lang.Exception)
com/liveperson/infra/sdkstatemachine/shutdown/ShutDown = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDown
  shutDown()V = ShutDown()
com/liveperson/infra/sdkstatemachine/shutdown/ShutDownAsync = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownAsync
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener = Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener
  shutDownCompleted()V = ShutDownCompleted()
  shutDownFailed()V = ShutDownFailed()
com/liveperson/infra/statemachine/BaseEvent = Com.Liveperson.Infra.Statemachine.BaseEvent
  <init>(Ljava/lang/String;)V = .ctor(string)
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/statemachine/BaseState = Com.Liveperson.Infra.Statemachine.BaseState
  <init>(Lcom/liveperson/infra/statemachine/BaseState;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Com.Liveperson.Infra.Statemachine.BaseState, string, string)
  name = Name
  parent = Parent
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
  handleDefaultEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = HandleDefaultEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
com/liveperson/infra/statemachine/BaseStateMachine = Com.Liveperson.Infra.Statemachine.BaseStateMachine
  <init>(Ljava/lang/String;)V = .ctor(string)
  activeState = ActiveState
  isInitialized()Z = IsInitialized
  getTag()Ljava/lang/String; = Tag
  activeState()Lcom/liveperson/infra/statemachine/interfaces/IState; = ActiveState()
  apply(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Apply(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  cancelDelayedEvent(Ljava/lang/Runnable;)V = CancelDelayedEvent(Java.Lang.IRunnable)
  changeState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = ChangeState(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  changeStateAndPassEvent(Lcom/liveperson/infra/statemachine/interfaces/IState;Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = ChangeStateAndPassEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IState, Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  initActiveState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = InitActiveState(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
  postDelayEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = PostDelayEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  postEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = PostEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  setStateMachineExecutor(Lcom/liveperson/infra/statemachine/interfaces/IStateMachineExecutor;)V = SetStateMachineExecutor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor)
  shutDown()V = ShutDown()
com/liveperson/infra/statemachine/InitProcess = Com.Liveperson.Infra.Statemachine.InitProcess
  <init>()V = .ctor()
  getInitCallback()Lcom/liveperson/infra/callbacks/InitLivePersonCallBack; = InitCallback
  init()V = Init()
com/liveperson/infra/statemachine/interfaces/IEvent = Com.Liveperson.Infra.Statemachine.Interfaces.IEvent
  accept(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = Accept(Com.Liveperson.Infra.Statemachine.Interfaces.IState)
com/liveperson/infra/statemachine/interfaces/IEventScheduler = Com.Liveperson.Infra.Statemachine.Interfaces.IEventScheduler
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Lcom/liveperson/infra/statemachine/interfaces/IEventScheduler$Cancelable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/statemachine/interfaces/IState = Com.Liveperson.Infra.Statemachine.Interfaces.IState
  actionOnEntry()V = ActionOnEntry()
  actionOnExit()V = ActionOnExit()
com/liveperson/infra/statemachine/interfaces/IStateMachine = Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine
  getTag()Ljava/lang/String; = Tag
  activeState()Lcom/liveperson/infra/statemachine/interfaces/IState; = ActiveState()
  apply(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Apply(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  changeState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = ChangeState(Java.Lang.Object)
  initActiveState(Lcom/liveperson/infra/statemachine/interfaces/IState;)V = InitActiveState(Java.Lang.Object)
  postDelayEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = PostDelayEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  postEvent(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = PostEvent(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  setStateMachineExecutor(Lcom/liveperson/infra/statemachine/interfaces/IStateMachineExecutor;)V = SetStateMachineExecutor(Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor)
com/liveperson/infra/statemachine/interfaces/IStateMachineExecutor = Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachineExecutor
  isInitialized()Z = IsInitialized
  cancel(Ljava/lang/Runnable;)V = Cancel(Java.Lang.IRunnable)
  post(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Post(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/statemachine/LogoutProcess = Com.Liveperson.Infra.Statemachine.LogoutProcess
  <init>()V = .ctor()
  getLogoutCallback()Lcom/liveperson/infra/callbacks/LogoutLivePersonCallBack; = LogoutCallback
  initForLogout()V = InitForLogout()
  logout()V = Logout()
  preLogout(Lcom/liveperson/infra/sdkstatemachine/logout/PreLogoutCompletionListener;)V = PreLogout(Com.Liveperson.Infra.Sdkstatemachine.Logout.IPreLogoutCompletionListener)
  shutDownForLogout(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDownForLogout(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/statemachine/ShutDownProcess = Com.Liveperson.Infra.Statemachine.ShutDownProcess
  <init>()V = .ctor()
  getShutDownCallback()Lcom/liveperson/infra/callbacks/ShutDownLivePersonCallBack; = ShutDownCallback
  shutDown(Lcom/liveperson/infra/sdkstatemachine/shutdown/ShutDownCompletionListener;)V = ShutDown(Com.Liveperson.Infra.Sdkstatemachine.Shutdown.IShutDownCompletionListener)
com/liveperson/infra/statemachine/StateMachineExecutor = Com.Liveperson.Infra.Statemachine.StateMachineExecutor
  <init>(Ljava/lang/String;Lcom/liveperson/infra/statemachine/interfaces/IStateMachine;)V = .ctor(string, Com.Liveperson.Infra.Statemachine.Interfaces.IStateMachine)
  isInitialized()Z = IsInitialized
  cancel(Ljava/lang/Runnable;)V = Cancel(Java.Lang.IRunnable)
  post(Lcom/liveperson/infra/statemachine/interfaces/IEvent;)V = Post(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent)
  schedule(Lcom/liveperson/infra/statemachine/interfaces/IEvent;J)Ljava/lang/Runnable; = Schedule(Com.Liveperson.Infra.Statemachine.Interfaces.IEvent, long)
  shutdown()V = Shutdown()
com/liveperson/infra/utils/AccessibilityChecker = Com.Liveperson.Infra.Utils.AccessibilityChecker
  <init>()V = .ctor()
  exploreByTouchEnabled(Landroid/content/Context;)Z = ExploreByTouchEnabled(Android.Content.Context)
com/liveperson/infra/utils/BitmapLruCache = Com.Liveperson.Infra.Utils.BitmapLruCache
  <init>(I)V = .ctor(int)
  TAG = Tag
  addBitmapToCache(Ljava/lang/String;Landroid/graphics/Bitmap;)V = AddBitmapToCache(string, Android.Graphics.Bitmap)
  getBitmapFromCache(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetBitmapFromCache(string)
com/liveperson/infra/utils/DateUtils = Com.Liveperson.Infra.Utils.DateUtils
  <init>()V = .ctor()
  getEndOfToday()J = EndOfToday
  getBeginningOfDayTime(J)J = GetBeginningOfDayTime(long)
  getDateFormat(Ljava/lang/String;II)Ljava/text/DateFormat; = GetDateFormat(string, int, int)
  getDayOfTheWeek(J)Ljava/lang/String; = GetDayOfTheWeek(long)
  getDurationString(J)Ljava/lang/String; = GetDurationString(long)
  getFormattedDate(Ljava/lang/String;IJ)Ljava/lang/String; = GetFormattedDate(string, int, long)
  getFormattedDateAndTime(Ljava/lang/String;IIJ)Ljava/lang/String; = GetFormattedDateAndTime(string, int, int, long)
  getFormattedDateAndTime(Ljava/lang/String;IIJLjava/lang/String;)Ljava/lang/String; = GetFormattedDateAndTime(string, int, int, long, string)
  getFormattedTime(Ljava/lang/String;IJ)Ljava/lang/String; = GetFormattedTime(string, int, long)
  getFormattedTime(Ljava/lang/String;IJLjava/lang/String;)Ljava/lang/String; = GetFormattedTime(string, int, long, string)
  isInTheLast24hours(J)Z = IsInTheLast24hours(long)
  isToday(J)Z = IsToday(long)
  isTomorrow(J)Z = IsTomorrow(long)
  isYesterday(J)Z = IsYesterday(long)
com/liveperson/infra/utils/DetectHeadsetUnpluggedBroadcastReceiver = Com.Liveperson.Infra.Utils.DetectHeadsetUnpluggedBroadcastReceiver
  <init>()V = .ctor()
  TAG = Tag
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
  onUnpluggedHeadset()V = OnUnpluggedHeadset()
com/liveperson/infra/utils/DispatchQueue = Com.Liveperson.Infra.Utils.DispatchQueue
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  <init>(Ljava/lang/String;ILcom/liveperson/infra/network/socket/IdleQueueHandler;)V = .ctor(string, int, Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler)
  <init>(Ljava/lang/String;Lcom/liveperson/infra/network/socket/IdleQueueHandler;)V = .ctor(string, Com.Liveperson.Infra.Network.Socket.IIdleQueueHandler)
  isCurrentThread()Z = IsCurrentThread
  cleanupQueue()V = CleanupQueue()
  dispose()V = Dispose()
  postRunnable(Ljava/lang/Runnable;)V = PostRunnable(Java.Lang.IRunnable)
  postRunnable(Ljava/lang/Runnable;J)V = PostRunnable(Java.Lang.IRunnable, long)
  queueIdle()Z = QueueIdle()
  removeMessage(I)Z = RemoveMessage(int)
  removeRunnable(Ljava/lang/Runnable;)V = RemoveRunnable(Java.Lang.IRunnable)
  sendMessage(Landroid/os/Message;)V = SendMessage(Android.OS.Message)
  sendMessage(Landroid/os/Message;I)V = SendMessage(Android.OS.Message, int)
  setHandleMessageCallback(Lcom/liveperson/infra/utils/HandleMessageCallback;)V = SetHandleMessageCallback(Com.Liveperson.Infra.Utils.IHandleMessageCallback)
  unregisterQueueIdleCallbacks()V = UnregisterQueueIdleCallbacks()
com/liveperson/infra/utils/EncryptionVersion = Com.Liveperson.Infra.Utils.EncryptionVersion
  NONE = None
  VERSION_1 = Version1
  fromInt(I)Lcom/liveperson/infra/utils/EncryptionVersion; = FromInt(int)
  valueOf(Ljava/lang/String;)Lcom/liveperson/infra/utils/EncryptionVersion; = ValueOf(string)
  values()[Lcom/liveperson/infra/utils/EncryptionVersion; = Values()
com/liveperson/infra/utils/FeaturesWrapperUtil = Com.Liveperson.Infra.Utils.FeaturesWrapperUtil
  <init>()V = .ctor()
  getAllFeatures()Ljava/util/HashMap; = AllFeatures
  getInstance()Lcom/liveperson/infra/utils/FeaturesWrapperUtil; = Instance
  getFeature(Ljava/lang/String;)Z = GetFeature(string)
  putFeature(Ljava/lang/String;Z)V = PutFeature(string, bool)
com/liveperson/infra/utils/HandleMessageCallback = Com.Liveperson.Infra.Utils.IHandleMessageCallback
  onHandleMessage(Landroid/os/Message;)V = OnHandleMessage(Android.OS.Message)
com/liveperson/infra/utils/ImageUtils = Com.Liveperson.Infra.Utils.ImageUtils
  <init>()V = .ctor()
  FULL_IMAGE_FOLDER = FullImageFolder
  IMAGES_FOLDER = ImagesFolder
  JPG = Jpg
  PNG = Png
  PREVIEW_IMAGE_FOLDER = PreviewImageFolder
  SAMSUNG = Samsung
  TAG = Tag
  base64ToBitmap(Ljava/lang/String;)Landroid/graphics/Bitmap; = Base64ToBitmap(string)
  base64ToByteArray(Ljava/lang/String;)[B = Base64ToByteArray(string)
  bitmapToBase64(Landroid/graphics/Bitmap;)Ljava/lang/String; = BitmapToBase64(Android.Graphics.Bitmap)
  bitmapToBase64([B)Ljava/lang/String; = BitmapToBase64(byte[])
  blur(Landroid/content/Context;Landroid/graphics/Bitmap;I)Landroid/graphics/Bitmap; = Blur(Android.Content.Context, Android.Graphics.Bitmap, int)
  createBitmap(Landroid/net/Uri;)Landroid/graphics/Bitmap; = CreateBitmap(Android.Net.Uri)
  createBitmapFromURL(Landroid/content/Context;Ljava/lang/String;II)Landroid/graphics/Bitmap; = CreateBitmapFromURL(Android.Content.Context, string, int, int)
  createImageFileForCamera(Landroid/content/Context;Ljava/lang/String;)Landroid/net/Uri; = CreateImageFileForCamera(Android.Content.Context, string)
  createImageOnCanvas(Landroid/content/Context;Landroid/view/WindowManager;Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Drawable; = CreateImageOnCanvas(Android.Content.Context, Android.Views.IWindowManager, Android.Graphics.Bitmap)
  createResizedBitmap(Landroid/net/Uri;IIZ)Landroid/graphics/Bitmap; = CreateResizedBitmap(Android.Net.Uri, int, int, bool)
  createResizedExactBitmap(Landroid/net/Uri;II)Landroid/graphics/Bitmap; = CreateResizedExactBitmap(Android.Net.Uri, int, int)
  decodeExifOrientation(IZ)I = DecodeExifOrientation(int, bool)
  deleteImageFolder()V = DeleteImageFolder()
  getBitmap(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetBitmap(string)
  getFilePath(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/io/File; = GetFilePath(Android.Content.Context, string, string)
  getImagePath(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)Ljava/lang/String; = GetImagePath(Android.Content.Context, Android.Net.Uri, string)
  getImageRotation(Ljava/lang/String;Z)I = GetImageRotation(string, bool)
  getOutputStreamFromBitmap(Landroid/graphics/Bitmap;ILjava/lang/String;)[B = GetOutputStreamFromBitmap(Android.Graphics.Bitmap, int, string)
  saveBase64ToDisk(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = SaveBase64ToDisk(Android.Content.Context, string, string)
  saveBitmapToDisk(Landroid/content/Context;[BLjava/lang/String;Lcom/liveperson/infra/utils/ImageUtils$ImageFolderType;Ljava/lang/String;)Ljava/lang/String; = SaveBitmapToDisk(Android.Content.Context, byte[], string, Com.Liveperson.Infra.Utils.ImageUtils.ImageFolderType, string)
  saveBitmapToDisk(Landroid/content/Context;[BLjava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/ImageUtils$ImageFolderType;)Ljava/lang/String; = SaveBitmapToDisk(Android.Content.Context, byte[], string, string, Com.Liveperson.Infra.Utils.ImageUtils.ImageFolderType)
  saveBitmapToDisk([BLjava/io/File;)Ljava/lang/String; = SaveBitmapToDisk(byte[], Java.IO.File)
com/liveperson/infra/utils/LanguageUtils = Com.Liveperson.Infra.Utils.LanguageUtils
  <init>()V = .ctor()
  TAG = Tag
  getLanguageCode(Ljava/lang/String;)Ljava/lang/String; = GetLanguageCode(string)
  getLocale(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetLocale(string, string)
com/liveperson/infra/utils/LinkPreviewCallback = Com.Liveperson.Infra.Utils.ILinkPreviewCallback
  clean()V = Clean()
  onPos(Lcom/liveperson/infra/utils/SourceContent;Z)V = OnPos(Com.Liveperson.Infra.Utils.SourceContent, bool)
  onPre()V = OnPre()
com/liveperson/infra/utils/LinkPreviewLruCache = Com.Liveperson.Infra.Utils.LinkPreviewLruCache
  DEFAULT_NUM_OF_OBJECTS = DefaultNumOfObjects
  TAG = Tag
  getInstance()Lcom/liveperson/infra/utils/LinkPreviewLruCache; = Instance
  addSourceContentToCache(Ljava/lang/String;Lcom/liveperson/infra/utils/SourceContent;)V = AddSourceContentToCache(string, Com.Liveperson.Infra.Utils.SourceContent)
  getSourceContentFromCache(Ljava/lang/String;)Lcom/liveperson/infra/utils/SourceContent; = GetSourceContentFromCache(string)
com/liveperson/infra/utils/LocalBroadcast = Com.Liveperson.Infra.Utils.LocalBroadcast
  <init>()V = .ctor()
  sendBroadcast(Ljava/lang/String;)V = SendBroadcast(string)
  sendBroadcast(Ljava/lang/String;Landroid/os/Bundle;)V = SendBroadcast(string, Android.OS.Bundle)
com/liveperson/infra/utils/LPAudioUtils = Com.Liveperson.Infra.Utils.LPAudioUtils
  <init>()V = .ctor()
  TAG = Tag
  VOICE_FOLDER = VoiceFolder
  getCurrentPlayingDuration()I = CurrentPlayingDuration
  getCurrentPlayingLocation()I = CurrentPlayingLocation
  isRecording()Z = IsRecording
  getPlayingAudioManager()Lcom/liveperson/infra/controller/PlayingAudioManager; = PlayingAudioManager
  getVoiceFolder()Ljava/lang/String; = VoiceFolder
  bindPlayingAudio(Ljava/lang/String;Lcom/liveperson/infra/utils/LPAudioUtils$PlaybackCallback;)V = BindPlayingAudio(string, Com.Liveperson.Infra.Utils.LPAudioUtils.IPlaybackCallback)
  cancelAndDeleteRecording(Lcom/liveperson/infra/ICallback;)V = CancelAndDeleteRecording(Com.Liveperson.Infra.ICallback)
  deleteVoiceFolder()V = DeleteVoiceFolder()
  generateVoiceFileName()Ljava/lang/String; = GenerateVoiceFileName()
  getDuration(Ljava/lang/String;Lcom/liveperson/infra/ICallback;)V = GetDuration(string, Com.Liveperson.Infra.ICallback)
  isPlaying(Ljava/lang/String;)Z = IsPlaying(string)
  pause()V = Pause()
  playAudio(Ljava/lang/String;Ljava/lang/String;Lcom/liveperson/infra/utils/LPAudioUtils$PlaybackCallback;)V = PlayAudio(string, string, Com.Liveperson.Infra.Utils.LPAudioUtils.IPlaybackCallback)
  playSound(I)V = PlaySound(int)
  saveByteArrayToDisk([B)Ljava/lang/String; = SaveByteArrayToDisk(byte[])
  startRecording(Ljava/lang/String;ILcom/liveperson/infra/utils/LPAudioUtils$MaxRecordingDurationReachedListener;)Lcom/liveperson/infra/utils/LPAudioUtils$LPRecorderStatus; = StartRecording(string, int, Com.Liveperson.Infra.Utils.LPAudioUtils.IMaxRecordingDurationReachedListener)
  stopPlayback()V = StopPlayback()
  stopRecording(Lcom/liveperson/infra/ICallback;)V = StopRecording(Com.Liveperson.Infra.ICallback)
com/liveperson/infra/utils/MaskedMessage = Com.Liveperson.Infra.Utils.MaskedMessage
  <init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V = .ctor(string, string, bool, string)
  getDbMessage()Ljava/lang/String; = DbMessage
  setDbMessage(Ljava/lang/String;)V = DbMessage
  isMasked()Z = IsMasked
  getMaskedSystemMessage()Ljava/lang/String; = MaskedSystemMessage
  getServerMessage()Ljava/lang/String; = ServerMessage
  setServerMessage(Ljava/lang/String;)V = ServerMessage
com/liveperson/infra/utils/MessageValidator = Com.Liveperson.Infra.Utils.MessageValidator
  <init>(Landroid/content/Context;Z)V = .ctor(Android.Content.Context, bool)
  maskMessage(Ljava/lang/String;)Lcom/liveperson/infra/utils/MaskedMessage; = MaskMessage(string)
com/liveperson/infra/utils/RegexUtil = Com.Liveperson.Infra.Utils.RegexUtil
  <init>()V = .ctor()
  ICON_REV_TAG_PATTERN = IconRevTagPattern
  ICON_TAG_PATTERN = IconTagPattern
  IMAGE_PATTERN = ImagePattern
  IMAGE_TAG_PATTERN = ImageTagPattern
  ITEMPROP_IMAGE_REV_TAG_PATTERN = ItempropImageRevTagPattern
  ITEMPROP_IMAGE_TAG_PATTERN = ItempropImageTagPattern
  METATAG_CONTENT_PATTERN = MetatagContentPattern
  METATAG_PATTERN = MetatagPattern
  SCRIPT_PATTERN = ScriptPattern
  TITLE_PATTERN = TitlePattern
  URL_PATTERN = UrlPattern
  pregMatch(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; = PregMatch(string, string, int)
  pregMatchAll(Ljava/lang/String;Ljava/lang/String;I)Ljava/util/List; = PregMatchAll(string, string, int)
  pregMatchAllExtraImages(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; = PregMatchAllExtraImages(string, string)
  pregMatchAllImages(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; = PregMatchAllImages(string, string)
com/liveperson/infra/utils/SDKUncaughtExceptionHandler = Com.Liveperson.Infra.Utils.SDKUncaughtExceptionHandler
  <init>()V = .ctor()
  getInstance()Lcom/liveperson/infra/utils/SDKUncaughtExceptionHandler; = Instance
  getInstance(Ljava/lang/Thread$UncaughtExceptionHandler;)Lcom/liveperson/infra/utils/SDKUncaughtExceptionHandler; = GetInstance(Java.Lang.Thread.IUncaughtExceptionHandler)
  uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V = UncaughtException(Java.Lang.Thread, Java.Lang.Throwable)
com/liveperson/infra/utils/SourceContent = Com.Liveperson.Infra.Utils.SourceContent
  <init>()V = .ctor()
  getCannonicalUrl()Ljava/lang/String; = CannonicalUrl
  setCannonicalUrl(Ljava/lang/String;)V = CannonicalUrl
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getFinalUrl()Ljava/lang/String; = FinalUrl
  setFinalUrl(Ljava/lang/String;)V = FinalUrl
  getHtmlCode()Ljava/lang/String; = HtmlCode
  setHtmlCode(Ljava/lang/String;)V = HtmlCode
  getImages()Ljava/lang/String; = Images
  setImages(Ljava/lang/String;)V = Images
  getMetaTags()Ljava/util/HashMap; = MetaTags
  setMetaTags(Ljava/util/HashMap;)V = MetaTags
  getRaw()Ljava/lang/String; = Raw
  setRaw(Ljava/lang/String;)V = Raw
  getSiteName()Ljava/lang/String; = SiteName
  setSiteName(Ljava/lang/String;)V = SiteName
  isSuccess()Z = Success
  setSuccess(Z)V = Success
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
  getUrlData()[Ljava/lang/String; = GetUrlData()
  setUrlData([Ljava/lang/String;)V = SetUrlData(string[])
com/liveperson/infra/utils/TextCrawler = Com.Liveperson.Infra.Utils.TextCrawler
  <init>()V = .ctor()
  TIMEOUT_IN_MILLI = TimeoutInMilli
  getSourceContent()Lcom/liveperson/infra/utils/SourceContent; = SourceContent
  makePreview(Lcom/liveperson/infra/utils/LinkPreviewCallback;Ljava/lang/String;)V = MakePreview(Com.Liveperson.Infra.Utils.ILinkPreviewCallback, string)
  parseHtml([Ljava/lang/String;)V = ParseHtml(string[])
com/liveperson/infra/utils/ThreadPoolExecutor = Com.Liveperson.Infra.Utils.ThreadPoolExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;)V = Execute(Java.Lang.IRunnable)
  executeDelayed(Ljava/lang/Runnable;J)V = ExecuteDelayed(Java.Lang.IRunnable, long)
  killAll()V = KillAll()
com/liveperson/infra/utils/UIUtils = Com.Liveperson.Infra.Utils.UIUtils
  <init>()V = .ctor()
  hideKeyboard(Landroid/app/Activity;)V = HideKeyboard(Android.App.Activity)
com/liveperson/infra/utils/UniqueID = Com.Liveperson.Infra.Utils.UniqueID
  <init>()V = .ctor()
  createUniqueMessageEventId()Ljava/lang/String; = CreateUniqueMessageEventId()
  getUniqueID()J = GetUniqueID()
com/liveperson/infra/utils/Utils = Com.Liveperson.Infra.Utils.Utils
  <init>()V = .ctor()
  SHA1 = Sha1
  SHA256 = Sha256
  getResources()Landroid/content/res/Resources; = Resources
  isValidCertificateKey(Ljava/lang/String;)Z = IsValidCertificateKey(string)
  tryParse(Ljava/lang/Object;F)F = TryParse(Java.Lang.Object, float)
  tryParse(Ljava/lang/Object;I)I = TryParse(Java.Lang.Object, int)
com/liveperson/infra/utils/VersionUtils = Com.Liveperson.Infra.Utils.VersionUtils
  <init>()V = .ctor()
  TAG = Tag
  isValidSdkVersion(Ljava/lang/String;)Z = IsValidSdkVersion(string)
  isVersionsEqual(Ljava/lang/String;Ljava/lang/String;)Z = IsVersionsEqual(string, string)
